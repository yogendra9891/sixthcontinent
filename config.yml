imports:
    - { resource: parameters.yml }
    - { resource: language_const.yml }
    - { resource: security.yml }

framework:
    #esi:             ~
    translator:      { fallback: "%locale%" }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: "%kernel.debug%"
    form:            true
    csrf_protection: true
    validation:      { enable_annotations: true }
    templating:      { engines: ['twig'] } #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    session:         ~

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    bundles:        [ ]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: "%kernel.root_dir%/Resources/java/compiler.jar"
        #yui_css:
        #    jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        types:
            json: Sonata\Doctrine\Types\JsonType

    orm:
        auto_generate_proxy_classes: %kernel.debug%
        entity_managers:
            default:
                auto_mapping: auto
                mappings:
                    SonataMediaBundle: ~
                    SonataUserBundle: ~
                    UserManagerSonataUserBundle: ~
                    FOSUserBundle: ~
                    # ApplicationSonataUserBundle: ~

# Swiftmailer Configuration
swiftmailer:
    transport:  smtp
    encryption: ssl
    auth_mode:  login
    host:       smtp.gmail.com
    username:   prem.baboo@daffodilsw.com
    password:   exchange@123
    
#fosuser   
fos_user:
    db_driver: orm
    firewall_name: main
    user_class: UserManager\Sonata\UserBundle\Entity\User
    group:
      group_class: UserManager\Sonata\UserBundle\Entity\Group
      
sonata_block:
    default_contexts: [cms]
    blocks:
        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
        sonata.block.service.text:
        sonata.block.service.rss:
        sonata.admin.block.admin_list:
        
            contexts:   [admin]
        
        #sonata.admin_doctrine_orm.block.audit:
        #    contexts:   [admin]

        sonata.block.service.text:
        sonata.block.service.action:
        sonata.block.service.rss:
        sonata.block.service.template:

        # Some specific block from the SonataMediaBundle
        sonata.media.block.media:
        sonata.media.block.gallery:
        sonata.media.block.feature_media:

sonata_admin:
    title:      Admin Panel
    title_logo: /bundles/sonataadmin/logo_title.png
    templates:
        # default global templates
        layout:  SonataAdminBundle::standard_layout.html.twig
        ajax:    SonataAdminBundle::ajax_layout.html.twig

        # default actions templates, should extend a global templates
        list:    AdminUserManagerAdminUserManagerBundle:CRUD:list.html.twig
        show:    SonataAdminBundle:CRUD:show.html.twig
        edit:    SonataAdminBundle:CRUD:edit.html.twig
    dashboard:
        blocks:
            # display a dashboard block
            - { position: left, type: sonata.admin.block.admin_list }
            - { position: left, type: sonata.block.service.template }
            
sonata_admin:
    security:
        handler: sonata.admin.security.handler.acl
        # acl security information
        information:
            GUEST:    [VIEW, LIST]
            ROLE_USER:     [VIEW, LIST]
            STAFF:    [EDIT, LIST, CREATE]
            EDITOR:   [OPERATOR, EXPORT]
            ADMIN:    [MASTER]
        # permissions not related to an object instance and also to be available when objects do not exist
        # the DELETE admin permission means the user is allowed to batch delete objects
        admin_permissions: [CREATE, LIST, DELETE, UNDELETE, EXPORT, OPERATOR, MASTER]
        # permission related to the objects
        object_permissions: [VIEW, EDIT, DELETE, UNDELETE, OPERATOR, MASTER, OWNER]

sonata_doctrine_orm_admin:
    # default value is null, so doctrine uses the value defined in the configuration
    entity_manager: ~

    templates:
        form:
            - SonataDoctrineORMAdminBundle:Form:form_admin_fields.html.twig
        filter:
            - SonataDoctrineORMAdminBundle:Form:filter_admin_fields.html.twig
        types:
            list:
                array:      SonataAdminBundle:CRUD:list_array.html.twig
                boolean:    SonataAdminBundle:CRUD:list_boolean.html.twig
                date:       SonataAdminBundle:CRUD:list_date.html.twig
                time:       SonataAdminBundle:CRUD:list_time.html.twig
                datetime:   SonataAdminBundle:CRUD:list_datetime.html.twig
                text:       SonataAdminBundle:CRUD:base_list_field.html.twig
                trans:      SonataAdminBundle:CRUD:list_trans.html.twig
                string:     SonataAdminBundle:CRUD:base_list_field.html.twig
                smallint:   SonataAdminBundle:CRUD:base_list_field.html.twig
                bigint:     SonataAdminBundle:CRUD:base_list_field.html.twig
                integer:    SonataAdminBundle:CRUD:base_list_field.html.twig
                decimal:    SonataAdminBundle:CRUD:base_list_field.html.twig
                identifier: SonataAdminBundle:CRUD:base_list_field.html.twig

            show:
                array:      SonataAdminBundle:CRUD:show_array.html.twig
                boolean:    SonataAdminBundle:CRUD:show_boolean.html.twig
                date:       SonataAdminBundle:CRUD:show_date.html.twig
                time:       SonataAdminBundle:CRUD:show_time.html.twig
                datetime:   SonataAdminBundle:CRUD:show_datetime.html.twig
                text:       SonataAdminBundle:CRUD:base_show_field.html.twig
                trans:      SonataAdminBundle:CRUD:show_trans.html.twig
                string:     SonataAdminBundle:CRUD:base_show_field.html.twig
                smallint:   SonataAdminBundle:CRUD:base_show_field.html.twig
                bigint:     SonataAdminBundle:CRUD:base_show_field.html.twig
                integer:    SonataAdminBundle:CRUD:base_show_field.html.twig
                decimal:    SonataAdminBundle:CRUD:base_show_field.html.twig
#fos_message:
#    db_driver: orm
#    thread_class: Message\MessageBundle\Entity\Thread
#    message_class: Message\MessageBundle\Entity\Message
fos_message:
    db_driver: mongodb
    thread_class: Message\MessageBundle\Document\Thread
    message_class: Message\MessageBundle\Document\Message

sensio_framework_extra:
    view:
        annotations: false

fos_rest:
    param_fetcher_listener: true
    body_listener: true
    format_listener: true
    view:
        view_response_listener: 'force'
        formats:
            xml: true
            json : true
        templating_formats:
            html: true
        force_redirects:
            html: true
        failed_validation: HTTP_BAD_REQUEST
        default_engine: twig
    routing_loader:
        default_format: json
    body_listener:
        array_normalizer: fos_rest.normalizer.camel_keys
sonata_media:
    db_driver: doctrine_orm
    class:
        media:              Application\Sonata\MediaBundle\Entity\Media
        gallery:            Application\Sonata\MediaBundle\Entity\Gallery
        gallery_has_media:  Application\Sonata\MediaBundle\Entity\GalleryHasMedia

    default_context: default
    contexts:
        default:  # the default context is mandatory
            download:
                strategy: sonata.media.security.superadmin_strategy
                mode: http
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file

            formats:
                small: { width: 100 , quality: 70}
                big:   { width: 500 , quality: 70}

        tv:
            download:
                strategy: sonata.media.security.superadmin_strategy
                mode: http
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube

            formats:
                cinema:     { width: 1850 , quality: 768}
                grandmatv:  { width: 640 , quality: 480}

        news:
            download:
                strategy: sonata.media.security.superadmin_strategy
                mode: http
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file

            formats:
                small: { width: 150 , quality: 95}
                big:   { width: 500 , quality: 90}

    cdn:
        server:
            path:      web/uploads/media # http://media.sonata-project.org

        panther:
            path:       http://domain.pantherportal.com/uploads/media
            site_id:
            password:
            username:

        fallback:
            master:     sonata.media.cdn.panther
            fallback:   sonata.media.cdn.server

    filesystem:
        local:
            directory:  %kernel.root_dir%/../web/uploads/media
            create:     false

        ftp:
            directory:
            host:
            username:
            password:
            port:     21
            passive:  false
            create:   false
            mode:     2 # this is the FTP_BINARY constant. see: http://php.net/manual/en/ftp.constants.php

        s3:
            bucket:
            accessKey:
            secretKey:
            create:         false
            region:         s3.amazonaws.com # change if not using US Standard region
            storage:        standard # can be one of: standard or reduced
            acl:            public # can be one of: public, private, open, auth_read, owner_read, owner_full_control
            encryption:     aes256 # can be aes256 or not set
            cache_control:  max-age=86400 # or any other
            meta:
                key1:       value1 #any amount of metas(sent as x-amz-meta-key1 = value1)

        mogilefs:
            hosts:      []
            domain:

        replicate:
            master: sonata.media.adapter.filesystem.s3
            slave: sonata.media.adapter.filesystem.local

        rackspace:
           url:
           secret:
             username:
             apiKey:
           region:
           containerName: media
           create_container: false

        openstack:
           url:
           secret:
             username:
             password:
           region:
           containerName: media
           create_container: false

    providers:
        file:
            service:    sonata.media.provider.file
            resizer:    false
            filesystem: sonata.media.filesystem.local
            cdn:        sonata.media.cdn.server
            generator:  sonata.media.generator.default
            thumbnail:  sonata.media.thumbnail.format
            allowed_extensions: ['pdf', 'txt', 'rtf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pttx', 'odt', 'odg', 'odp', 'ods', 'odc', 'odf', 'odb', 'csv', 'xml']
            allowed_mime_types: ['application/pdf', 'application/x-pdf', 'application/rtf', 'text/html', 'text/rtf', 'text/plain']

        image:
            service:    sonata.media.provider.image
            resizer:    sonata.media.resizer.simple # sonata.media.resizer.square
            filesystem: sonata.media.filesystem.local
            cdn:        sonata.media.cdn.server
            generator:  sonata.media.generator.default
            thumbnail:  sonata.media.thumbnail.format
            allowed_extensions: ['jpg', 'png', 'jpeg']
            allowed_mime_types: ['image/pjpeg', 'image/jpeg', 'image/png', 'image/x-png']

        youtube:
            service:    sonata.media.provider.youtube
            resizer:    sonata.media.resizer.simple
            filesystem: sonata.media.filesystem.local
            cdn:        sonata.media.cdn.server
            generator:  sonata.media.generator.default
            thumbnail:  sonata.media.thumbnail.format
            html5: false

#        dailymotion:
#            service:    sonata.media.provider.dailymotion
#            resizer:    sonata.media.resizer.simple
#            filesystem: sonata.media.filesystem.local
#            cdn:        sonata.media.cdn.server
#            generator:  sonata.media.generator.default
#            thumbnail:  sonata.media.thumbnail.format
#
#    buzz:
#        connector:  sonata.media.buzz.connector.file_get_contents # sonata.media.buzz.connector.curl
        
fos_oauth_server:
    db_driver: orm
    client_class:        UserManager\Sonata\UserBundle\Entity\Client
    access_token_class:  UserManager\Sonata\UserBundle\Entity\AccessToken
    refresh_token_class: UserManager\Sonata\UserBundle\Entity\RefreshToken
    auth_code_class:     UserManager\Sonata\UserBundle\Entity\AuthCode
    service:
        user_provider: fos_user.user_manager
        options:
            supported_scopes: user
            access_token_lifetime: 86400 #will set token life time to seconds

doctrine_mongodb:
    connections:
        default:
            server: %mongodbhost_host%
            options:
                connect: true
    default_database: %mongodb_database_name%
    document_managers:
        default:
            mappings:
                MediaMediaBundle: ~
                NManagerNotificationBundle: ~
                MessageMessageBundle: ~
                PostPostBundle: ~
                UserManagerSonataUserBundle: ~

                StoreManagerPostBundle: ~

                NewsletterNewsletterBundle: ~

                DashboardManagerBundle: ~
                StoreManagerStoreBundle: ~
                ExportManagementBundle: ~
                TransactionTransactionBundle: ~
                AcmeGiftBundle: ~

            metadata_cache_driver: array # array, apc, xcache, memcache

sonata_user:
    security_acl: true
    class:
        user:   UserManager\Sonata\UserBundle\Entity\User
        group:  UserManager\Sonata\UserBundle\Entity\Group
    admin:
        group:
            class:          Sonata\UserBundle\Admin\Entity\GroupAdmin
            controller:     SonataAdminBundle:CRUD
            translation:    SonataUserBundle
        user:
            class:          Sonata\UserBundle\Admin\Entity\UserAdmin
            controller:     DashboardManagerBundle:CRUD
            translation:    SonataUserBundle
            
iam_persistent_mongo_db_acl:
    acl_provider:
        default_database: %mongodb_database_name%
        
iam_persistent_mongo_db_acl:
    acl_provider:
        default_database: ~
        collections:
            entry: ~
            object_identity: ~            

services:
    gift_service:
        class: Acme\GiftBundle\Services\GiftService
        arguments: [ @doctrine.orm.entity_manager, @doctrine.odm.mongodb.document_manager ]
    admin.template:
        class: Newsletter\NewsletterBundle\Admin\TemplateAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: News letter, label: Email templates }
        arguments: [null, Newsletter\NewsletterBundle\Entity\Template, SonataAdminBundle:CRUD]
    admin.selectusers:    
        class: Newsletter\NewsletterBundle\Admin\TemplateUsersAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: News letter, label: Select Users for newsletter }
        arguments: [null, Newsletter\NewsletterBundle\Entity\Nuser, NewsletterNewsletterBundle:CRUD]
    my.twig.extension:
        class: Newsletter\NewsletterBundle\Extension\NewsletterTwigExtension
        tags:
            -  { name: twig.extension }
        arguments:
            em: "@doctrine.orm.entity_manager"
    admin.citizenusers:    
        class: AdminUserManager\AdminUserManagerBundle\Admin\CitizenUserAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: Assign User Role, label: User Multi Profile List}
        arguments: [null, UserManager\Sonata\UserBundle\Entity\CitizenUser, AdminUserManagerAdminUserManagerBundle:CRUD]
    admin.brokerusers:    
        class: AdminUserManager\AdminUserManagerBundle\Admin\BrokerUserAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: Assign User Role, label: Broker Profile User List}
        arguments: [null, UserManager\Sonata\UserBundle\Entity\BrokerUser, AdminUserManagerAdminUserManagerBundle:CRUD]
    counter.twig.extension:
        class: AdminUserManager\AdminUserManagerBundle\Extension\CounterTwigExtension
        tags:
            -  { name: twig.extension }
        arguments:
            em: "@doctrine.orm.entity_manager"
    admin.paymentexport:
        class: AdminUserManager\AdminUserManagerBundle\Admin\PaymentExportUserAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: Payment Export, label: Payment Export }
        arguments: [null, ExportManagement\ExportManagementBundle\Entity\PaymentExport, SonataAdminBundle:CRUD]
   
   
