<?php

namespace PostFeeds\PostFeedsBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Utility\UtilityBundle\Utils\Utility;

/**
 * PostFeedsMongoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostFeedsMongoRepository extends DocumentRepository {

    CONST PERSONAL_POST = 1;
    CONST PROFESSIONAL_POST = 2;
    CONST PUBLIC_POST = 3;
    CONST USER_POST = 'user';
    CONST SHOP_POST = 'shop';
    CONST CLUB_POST = 'club';
    CONST SOCIAL_PROJECT_POST = 'social_project';
    CONST POST_ACTIVE = 1;
    CONST DASHBOARD = 'DASHBOARD';
    CONST CLUB = 'CLUB';
    CONST SHOP = 'SHOP';
    CONST WALL = 'WALL';
    CONST SOCIAL_PROJECT = 'SOCIAL_PROJECT';
    CONST PERSIONAL_PRIVACY = 1;
    CONST PROFESSIONAL_PRIVACY = 2;
    CONST PUBLIC_PRIVACY = 3;
    
    /**
     * Get Post id by inner document id
     * @param string $media_id
     * @return string
     */
    public function getPostByMediaId($media_id) {
        $post_obj = null;
        $media_id = new \MongoId($media_id);
        $result = $this->createQueryBuilder('post')
                ->field('media.$id')->equals($media_id)
                ->getQuery()
                ->execute()
                ->toArray('false');
        foreach ($result as $res) {
            $post_obj = $res;
        }
        return $post_obj;
    }

    /**
     * 
     * @param type $post_id
     * @return type
     */
    public function getCommentListFromPost($post_id, $start = null, $limit, $resultWithCount = false) {
       $commentCount=0;
        if($resultWithCount){
            $qb = $this->createQueryBuilder('m')
                ->field('is_active')->equals(1)
                ->field('id')->equals($post_id)
                ->map('function() { var _length = this.comments ? this.comments.length : 0; emit("totalComment", _length); }')
                ->reduce('function(k, vals) {
                     var sum = 0;
                    vals.forEach(function(value) {
                        sum += value;
                    });
                    return sum;
                }');
            $comments = $qb->getQuery()->getSingleResult();
            $commentCount = $comments ? $comments['value'] : 0;
        }
   
        $query = $this->createQueryBuilder('PostFeeds');
        if(!is_null($start)){
            $query =  $query->selectSlice('comments', -$limit);
        }else{
            $query =  $query->selectSlice('comments', -$limit);
        }
        if($commentCount>0){
            $query = $query->field('comments.is_active')->equals(1);
        }
        
        $query = $this->createQueryBuilder('PostFeeds');
        $result = $query
                     ->field('id')->equals($post_id)
                     ->selectSlice('comments', $start, $limit)
                     ->getQuery()
                     ->getSingleResult();
        
        return $resultWithCount==true ? array('result'=>$result, 'size'=>$commentCount) : array('result'=>$result);
    }

    /**
     * Get Post id by inner document id
     * @param string $media_id
     * @return string
     */
    public function getSingleCommentForPost($post_id, $comment_id) {
        $comment = (object) array();
        $comment_id = new \MongoId($comment_id);
        $post_id = new \MongoId($post_id);
        $result = $this->createQueryBuilder('post')
                ->field('id')->equals($post_id)
                ->field('comments.id')->equals($comment_id)
                ->getQuery()
                ->execute()
                ->toArray('false');
        // $result = array($result);
        foreach ($result as $res) {
            $comments = $res->getComments();
            foreach ($comments as $comment) {
                if ($comment->getId() == $comment_id) {
                    return $comment;
                }
            }
        }

        return $comment;
    }
    
    /**
     * Edit the item rate
     * @param type $rate_id
     * @return boolean
     */
    public function editPostComment1($comment_id, $comment_obj, $post_id) {
        
        $comment_id = new \MongoId($comment_id);
        $post_id = new \MongoId($post_id);
        $result = $this->createQueryBuilder('post')
                ->update()
                ->field("id")->equals($post_id)
                ->field("comments.id")->equals($comment_id)
                ->field("comments.$")->set($comment_obj)
                ->getQuery()
                ->execute();
        return true;
    }
    
     /**
     * Edit the item rate
     * @param type $rate_id
     * @return boolean
     */
    public function editPostComment($comment_obj, $post_id) {
        //$comment_id = new \MongoId($comment_id);
        $post_id = new \MongoId($post_id);
        $result = $this->createQueryBuilder('postfeeds')
                ->update()
                ->field('id')->equals($post_id)
                //->field("comments.id")->equals($comment_id)
                ->field('comments')->set($comment_obj)
                ->getQuery()
                ->execute();
        die;
        return true;
    }

    /**
     * finding the posts for dashboard/wall/shop dashbaord/club dashboard
     * @param string $dashboard_type
     * @param int $is_own_wall
     * @param int $user_id
     * @param int $friend_id
     * @param array $following_ids
     * @param array $personal_friend_ids
     * @param array $professional_friend_ids
     * @param int $is_personal
     * @param int $is_professional
     * @param int $shop_id
     * @param string $club_id
     * @param string $social_project_id
     * @param int $limit
     * @param int $offset
     * @param int $count_needed
     * return the array
     */
    public function getPosts($dashboard_type, $is_own_wall, $user_id, $friend_id, $following_ids, $personal_friend_ids, $professional_friend_ids, $is_personal, $is_professional, $shop_id, $club_id, $social_project_id, $limit, $offset, $count_needed, $last_post_id = null) {
        $personal_privacy_setting = array(Utility::getIntergerValue(self::PERSIONAL_PRIVACY), Utility::getIntergerValue(self::PUBLIC_PRIVACY));
        $professional_privacy_setting = array(Utility::getIntergerValue(self::PROFESSIONAL_PRIVACY), Utility::getIntergerValue(self::PUBLIC_PRIVACY));
        $following_privacy_setting = array(Utility::getIntergerValue(self::PUBLIC_PRIVACY));
        $public_privacy_setting = array(Utility::getIntergerValue(self::PUBLIC_PRIVACY));
        $all_privacy_setting = array(Utility::getIntergerValue(self::PERSIONAL_PRIVACY), Utility::getIntergerValue(self::PROFESSIONAL_PRIVACY), Utility::getIntergerValue(self::PUBLIC_PRIVACY));
        $dashboard_post_type = array(self::USER_POST, self::SHOP_POST, self::CLUB_POST, self::SOCIAL_PROJECT_POST);
        $wall_post_type = array(self::USER_POST, self::SHOP_POST, self::CLUB_POST);
        $shop_wall_type = array(self::SHOP_POST);
        $club_wall_type = array(self::CLUB_POST);
        $social_project_wall_type = array(self::SOCIAL_PROJECT_POST);
        $user_ids = array((int) $user_id);
        $results = array();

        if ($dashboard_type == Utility::getUpperCaseString(Utility::getTrimmedString(self::DASHBOARD))) { //user dashboard 
            $result = $this->dashbaordposts($dashboard_post_type, $personal_friend_ids, $professional_friend_ids, $following_ids, $user_ids, $personal_privacy_setting, $professional_privacy_setting, $following_privacy_setting, $all_privacy_setting);
        } else if ($dashboard_type == Utility::getUpperCaseString(Utility::getTrimmedString(self::WALL))) { //user wall
            $result = $this->wallposts($wall_post_type, $is_own_wall, $user_ids, $friend_id, $is_personal, $is_professional, $personal_privacy_setting, $professional_privacy_setting, $public_privacy_setting);
        } else if ($dashboard_type == Utility::getUpperCaseString(Utility::getTrimmedString(self::SHOP))) { //shop wall
            $result = $this->shopposts($shop_wall_type, $user_ids, $shop_id, $all_privacy_setting);
        } else if ($dashboard_type == Utility::getUpperCaseString(Utility::getTrimmedString(self::CLUB))) { //club wall
            $result = $this->clubposts($club_wall_type, $user_ids, $club_id, $all_privacy_setting);
        } else if ($dashboard_type == Utility::getUpperCaseString(Utility::getTrimmedString(self::SOCIAL_PROJECT))) { //social project wall
            $result = $this->socialposts($social_project_wall_type, $user_ids, $social_project_id, $all_privacy_setting);
        }
        if(!empty($last_post_id)){
	    $offset = 0;
            $result = $result->field('id')->lt($last_post_id);
	}
        if ($count_needed) { //if user only wants count
            $results_count =  $result->count()
                                     ->getQuery()
                                     ->execute();
            return $results_count;
        }
        
       $results = $result->sort('id', 'DESC')
                ->limit($limit)
                ->skip($offset)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $results;
    }

    /**
     * finding the dashboard posts
     * @param array $dashboard_post_type
     * @param array $personal_friend_ids
     * @param array $professional_friend_ids
     * @param array $following_ids
     * @param array $user_ids
     * @param array $personal_privacy_setting
     * @param array $professional_privacy_setting
     * @param array $following_privacy_setting
     * @param array $all_privacy_setting
     * @return object $result
     */
    public function dashbaordposts($dashboard_post_type, $personal_friend_ids, $professional_friend_ids, $following_ids, $user_ids, $personal_privacy_setting, $professional_privacy_setting, $following_privacy_setting, $all_privacy_setting) {
        $qb = $this->createQueryBuilder('PostFeeds');
        $result = $qb->field('post_type')->in($dashboard_post_type)
                ->addOr(
                        $qb->expr()
                        ->field('to_id')->in($personal_friend_ids)
                        ->field('privacy_setting')->in($personal_privacy_setting)
                )
                ->addOr(
                        $qb->expr()
                        ->field('to_id')->in($professional_friend_ids)
                        ->field('privacy_setting')->in($professional_privacy_setting)
                )
                ->addOr(
                        $qb->expr()
                        ->field('to_id')->in($following_ids)
                        ->field('privacy_setting')->in($following_privacy_setting)
                )
                ->addOr(
                        $qb->expr()
                        ->field('to_id')->in($user_ids)
                        ->field('privacy_setting')->in($all_privacy_setting)
                )
                ->addOr(
                    $qb->expr()->field('tag_user')->in($user_ids)
        );
        return $result;
    }

    /**
     * finding the user wall posts
     * @param array $wall_post_type
     * @param array $is_own_wall
     * @param array $user_ids
     * @param int $friend_id
     * @param int $is_personal
     * @param int $is_professional
     * @param array $personal_privacy_setting
     * @param array $professional_privacy_setting
     * @param array $public_privacy_setting
     * @return object $result
     */
    public function wallposts($wall_post_type, $is_own_wall, $user_ids, $friend_id, $is_personal, $is_professional, $personal_privacy_setting, $professional_privacy_setting, $public_privacy_setting) {
        $qb = $this->createQueryBuilder('User');
        if ($is_own_wall) { //user seeing own wall
            $result = $qb->field('post_type')->in($wall_post_type)
                    ->addOr(
                        $qb->expr()->field('to_id')->in($user_ids)
                    )
                    ->addOr(
                        $qb->expr()->field('tag_user')->in($user_ids)
            );
        } else { //other user wall
            $friend_ids = array($friend_id);
            if ($is_personal && $is_professional) { //personal and professional means both type friend
                $privacy = array_merge($personal_privacy_setting, $professional_privacy_setting);
            } else if ($is_personal) { //personal friend
                $privacy = $personal_privacy_setting;
            } else if ($is_professional) { //professional friend
                $privacy = $professional_privacy_setting;
            } else { //only  public posts
                $privacy = $public_privacy_setting;
            }
            $result = $qb->field('post_type')->in($wall_post_type)
                    ->addOr(
                        $qb->expr()->field('to_id')->in($friend_ids)
                           ->field('privacy_setting')->in($privacy)
                    )
                    ->addOr(
                    $qb->expr()->field('tag_user')->in($friend_ids)
                    ->field('privacy_setting')->in($privacy)
            );
        }
        return $result;
    }

    /**
     * finding the post of shop dashboard
     * @param array $shop_wall_type
     * @param array $user_ids
     * @param int $shop_id
     * @param array $all_privacy_setting
     */
    public function shopposts($shop_wall_type, $user_ids, $shop_id, $all_privacy_setting) { 
        $shop_ids = array((int) $shop_id);
        $qb = $this->createQueryBuilder('Shop');
        $result = $qb->field('post_type')->in($shop_wall_type)
                ->addOr(
                        $qb->expr()->field('type_info.id')->equals($shop_id)
                        ->field('privacy_setting')->in($all_privacy_setting)
                )
                ->addOr(
                $qb->expr()->field('tag_shop')->in($shop_ids)
                ->field('privacy_setting')->in($all_privacy_setting)
        );
        return $result;
    }

    /**
     * finding the club dashbaird posts
     * @param array $club_wall_type
     * @param array $user_ids
     * @param string $club_id
     * @param array $all_privacy_setting
     */
    public function clubposts($club_wall_type, $user_ids, $club_id, $all_privacy_setting) {
        $club_ids = array((string) $club_id);
        $qb = $this->createQueryBuilder('Club');
        $result = $qb->field('post_type')->in($club_wall_type)
                ->addOr(
                        $qb->expr()->field('type_info.id')->equals($club_id)
                        ->field('privacy_setting')->in($all_privacy_setting)
                )
                ->addOr(
                $qb->expr()->field('tag_club')->in($club_ids)
                ->field('privacy_setting')->in($all_privacy_setting)
        );
        return $result;
    }

    /**
     * finding the social project dashboard posts
     * @param array $social_project_wall_type
     * @param array $user_ids
     * @param string $social_project_id
     * @param array $all_privacy_setting
     */
    public function socialposts($social_project_wall_type, $user_ids, $social_project_id, $all_privacy_setting) {
        $social_project_ids = array(Utility::getStringValue($social_project_id));
        $qb = $this->createQueryBuilder('Social_project');
        $result = $qb->field('post_type')->in($social_project_wall_type)
                ->addOr(
                        $qb->expr()->field('type_info.id')->equals($social_project_id)
                        ->field('privacy_setting')->in($all_privacy_setting)
//                )
//                ->addOr(
//                      $qb->expr()->field('tag_social_project')->in($social_project_ids)
//                      ->field('privacy_setting')->in($all_privacy_setting) ///@TODO when social project tagging will start.
        );
        return $result;
    }
    
     /**
      * delete post rating
      * @param type $post_id
      * @param type $rate_id
      * @return type
      */
    public function deletePostRating($post_id,$rate_id) {
        $post_obj = (object) array();
        $rate_id = new \MongoId($rate_id);
        $qb = $this->createQueryBuilder();
           $qb->remove()
               ->field('id')->equals($post_id)
               ->field('rate.$id')->equals($rate_id)
               ->getQuery()
               ->execute(); 
           return true;
          
        /**   
        $result = $this->createQueryBuilder('post')
                ->field('rate.$id')->equals($media_id)
                ->getQuery()
                ->execute()
                ->toArray('false');
        foreach ($result as $res) {
            $post_obj = $res;
        }
        return $post_obj;
        **/
    }
    
    /**
     * Get Post id by inner document id
     * @param string $media_id
     * @return string
     */
    public function getSingleComment($comment_id) {
        try{
        //$comment = (object) array(); //commented
        $comment = array();    
        $comment_id = new \MongoId($comment_id);
        $result = $this->createQueryBuilder('post')
                ->field('comments.id')->equals($comment_id)
                ->getQuery()
                ->execute()
                ->toArray('false');
        // $result = array($result);
        foreach ($result as $res) {
            $comments = $res->getComments();
            foreach ($comments as $comment) {
                if ($comment->getId() == $comment_id) {
                    return $comment;
                }
            }
        }
        }catch(\Exception $e){
            return false;
        }
        return $comment;
    }
}
