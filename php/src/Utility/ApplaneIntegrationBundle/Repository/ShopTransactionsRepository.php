<?php

namespace Utility\ApplaneIntegrationBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ShopTransactionsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShopTransactionsRepository extends EntityRepository
{
    /**
     * finding the shop pending transaction 
     * @return object array
     */
    public function getShopTotalRevenue($shop_id) {
        $result = array();
        $qb = $this->createQueryBuilder('sm')
                ->select('sum(sm.totalTransactionAmount) AS total_revenue')
                ->where('sm.shopId =:sid')
                ->setParameter('sid', $shop_id)
                ->getQuery();

        $result = $qb->getResult();        
        return $result[0]['total_revenue'];   
    }
    
    /**
     * finding the shop transaction 
     * @return object array
     */
    public function getShopTransaction() {
        $response = array();
        $result = array();
        $qb = $this->createQueryBuilder('sm')
                ->select('max(sm.id) as id')
                ->where('sm.status =:status')
                //->andWhere('sm.type =:type')
                ->setParameter('status', 0)
                //->setParameter('type', 'T')
                ->groupBy('sm.shopId')
                ->getQuery();

        $results = $qb->getResult();

        if ($results) {
            foreach ($results as $result) {
                $id[] = $result['id'];
            }
            
            //create the query 
            $qb = $this->createQueryBuilder('c');
            $query = $qb->select('c')
                    ->where(
                            $qb->expr()->In('c.id', ':txn_id')
                    )
                    ->setParameter('txn_id', $id)
                    ->getQuery();
            $response = $query->getResult();
        }
        return $response;
    }
    
     /**
     * finding the shop pending transaction 
     * @return object array
     */
    public function getShopPedningTransaction($shop_id,$transaction_id) {
        $result = array();
        $qb = $this->createQueryBuilder('sm')
                ->select('sm')
                ->where('sm.shopId =:sid','sm.status =:status','sm.id !=:txn_id')
                ->setParameter('sid', $shop_id)
                ->setParameter('status', 0)
                ->setParameter('txn_id', $transaction_id)
                ->getQuery();

           return $result = $qb->getResult();   
    }
    
    /**
     * mark transaction 
     * @return object array
     */
    public function setMultiTransactionStatus($pending_transaction_ids,$status) {
       $pending_transaction_ids_array = explode(",",$pending_transaction_ids);
       
        //create the query 
        $qb = $this->createQueryBuilder('s');
        $query = $qb->update()
            ->set('s.status', ':status')
            ->where(
                    $qb->expr()->In('s.id', ':txn_id')
                )
            ->setParameter('status',1)
            ->setParameter('txn_id', $pending_transaction_ids_array)
            ->getQuery();
        $response = $query->getResult();
        return true;
    }
    
     /**
     * finding the shop pending transaction 
     * @return object array
     */
    public function getAllShopPedningTransaction($shop_id, $limit_start=null, $limit_size=null) {
        $result = array();
        $qb = $this->createQueryBuilder('sm');
        
        $query = $qb->select('sm')
                ->where('sm.shopId =:sid','sm.status =:status' , ' 1 = 2 ')
                ->setParameter('sid', $shop_id)
                ->setParameter('status', 0);
        if($limit_start != null || $limit_size !=null ){
         $query = $qb->setFirstResult($limit_start)
                ->setMaxResults($limit_size);
        }
        
       $query = $qb->getQuery();
       return $result = $query->getResult();   
    }
    
    /**
     * finding the shop pending transaction 
     * @return object array
     */
    public function getAllShopPedningTransactionCount($shop_id) {
        $result = array();
        $qb = $this->createQueryBuilder('sm')
                ->select('sm')
                ->where('sm.shopId =:sid','sm.status =:status' , '1 = 2')
                ->setParameter('sid', $shop_id)
                ->setParameter('status', 0)
                ->getQuery();

          $result = $qb->getResult(); 
          return count($result);
    }
    
     /**
     * finding the shop transaction by id
     * @return object array
     */
    public function getShopTransactionById($shop_id) {
        $response = array();
        $result = array();
        $qb = $this->createQueryBuilder('sm')
                ->select('max(sm.id) as id')
                ->where('sm.status =:status')
                //->andWhere('sm.type =:type')
                ->andWhere('sm.shopId =:shop_id')
                ->setParameter('status', 0)
                //->setParameter('type', 'T')
                ->setParameter('shop_id', $shop_id)
                ->getQuery();

        $results = $qb->getResult();

        if ($results) {
            foreach ($results as $result) {
                $id[] = $result['id'];
            }
            
            //create the query 
            $qb = $this->createQueryBuilder('c');
            $query = $qb->select('c')
                    ->where(
                            $qb->expr()->In('c.id', ':txn_id')
                    )
                    ->setParameter('txn_id', $id)
                    ->getQuery();
            $response = $query->getResult();
        }
        return $response;
    }
    
    /**
     * get transaction 
     * @param int $shop_id
     * @param string $pending_ids
     */
    public function getShopTransactionData($shop_id, $pending_ids) {
        $result = array();
        $today  = new \DateTime('now');
        $current_date = $today->format('Y-m-d');
        $sql_in = '';
        $exploded_pending_ids = explode(',', $pending_ids);
        if ($exploded_pending_ids[0] != '') {
            $sql_in = " AND id in ($pending_ids)";
        }
        $group_type = " AND type in ('R', 'T')";
        $shop_transaction_table = $this->getEntityManager()->getClassMetadata('UtilityApplaneIntegrationBundle:ShopTransactions')->getTableName();
        $sql = "SELECT sum(payable_amount) as payable_amount, SUM(total_payable_amount) as total_payable_amount,  type, shop_id, GROUP_CONCAT(DISTINCT transaction_id separator ',') AS transaction_ids from ".
               "$shop_transaction_table where shop_id=".$shop_id.' AND status = 1'.$sql_in.$group_type." group by type";
        $stmt = $this->getEntityManager()
               ->getConnection()
               ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;        
    }
    
    /**
     * Get users that have pending registration fee
     * @return array
     */
    public function getRegPendingUsers()
    {
        $results = array();
        $qb = $this->createQueryBuilder('sm')
                ->select('co.userId as store_owner, co.storeId')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 'sm.shopId = co.storeId')
                ->innerJoin('StoreManagerStoreBundle:Store', 's', 'WITH', 's.id = co.storeId')
                ->where('sm.status =:status')
                ->andWhere('sm.type =:type')
                ->andWhere('s.shopStatus =:shopstatus')
                ->andWhere('s.isActive =:isactive')
                ->setParameter('status', 0)
                ->setParameter('type', 'R')
                ->setParameter('shopstatus', 1)
                ->setParameter('isactive', 1)
                ->getQuery();
        $results = $qb->getResult();
        return $results;
    }
    
    /**
     * get transaction 
     * @param int $shop_id
     * @param string $pending_ids
     */
    public function getShopSubscriptionShoppingCardTransactionData() {
        $result = array();
        $today  = new \DateTime('now');
        $current_date = $today->format('Y-m-d');
        $group_type = " AND type in ('S', 'C')";
        
        $shop_transaction_table = $this->getEntityManager()->getClassMetadata('UtilityApplaneIntegrationBundle:ShopTransactions')->getTableName();
        $sql = "SELECT sum(payable_amount) as payable_amount, SUM(total_payable_amount) as total_payable_amount,  created_at, type, shop_id, GROUP_CONCAT(DISTINCT transaction_id separator ',') AS transaction_ids from ".
               "$shop_transaction_table where status = 1 AND created_at = '$current_date'". $group_type." group by shop_id, type";

        $stmt = $this->getEntityManager()
               ->getConnection()
               ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;        
    }
    
    
    /**
     * get transaction 
     * @param int $shop_id
     * @param string $pending_ids
     */
    public function getShopSystemManualTransactionData($shop_id, $pending_ids) {
        $result = array();
        $today  = new \DateTime('now');
        $current_date = $today->format('Y-m-d');
        $sql_in = '';
        $exploded_pending_ids = explode(',', $pending_ids);
        if ($exploded_pending_ids[0] != '') {
            $sql_in = " AND id in ($pending_ids)";
        }
        $group_type = " AND type in ('R', 'T')";
        $shop_transaction_table = $this->getEntityManager()->getClassMetadata('UtilityApplaneIntegrationBundle:ShopTransactions')->getTableName();
        $sql = "SELECT sum(payable_amount) as payable_amount, SUM(total_payable_amount) as total_payable_amount,  type, shop_id, GROUP_CONCAT(DISTINCT transaction_id separator ',') AS transaction_ids from ".
               "$shop_transaction_table where shop_id=".$shop_id.' AND status = 1'.$sql_in.$group_type." group by type";
        $stmt = $this->getEntityManager()
               ->getConnection()
               ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;        
    }
    
        /**
     * get transaction 
     * @param int $shop_id
     * @param string $pending_ids
     */
    public function getShopShoppingCardTransactionData() {
        $result = array();
        $today  = new \DateTime('now');
        $current_date = $today->format('Y-m-d');
        $group_type = " AND type in ('C')";
        
        $shop_transaction_table = $this->getEntityManager()->getClassMetadata('UtilityApplaneIntegrationBundle:ShopTransactions')->getTableName();
        $sql = "SELECT sum(payable_amount) as payable_amount, SUM(total_payable_amount) as total_payable_amount,  created_at, type, shop_id, GROUP_CONCAT(DISTINCT transaction_id separator ',') AS transaction_ids from ".
               "$shop_transaction_table where status = 1 AND created_at = '$current_date'". $group_type." group by shop_id, type";
        $stmt = $this->getEntityManager()
               ->getConnection()
               ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;        
    }
    
    /**
     * get transaction of subscription type
     * @param int $shop_id
     * @param string $pending_ids
     */
    public function getShopSystemManualSubscriptionTransactionData($shop_id, $pending_ids) {
        $result = array();
        $today  = new \DateTime('now');
        $current_date = $today->format('Y-m-d');
        $sql_in = '';
        $exploded_pending_ids = explode(',', $pending_ids);
        if ($exploded_pending_ids[0] != '') {
            $sql_in = " AND id in ($pending_ids)";
        }
        $group_type = " AND type in ('S')";
        $shop_transaction_table = $this->getEntityManager()->getClassMetadata('UtilityApplaneIntegrationBundle:ShopTransactions')->getTableName();
        $sql = "SELECT GROUP_CONCAT(id separator ',') AS ids, sum(payable_amount) as payable_amount, SUM(total_payable_amount) as total_payable_amount,  type, shop_id, GROUP_CONCAT(DISTINCT transaction_id separator ',') AS transaction_ids from ".
               "$shop_transaction_table where shop_id=".$shop_id.' AND status = 1'.$sql_in.$group_type." group by type";
        //echo $sql; exit;
        $stmt = $this->getEntityManager()
               ->getConnection()
               ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;        
    }
    
    /**
     * get remaining susbcription transactions
     * @param string $ids
     * @return type
     */
    public function getRemainSubscriptionCardTransactionData($ids) {
        $result = array();
        $yesterday  = new \DateTime('yesterday');
        $yesterday_date = $yesterday->format('Y-m-d');
        $today = new \DateTime('now');
        $current_date = $today->format('Y-m-d');
        $sql_in = '';
        if ($ids != '') {
            $sql_in = " AND id NOT IN ($ids)"; 
        }
        $group_type = " AND type in ('S')";
        $shop_transaction_table = $this->getEntityManager()->getClassMetadata('UtilityApplaneIntegrationBundle:ShopTransactions')->getTableName();
        $sql = "SELECT sum(payable_amount) as payable_amount, SUM(total_payable_amount) as total_payable_amount,  created_at, type, shop_id, GROUP_CONCAT(DISTINCT transaction_id separator ',') AS transaction_ids from ".
               "$shop_transaction_table where status = 1 AND created_at = '$yesterday_date'". $group_type.$sql_in." group by shop_id, type";
        
        $stmt = $this->getEntityManager()
               ->getConnection()
               ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;           
    }
    
    /**
     * get transaction of 
     * @param string $pending_ids
     */
    public function getTransactionIds($pending_ids) {
        $result = array(); 
        $today = new \DateTime('now');
        $today_date = $today->format('Y-m-d');
        $sql_in = '';
        $sql_common = " where ";
        if (strlen($pending_ids) > 0)
            $sql_in = "(type = 'T' and id in ($pending_ids)) OR ";
        
        $sql_in_tyep_c = "(type = 'C' and created_at = '$today_date' and status = 1)";
        $shop_transaction_table = $this->getEntityManager()->getClassMetadata('UtilityApplaneIntegrationBundle:ShopTransactions')->getTableName();
        $sql = "SELECT transaction_id  AS transaction_id from ".
               $shop_transaction_table.$sql_common.$sql_in.$sql_in_tyep_c;
        $stmt = $this->getEntityManager()
               ->getConnection()
               ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;
    }
    
    /**
     * Update waiver subscription
     * @param array $transaction_ids
     * @return boolean
     */
    public function updateWaiverSubscription($transaction_ids, $status)
    {
        //create the query 
        $qb = $this->createQueryBuilder('s');
        $query = $qb->update()
            ->set('s.status', ':status')
            ->where(
                    $qb->expr()->In('s.id', ':txn_id')
                )
            ->setParameter('status', $status)
            ->setParameter('txn_id', $transaction_ids)
            ->getQuery();
        $response = $query->getResult();
        return true;
    }
    
    /**
     * Update waiver registration
     * @param array $transaction_ids
     * @return boolean
     */
    public function updateWaiverRegistration($transaction_ids, $status)
    {
        //create the query 
        $qb = $this->createQueryBuilder('s');
        $query = $qb->update()
            ->set('s.status', ':status')
            ->where(
                    $qb->expr()->In('s.id', ':txn_id')
                )
            ->setParameter('status', $status)
            ->setParameter('txn_id', $transaction_ids)
            ->getQuery();
        $response = $query->getResult();
        return true;
    }
}
