<?php

namespace Affiliation\AffiliationManagerBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AffiliationCitizenRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AffiliationCitizenRepository extends EntityRepository {
    
    /**
     * Get top linked citizen
     * @param string $order_by
     * @param int $limit_start
     * @param int $limit_size
     */
    public function getTopLinkedCitizens($order_by, $limit_start, $limit_size)
    {
        $top_citizens = $this->getTopCitizens();
        //$top_brokers = $this->getTopBrokers(); //as it also done by yiresse.
        //$top_stores = $this->getTopStores(); //as it also done by yiresse.
        //$final_array = array($top_citizens, $top_brokers, $top_stores); //as it also done by yiresse.
        $final_array = array($top_citizens);
        $t = array();
        //sum the array with corresponding key
        foreach ($final_array as $k => $subArray) {
            foreach ($subArray as $id => $value) {
               @$t[$id] +=$value;
            }
        }
        //Sort an array in reverse order and maintain index association
        $sort_array = arsort($t);
        return $t;
    }
    
    /**
     * Get citizen affiliation
     * @param string $order_by
     * @param int $limit_start
     * @param int $limit_size
     * @return int
     */
    public function getTopCitizens()
    {
        $rearray = array();
        $response = array();
        $qb =  $this->createQueryBuilder('c');
        $query = $qb
                ->select('c.fromId, count(c.toId) as affiliation_count')
                ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.fromId = co.id')
                ->where('co.enabled =:isactive')
                ->setParameter('isactive', '1')
                ->groupBy('c.fromId')
                ->getQuery();
        
        $response = $query->getResult();
        foreach($response as $data){
            $fromid = $data['fromId'];
            $count = $data['affiliation_count'];
            $rearray[$fromid] = $count;
        }
        return $rearray;
    }
    
    /**
     * Get top brokers
     * @param string $order_by
     * @param int $limit_start
     * @param int $limit_size
     * @return int
     */
     public function getTopBrokers()
    {
        $rearray = array();
        $response = array();
        $qb =  $this->createQueryBuilder('c');
        $query = $qb
                ->select('c.fromId,count(c.toId) as affiliation_count')
                ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.fromId = co.id')
                ->where('co.enabled =:isactive', 'co.brokerProfileActive =:brokeractive')
                ->setParameter('isactive', '1')
                ->setParameter('brokeractive', '1')
                ->groupBy('c.fromId')
                ->getQuery();

        $response = $query->getResult();
        foreach($response as $data){
            $fromid = $data['fromId'];
            $count = $data['affiliation_count'];
            $rearray[$fromid] = $count;
        }
        return $rearray;
    }
    
    
    /**
     * Get top stores
     * @param string $order_by
     * @param int $limit_start
     * @param int $limit_size
     * @return int
     */
     public function getTopStores()
    {
        $rearray = array();
        $response = array();
        $qb =  $this->createQueryBuilder('c');
        $query = $qb
                ->select('c.fromId,count(c.toId) as affiliation_count')
                ->innerJoin('StoreManagerStoreBundle:Store', 'co', 'WITH', 'c.storeId = co.id')
                ->where('co.isActive =:isactive', 'co.shopStatus =:isactive')
                ->setParameter('isactive', '1')
                ->groupBy('c.fromId')
                ->getQuery();

        $response = $query->getResult();
        foreach($response as $data){
            $fromid = $data['fromId'];
            $count = $data['affiliation_count'];
            $rearray[$fromid] = $count;
        }
        return $rearray;
    }

    /**
     * find citizen affiliated array.
     * @param type $user_id
     * @param type $offset
     * @param type $limit
     * @return array 
     */
    public function findCitizenAffiliationUsers($user_id, $offset, $limit)
    {
        $response = array();
        $qb = $this->createQueryBuilder('c');
        $query = $qb
                ->select('c.toId')
                ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.fromId = co.id')
                ->where('c.fromId =:sfrom','co.enabled =:isactive')
                ->setParameter('sfrom', $user_id)
                ->setParameter('isactive', '1')
                ->setFirstResult($offset)
                ->setMaxResults($limit)
                ->getQuery();

        $response = $query->getResult();
        return $response;
    }
    
    /**
     * finding the total count of affiliates of a citizen
     * @param type $user_id
     * @return int 
     */
    public function findCitizenAffiliationUsersCount($user_id)
    {
        $qb = $this->createQueryBuilder('c');
        $query = $qb
                ->select('c.toId')
                ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.fromId = co.id')
                ->where('c.fromId =:sfrom','co.enabled =:isactive')
                ->setParameter('sfrom', $user_id)
                ->setParameter('isactive', '1')
                ->getQuery();

        $response_count = count($query->getResult());
        return $response_count;
    }
    
     public function getAlreadyRegisteredAffiliatedUsers($limit_start, $limit_size,$is_limit) {
        $sql = "select ac.from_id,fs.email from AffiliationCitizen as ac left join  fos_user_user as fs on ac.to_id = fs.id";
        $limit_condition = '';
        if($is_limit == 1) {
            $limit_condition = " limit $limit_size offset $limit_start";
        }
        $stmt = $this->getEntityManager()
               ->getConnection()
               ->prepare($sql);
       $stmt->execute();
       $result = $stmt->fetchAll();
       //$result = json_encode($result);
       return $result;
    }
}
