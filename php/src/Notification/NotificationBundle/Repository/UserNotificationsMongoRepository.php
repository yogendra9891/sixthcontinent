<?php

namespace Notification\NotificationBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * UserNotificationsMongoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserNotificationsMongoRepository extends DocumentRepository
{
    /**
     * Get friend request accept notification
     * @param int $user_id
     */
    public function getFriendAcceptNotification($user_id, $isPush=false)
    {
       $result = array();
        $from = new \DateTime();        
       $to =   new \DateTime();
       $from->sub(new \DateInterval('P7D'));
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('date')->range($from, $to)
                ->field('message_type')->equals('friend')
                ->field('notification_role')->in($notification_role)
                ->sort('date', 'DESC')
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    
    /**
     * Get friend request accept notification
     * @param int $user_id
     */
    public function getGroupResponseNotification($user_id)
    {
       $result = array();
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->equals('0')
                ->field('message_type')->equals('group')
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    
    /**
     * Mark notification as read
     * @param int $user_id
     * @param int $notification_id
     * @return boolean
     */
    public function markNotificationAsRead($user_id, $notification_id)
    {
         $qb = $this->createQueryBuilder()
               ->update()
               ->multiple(true)
               ->field('is_read')->set('1')
               ->field('to')->equals($user_id)
               ->field('id')->equals($notification_id)
               ->getQuery()
               ->execute();
           return true;
    }
    
    /**
     * Get broker notification
     * @param int $user_id
     * @return array
     */
    public function getBrokerResponseNotification($user_id)
    {
       $result = array();
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->equals('0')
                ->field('message_type')->equals('broker')
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    
    /**
     * Get shop notification
     * @param int $user_id
     * @return array
     */
    public function getShopResponseNotification($user_id)
    {
       $result = array();
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->equals('0')
                ->field('message_type')->equals('shop')
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    
    /**
     * Get shop notification
     * @param int $user_id
     * @return array
     */
    public function getShopApprovalNotification($user_id)
    {
       $result = array();
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->equals('0')
                ->field('message_type')->equals('shop_response')
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    
    /**
     * function for getting all the non read discount position notification 
     * @param Int $user_id
     * @return Array array of all the unread notification for the discount position
     */
    public function getDiscountPositionNotification($user_id) {
        $result = array();
        $user_id = (string) $user_id;
        $qb = $this->createQueryBuilder();
        $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->equals('0')
                ->field('message_type')->equals('discount_position')
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    
    /**
     * function for getting all the non read shop status notification
     * @param Int $user_id
     * @return Array array of all the unread notification for the shop status
     */
    public function getShopStatusNotification($user_id) {
        $result = array();
        $qb = $this->createQueryBuilder();
        $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->equals('0')
                ->field('message_type')->equals('shopstatus')
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    
    /**
     * function for getting all the non read shop status notification
     * @param Int $user_id
     * @return Array array of all the unread notification for the shop status
     */
    public function getRecurringPaymentStatusNotification($user_id) {
        $result = array();
        $qb = $this->createQueryBuilder();
        $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->equals('0')
                ->field('message_type')->equals('recurringpayment')
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    
    /**
     * function for getting all the non read shots notification 
     * @param Int $user_id
     * @return Array array of all the unread notification for the shots
     */
    public function getShotNotification($user_id) {
        $result = array();
        $user_id = (string) $user_id;
        $qb = $this->createQueryBuilder();
        $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->equals('0')
                ->field('message_type')->equals('Shot')
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }

    
    /**
     * Get billing circle notifications
     * @param int $user_id
     * @return array
     */
    public function getBillingCircleNotification($user_id){
        $user_id = (string)$user_id;
        $result = array();
        $qb = $this->createQueryBuilder();
        $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->equals('0')
                ->field('message_type')->equals('billing_circle')
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    
    /**
     * function for getting all the non read shots notification 
     * @param Int $user_id
     * @return Array array of all the unread notification for the shots
     */
    public function getShopDPNotification($user_id) {
        $result = array();
        $user_id = (string) $user_id;
        $qb = $this->createQueryBuilder();
        $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->equals('0')
                ->field('message_type')->equals('discount_position_shop')
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    
    
    /**
     * Get tagged friend notification
     * @param int $user_id
     */
    public function getTaggingNotification($user_id)
    {
       $result = array();
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->equals('0')
                ->field('message_type')->equals("tagging")
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Dashboard Post Comment Notification
     * @param int $user_id
     */
    public function getDashboardCommentNotification($user_id)
    {
       $result = array();
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->equals('0')
                ->field('message_type')->equals("tagging")
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Rating Notification
     * @param int $user_id
     */
    public function getDashboardPostRatingNotification($user_id)
    {
        
       $result = array();
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->equals('0')
                ->field('message_type')->equals("DASHBOARD_POST_RATE")
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
     /**
     * Get Rating Notification New
     * @param int $user_id
     */
    /*****************************************************************************/
    public function getDashboardPostRatingNotificationNew($user_id, $isPush=false)
    {
        
       $result = array();
       $from = new \DateTime();        
       $to =   new \DateTime();
       $from->sub(new \DateInterval('P7D'));
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('date')->range($from, $to)
                ->field('message_type')->equals("DASHBOARD_POST_RATE")
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    /**
     * function for getting all the non read shots notification New
     * @param Int $user_id
     * @return Array array of all the unread notification for the shots
     */
    public function getShopDPNotificationNew($user_id, $isPush=false) {
        $result = array();
        $user_id = (string) $user_id;
        $from = new \DateTime();        
        $to =   new \DateTime();
        $from->sub(new \DateInterval('P7D'));
        $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
        $qb = $this->createQueryBuilder();
        $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals('discount_position_shop')
                ->field('date')->range($from, $to)
                ->field('notification_role')->in($notification_role)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;    
        
    }
    /**
     * function for getting all the non read shop status notification
     * @param Int $user_id
     * @return Array array of all the unread notification for the shop status
     */
    public function getRecurringPaymentStatusNotificationNew($user_id, $isPush=false) {
        $result = array();
        $from = new \DateTime();        
        $to =   new \DateTime();
        $from->sub(new \DateInterval('P7D'));
        $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
        $qb = $this->createQueryBuilder();
        $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals('recurringpayment')
                ->field('date')->range($from, $to)
                ->field('notification_role')->in($notification_role)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
     /**
     * function for getting all the non read shop status notification New
     * @param Int $user_id
     * @return Array array of all the unread notification for the shop status
     */
    public function getShopStatusNotificationNew($user_id, $isPush=false) {
        $result = array();
         $from = new \DateTime();        
        $to =   new \DateTime();
        $from->sub(new \DateInterval('P7D'));
        $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
        $qb = $this->createQueryBuilder();
        $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals('shopstatus')
                ->field('date')->range($from, $to)
                ->field('notification_role')->in($notification_role)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    /**
     * function for getting all the non read shots notification 
     * @param Int $user_id
     * @return Array array of all the unread notification for the shots
     */
    public function getShotNotificationNew($user_id, $isPush=false) {
        $result = array();
        $from = new \DateTime();        
        $to =   new \DateTime();
        $from->sub(new \DateInterval('P7D'));
        $user_id = (string) $user_id;
        $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
        $qb = $this->createQueryBuilder();
        $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals('Shot')
                ->field('date')->range($from, $to)
                ->field('notification_role')->in($notification_role)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    /**
     * function for getting all the non read discount position notification 
     * @param Int $user_id
     * @return Array array of all the unread notification for the discount position
     */
    public function getDiscountPositionNotificationNew($user_id, $isPush=false) {
        $result = array();        
        $from = new \DateTime();        
        $to =   new \DateTime();
        $from->sub(new \DateInterval('P7D'));
        $user_id = (string) $user_id;
        $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
        $qb = $this->createQueryBuilder();
        $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals('discount_position')
                ->field('date')->range($from, $to)
                ->field('notification_role')->in($notification_role)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    /**
     * Get shop notification
     * @param int $user_id
     * @return array
     */
    public function getShopApprovalNotificationNew($user_id, $isPush=false)
    {
       $result = array();
       $from = new \DateTime();        
        $to =   new \DateTime();
        $from->sub(new \DateInterval('P7D'));
        $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals('shop_response')
               ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    /**
     * Get shop notification
     * @param int $user_id
     * @return array
     */
    public function getShopResponseNotificationNew($user_id, $isPush=false)
    {
       $result = array();
       $from = new \DateTime();        
        $to =   new \DateTime();
        $from->sub(new \DateInterval('P7D'));
        $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals('shop')
               ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    /**
     * Get broker notification
     * @param int $user_id
     * @return array
     */
    public function getBrokerResponseNotificationNew($user_id, $isPush=false)
    {
       $result = array();
       $from = new \DateTime();        
       $to =   new \DateTime();
       $from->sub(new \DateInterval('P7D'));
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals('broker')
               ->field('date')->range($from, $to)
                ->field('notification_role')->in($notification_role)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    /**
     * Get friend request accept notification
     * @param int $user_id
     */
    public function getGroupResponseNotificationNew($user_id, $isPush=false)
    {
       $result = array();
       $from = new \DateTime();        
       $to =   new \DateTime();
       $from->sub(new \DateInterval('P7D'));
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals('group')
               ->field('date')->range($from, $to)
                ->field('notification_role')->in($notification_role)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    /**
     * Get tagged friend notification
     * @param int $user_id
     */
    public function getTaggingNotificationNew($user_id)
    {
       $result = array();
       $from = new \DateTime();        
       $to =   new \DateTime();
       $from->sub(new \DateInterval('P7D'));
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("tagging")
               ->field('date')->range($from, $to)
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    /**
     * Get billing circle notifications
     * @param int $user_id
     * @return array
     */
    public function getBillingCircleNotificationNew($user_id, $isPush=false){
        $user_id = (string)$user_id;
        $result = array();
        $from = new \DateTime();        
       $to =   new \DateTime();
       $from->sub(new \DateInterval('P7D'));
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
        $qb = $this->createQueryBuilder();
        $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals('billing_circle')
                ->field('date')->range($from, $to)
                ->field('notification_role')->in($notification_role)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }

    /**
     * Get Rating Notification
     * @param int $user_id
     */
    public function getDashboardCommentRatingNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("DASHBOARD_COMMENT_RATE")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    /**
     * Get is_view Count
     * @param int $user_id
     * @return array
     */
    public function getisviewcountUserNotification($user_id, $isPush=false, $recordOfDays=7, $nTypes=array())
    {
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $result = array();
       $qb = $this->createQueryBuilder();
       $qb
            ->count()
            ->field('to')->equals( (string) $user_id)
            ->field('is_view')->equals(0);
        if(!empty($nTypes['exclude'])){
            $qb
                ->field('message_type')->notIn($nTypes['exclude']);
        }
        if(!empty($nTypes['include'])){
            $qb
                ->field('message_type')->in($nTypes['include']);
        }
        $result = $qb->field('date')->range($from, $to)
                ->field('notification_role')->in($notification_role)
                ->getQuery()
                ->execute();
      
       return $result;
    }
  
    /**
     * Get Rating Notification
     * @param int $user_id
     */
    public function getUserAlbumRatingNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("USER_ALBUM_RATE")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Rating Notification
     * @param int $user_id
     */
    public function getUserPhotoRatingNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("USER_PHOTO_RATE")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    /**
     * Mark notification as delete
     * @param int $user_id
     * @param int $notification_id
     * @return boolean
     */
    public function markNotificationAsDelete($user_id, $notification_id)
    {
         $qb = $this->createQueryBuilder()
               ->update()
               ->multiple(true)
               ->field('is_read')->set('2')
               ->field('to')->equals($user_id)
               ->field('id')->equals($notification_id)
               ->getQuery()
               ->execute();
           return true;
    }
    /**
     * Mark notification as Viewed
     * @param int $user_id
     * @param int $is_view
     * @return boolean
     */
    public function getisviewUpdateUserNotification($user_id, $is_view, $excludeType=array(), $updateOnlyType=array())
    {
        //echo $user_id."<br>".$is_view;exit;
         //$user_id = (int)$user_id; 
        $qb = $this->createQueryBuilder()
              ->update()
              ->multiple(true)
              ->field('is_view')->set($is_view)
              ->field('to')->equals($user_id)
              ->field('is_view')->equals(0);
        if(!empty($excludeType)){
            $excludeType = is_array($excludeType) ? $excludeType : (array)$excludeType;
            $qb->field('message_type')->notIn($excludeType);
        }
        if(!empty($updateOnlyType)){
            $updateOnlyType = is_array($updateOnlyType) ? $updateOnlyType : (array)$updateOnlyType;
            $qb->field('message_type')->in($updateOnlyType);
        }
        $qb->getQuery()
           ->execute();
        return true;
    }
    /**
     * Mark notification as Viewed
     * @param int $user_id
     * @param int $is_view
     * @return boolean
     */
    public function getisviewUpdateGroupNotification($user_id, $is_view)
    {
         //echo $is_view.'<br>'.$user_id;
         //exit;

         $qb = $this->createQueryBuilder()
               ->update()
               ->multiple(true)
               ->field('is_view')->set($is_view)
               ->field('receiver_id')->equals($user_id)
               //->field('id')->equals($is_view)
               ->getQuery()
               ->execute();
           return true;
    }
    /*****************************************************************************/
    
    /**
     * Get Rating Notification
     * @param int $user_id
     */
    public function getClubPostRatingNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("CLUB_POST_RATE")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Rating Notification
     * @param int $user_id
     */
    public function getClubPostCommentRatingNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("CLUB_POST_COMMENT_RATE")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Rating Notification
     * @param int $user_id
     */
    public function getClubAlbumRatingNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("CLUB_ALBUM_RATE")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Rating Notification
     * @param int $user_id
     */
    public function getClubAlbumImageRatingNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("CLUB_ALBUM_PHOTO_RATE")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Club post comment Notification
     * @param int $user_id
     */
    public function getClubPostCommentNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("CLUB_POST_COMMENT")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Dashboard post comment Notification
     * @param int $user_id
     */
    public function getDashboardPostCommentNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("DASHBOARD_POST_COMMENT")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Store post comment Notification
     * @param int $user_id
     */
    public function getStorePostCommentNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("STORE_POST_COMMENT")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Rating Notification
     * @param int $user_id
     */
    public function getShopPostRatingNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("STORE_POST_RATE")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Rating Notification
     * @param int $user_id
     */
    public function getShopPostCommentRatingNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("STORE_POST_COMMENT_RATE")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Rating Notification
     * @param int $user_id
     */
    public function getShopAlbumRatingNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("STORE_ALBUM_RATE")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Rating Notification
     * @param int $user_id
     */
    public function getShopAlbumImageRatingNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("STORE_MEDIA_RATE")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Transaction Notification
     * @param int $user_id
     */
    public function getTransactionNotification($user_id,$limit_start,$limit_size, $isPush=false, $recordOfDays=null)
    {
        
       $result = array();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $qb
            ->field('to')->equals( (string) $user_id)
            ->field('message_type')->equals("TXN")
            ->field('message')->notEqual('TXN_CUST_CI_GAIN');
        if($recordOfDays>0){
            $recordOfDays = (int)$recordOfDays;
            $from = new \DateTime();        
            $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
            $to =   new \DateTime();
            $qb->field('date')->range($from, $to)
                ->field('is_read')->in(array('0','1'));
        }
        $result = $qb->field('notification_role')->in($notification_role)
            ->sort('date', -1) //latest notification on top
            ->limit($limit_size)
            ->skip($limit_start)
            ->getQuery()
            ->execute()
            ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Transaction Notification
     * @param int $user_id
     */
    public function getAllTransactionNotification($user_id,$limit_start,$limit_size, $isPush=false, $recordOfDays=null)
    {
     
        $recordOfDays = (int)$recordOfDays;
        $from = new \DateTime();        
        $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
        $to =   new \DateTime();
        $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
        $qb = $this->createQueryBuilder();
        $result = $qb
            ->field('to')->equals( (string) $user_id)
            ->field('message_type')->in(array("TXN","BUY_ECOMMERCE_PRODUCT"))
            ->field('date')->range($from, $to)
            ->field('is_read')->in(array('0','1'))
            ->field('notification_role')->in($notification_role)
            ->sort('date', -1) //latest notification on top
            ->limit($limit_size)
            ->skip($limit_start)
            ->getQuery()
            ->execute()
            ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Transaction Notification Count
     * @param int $user_id
     */
    public function getTransactionNotificationCount($user_id, $isPush=false, $recordOfDays=null)
    {
        
        $result = array();
        $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
        $qb = $this->createQueryBuilder();
        $qb
            ->count()
            ->field('to')->equals( (string) $user_id)
            #->field('is_read')->in(array('0','1'))
            ->field('message_type')->equals("TXN")
            ->field('message')->notEqual('TXN_CUST_CI_GAIN');
        if($recordOfDays>0){
            $recordOfDays = (int)$recordOfDays;
            $from = new \DateTime();        
            $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
            $to =   new \DateTime();
            $qb->field('date')->range($from, $to)
                ->field('is_read')->in(array('0','1'));
        }
        $result = $qb->field('notification_role')->in($notification_role)
                ->sort('date', -1) //latest notification on top               
                ->getQuery()
                ->execute();
       
        return $result;
    }
    
    /**
     * Get Transaction Notification Count
     * @param int $user_id
     */
    public function getAllTransactionNotificationCount($user_id, $isPush=false, $recordOfDays=null)
    {
        $recordOfDays = (int)$recordOfDays;
        $from = new \DateTime();        
        $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
        $to =   new \DateTime();
        
        $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
        $qb = $this->createQueryBuilder();
        $result = $qb
            ->count()
            ->field('to')->equals( (string) $user_id)
            ->field('message_type')->in(array("TXN","BUY_ECOMMERCE_PRODUCT"))
            ->field('date')->range($from, $to)
            ->field('is_read')->in(array('0','1'))
            ->field('notification_role')->in($notification_role)
            ->sort('date', -1) //latest notification on top               
            ->getQuery()
            ->execute();
       
        return $result;
    }
    
    /**
     * Get Rating Notification
     * @param int $user_id
     */
    public function getClubRatingNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("CLUB_RATE")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
     /**
     * function for getting all the shop transaction
     * @param Int $user_id
     * @return Array array of all the unread notification for the transaction
     */
    public function getShopTransactionNotification($user_id, $isPush=false) {
        $result = array();
        $from = new \DateTime();        
        $to =   new \DateTime();
        $from->sub(new \DateInterval('P7D')); //get 7 days notifications.
        $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
        $qb = $this->createQueryBuilder();
        $result = $qb
                ->field('to')->equals($user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals('TXN')
                ->field('date')->range($from, $to)
                ->field('notification_role')->in($notification_role)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    
    /**
     * Get wall post Notification
     * @param int $user_id
     */
    public function getUserWallPostNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("POST_AT_USER_WALL")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('date', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Club wall post Notification
     * @param int $user_id
     */
    public function getClubPostNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("POST_AT_CLUB_WALL")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('date', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Shop wall post Notification
     * @param int $user_id
     */
    public function getShopPostNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("POST_AT_SHOP_WALL")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('date', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Dashboard Comment Tagging Notification
     * @param int $user_id
     */
    public function getDashboardCommentTaggingNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->in(array("USER_TAGGED_IN_DASHBOARD_COMMENT", "CLUB_TAGGED_IN_DASHBOARD_COMMENT", "SHOP_TAGGED_IN_DASHBOARD_COMMENT"))
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('date', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Club Comment Tagging Notification
     * @param int $user_id
     */
    public function getClubCommentTaggingNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->in(array("USER_TAGGED_IN_CLUB_COMMENT", "CLUB_TAGGED_IN_CLUB_COMMENT", "SHOP_TAGGED_IN_CLUB_COMMENT"))
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('date', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Shop Comment Tagging Notification
     * @param int $user_id
     */
    public function getShopCommentTaggingNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->in(array("USER_TAGGED_IN_STORE_COMMENT", "CLUB_TAGGED_IN_STORE_COMMENT", "SHOP_TAGGED_IN_STORE_COMMENT"))
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('date', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Dashboard post comment Notification
     * @param int $user_id
     */
    public function getDashboardPostCommentOnCommentedNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("DASHBOARD_COMMENT_ON_COMMENTED")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Club post comment Notification
     * @param int $user_id
     */
    public function getClubPostCommentOnCommentedNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("CLUB_COMMENT_ON_COMMENTED")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Store post comment Notification
     * @param int $user_id
     */
    public function getStorePostCommentOnCommentedNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("STORE_COMMENT_ON_COMMENTED")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Dashboard post comment Notification
     * @param int $user_id
     */
    public function getDashboardWallPostCommentNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("DASHBOARD_WALL_POST_COMMENT")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Dashboard post comment Notification
     * @param int $user_id
     */
    public function getDashboardCommentOnTaggedPostNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("DASHBOARD_COMMENT_ON_TAGGED_POST")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Store post comment Notification
     * @param int $user_id
     */
    public function getStoreCommentOnTaggedPostNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("STORE_COMMENT_ON_TAGGED_POST")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Tagged in post Notification
     * @param int $user_id
     */
    public function getTaggedInPostNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("TAGGED_IN_POST")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Tagged in photo Notification
     * @param int $user_id
     */
    public function getTaggedInUserAlbumPhotoNotification($user_id, $isPush=false, $recordOfDays=7)
    {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("TAGGED_IN_PHOTO")
                ->field('date')->range($from, $to)
               ->field('notification_role')->in($notification_role)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * function for getting all the notificaton for the transaction rating for last 7 days
     * @param Int $user_id
     * @return Array array of all the notification for the transaction rating for last 7 days
     */
    public function getTransactionRatingNotification($user_id, $recordOfDays=7) {
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("TXN")
                ->field('message')->equals("TXN_CUST_APPROVE")
                ->field('date')->range($from, $to)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    /**
     * Get Recurring Notifications
     * @param int $user_id
     * @return array
     */
    public function getRecurringNotifications($user_id, $recordOfDays=7)
    {
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("RECURRING_NOTIFICATION")
                ->field('date')->range($from, $to)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    
    /**
     *  function for getting the tagged notification of transaction share
     * @param type $user_id
     * @param type $recordOfDays
     * @return type
     */
    public function getTransactionTaggedNotification($user_id, $recordOfDays=7) {
        
       $result = array();
       $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $qb = $this->createQueryBuilder();
       $result = $qb
                ->field('to')->equals( (string) $user_id)
                ->field('is_read')->in(array('0','1'))
                ->field('message_type')->equals("TAGGED_IN_SHOP_CUSTOMER_POST")
                ->field('message')->equals("tagging")
                ->field('date')->range($from, $to)
                ->sort('id', 'desc') //latest notification on top
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }

    public function getAllNotificationsCount($user_id, $isPush=false, $recordOfDays=7, $nTypes=array()){
        $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $qb
            ->count()
            ->field('to')->equals( (string) $user_id)
            ->field('is_read')->in(array('0','1'));
        if(!empty($nTypes['exclude'])){
            $qb
                ->field('message_type')->notIn($nTypes['exclude']);
        }
        if(!empty($nTypes['include'])){
            $qb
                ->field('message_type')->in($nTypes['include']);
        }
        $result = $qb->field('date')->range($from, $to)
                ->field('notification_role')->in($notification_role)
                ->getQuery()
                ->execute();
       
        return $result;
    }
    
    public function getAllNotifications($user_id, $limit_start, $limit_size, $isPush=false, $recordOfDays=7, $nTypes=array()){
        $recordOfDays = (int)$recordOfDays;
       $from = new \DateTime();        
       $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
       $to =   new \DateTime();
       $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
       $qb = $this->createQueryBuilder();
       $qb
            ->field('to')->equals( (string) $user_id)
            ->field('is_read')->in(array('0','1'));
       if(!empty($nTypes['exclude'])){
            $qb
                 ->field('message_type')->notIn($nTypes['exclude']);
       }
       if(!empty($nTypes['include'])){
            $qb
                 ->field('message_type')->in($nTypes['include']);
       }
       $result = $qb->field('date')->range($from, $to)
                ->field('notification_role')->in($notification_role)
                ->sort('date', -1)
                ->limit($limit_size)
                ->skip($limit_start)
                ->getQuery()
                ->execute()
                ->toArray(false);
       
        return $result;
    }
    
    public function getUnViewedTransactionNotification($user_id, $isPush=false, $recordOfDays=7){
        $recordOfDays = (int)$recordOfDays;
        $from = new \DateTime();        
        $from->sub(new \DateInterval('P'.$recordOfDays.'D'));
        $to =   new \DateTime();
        $notification_role = $isPush===true ? array(4,5) : array(1,3,5);
        $qb = $this->createQueryBuilder();
        $result = $qb
                 ->count()
                 ->field('to')->equals( (string) $user_id)
                 ->field('is_view')->equals(0)
                 ->field('message_type')->in(array("TXN","BUY_ECOMMERCE_PRODUCT"))
                 ->field('date')->range($from, $to)
                 ->field('notification_role')->in($notification_role)
                 ->getQuery()
                 ->execute();

        return $result;
    }
}
