<?php

namespace Notification\NotificationBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserDeviceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserDeviceRepository extends EntityRepository
{
            
    /**
     * Get details for device tokens
     * @param array $device_tokens
     * @return array test
     */
    public function deleteDeviceToken($device_tokens) {
        
            $time = new \DateTime("now");

            //create the query
            $qb = $this->createQueryBuilder('s');
            $query = $qb->delete()
                    ->where(
                        $qb->expr()->In('s.deviceId', ':tokens')
                    )
                    ->setParameter('tokens', $device_tokens)
                    ->getQuery();

            $response = $query->getResult();
          
            return $response;
        
    }
    
    public function getReceiversDeviceInfo($user_ids=array(), $app_type=null){
        $user_ids = is_array($user_ids) ? $user_ids : (array)$user_ids;
        $response = array();
        if(!empty($user_ids)){
            $qb = $this->createQueryBuilder('s');
                $_query = $qb
                        ->where(
                            $qb->expr()->In('s.userId', ':user_ids')
                        );
                if(!is_null($app_type)){
                    $query = $_query->andWhere(
                                $qb->expr()->eq('s.appType', ':app_type')
                                )
                            ->setParameter('app_type', $app_type);
                }else{
                    $query = $_query;
                }
                $response = $query->setParameter('user_ids', $user_ids)
                            ->getQuery()
                            ->getResult();

        }
            return $response;
    }
    
/**
 * Delete devices from userdevice table
 * @param type $devices
 * @return type
 */
//public function deleteDevices($devices){
//        //create the query
//            $qb = $this->createQueryBuilder('s');
//            $query = $qb->delete()
//                    ->where(
//                        $qb->expr()->In('s.deviceId', ':deviceIds')
//                    )
//                    ->setParameter('deviceIds', $devices)
//                    ->getQuery();
//
//            $response = $query->getResult();
//            return $response;
//    }
    
    public function deleteDevices($devices,$device_type){
        //create the query
            $qb = $this->createQueryBuilder('s');
            $query = $qb->delete()
                    ->where(
                        $qb->expr()->andX(
                                        's.deviceId =:device_id', 
                                        's.deviceType =:device_type'
                                        )
                    )
                    ->setParameter('device_id', $devices)
                    ->setParameter('device_type', $device_type)
                    ->getQuery();
            try{
                $response = $query->execute();
            }catch(\Exception $e){
               // echo $e->getMessage();
            }
            return $response;
    }
    
    
     /**
     * get device
     * @param type $device_id
     * @param type $device_type
     * @param type $unique_device_id
     * @return type
     */
    public function getRegisterDevice($device_id,$device_type,$unique_device_id,$app_type){
            $qb = $this->createQueryBuilder('c');
            $query = $qb
                    ->where(
                                $qb->expr()->andX(
                                        'c.deviceId =:device_id', 
                                        'c.deviceType =:device_type'
                                        )
                                     
                            );
            if(!empty($unique_device_id)){
                $query->orWhere(
                                $qb->expr()->andX(
                                        'c.uniqueDeviceID =:unique_device_id', 
                                        'c.appType =:app_type'
                                        )
                            );
            }
            $result_res = null;
            try{
               $query
                    ->setParameter('device_id', $device_id)
                    ->setParameter('device_type', $device_type);
                
                 if(!empty($unique_device_id)){
                    $query
                            ->setParameter('unique_device_id', $unique_device_id)
                            ->setParameter('app_type', $app_type);
                 }
                 $result =   $query
                         ->setMaxResults(1)
                         ->getQuery();
                $result_res = $result->getResult(); 
                $result_res = !empty($result_res) ? array_shift($result_res) : null;
            } catch (\Exception $ex) {
            }
            return $result_res; 
    }
}

