<?php

namespace Message\MessageBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * MessageMongoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageMongoRepository extends DocumentRepository
{
    /**
	 * Search message messages
	 * @param string $text
	 * @param int $user_id
	 * @return object array
	 */
	public function searchBySubjectOrOtherMessage($text,$search_sub_text, $user_id,$limit,$offset)
	{
		$qb     = $this->createQueryBuilder('User');
		$result = $qb
                             ->field('sender_id')->notEqual($user_id)
		             ->addOr($qb->expr()->field('body')->equals(new \MongoRegex('/.*'.$text.'.*/i')))
		             ->addOr($qb->expr()->field('subject')->equals(new \MongoRegex('/.*'.$search_sub_text.'.*/i')))
                                    ->limit($limit)
                                    ->skip($offset)
                                    ->getQuery()
                                    ->execute()
                                    ->toArray(false);
		return $result;
	}
	public function listAllMessage($user_id,$limit,$offset)
	{
		$qb     = $this->createQueryBuilder('User');
		$result = $qb
                             ->field('receiver_id')->equals($user_id)		             
                             ->field('thread_id')->equals('0')	
                                    ->limit($limit)
                                    ->skip($offset)
                                    ->getQuery()
                                    ->execute()
                                    ->toArray(false);
		return $result;
	}
        
	public function listAllThread($user_id,$limit,$offset)
	{
                //$user_id_arr = array($user_id); 
		$qb     = $this->createQueryBuilder('User');
		$result = $qb   
                        //->field('deleteby')->notIn($user_id_arr)
                         ->field('message_type')->equals('N')
                             ->addOr($qb->expr()->field('receiver_id')->in(array($user_id)))
		             ->addOr($qb->expr()->field('sender_id')->equals((int)$user_id))
                                   ->sort('created_at','desc')            
                                   ->limit($limit)
                                    ->skip($offset)
                                    ->getQuery()
                                    ->execute()
                                    ->toArray(false);
              
		return $result;
	}
	public function listAllUnreadThread($user_id,$limit,$offset)
	{
                $user_id_arr = array($user_id); 
		$qb     = $this->createQueryBuilder('User');
		$result = $qb   
                        ->field('deleteby')->notIn($user_id_arr)
                         ->field('is_read')->equals(0)
                         ->field('receiver_id')->in(array($user_id))
                                  ->sort('created_at','desc') 
                                    ->limit($limit)
                                    ->skip($offset)
                                    ->getQuery()
                                    ->execute()
                                    ->toArray(false);
             
		return $result;
                
	}
	
	public function listAllUnreadTotalThread($user_id)
	{
                   $user_id_arr = array($user_id); 
		$qb     = $this->createQueryBuilder('User');
		$result = $qb   
                         ->field('deleteby')->notIn($user_id_arr)
                         ->field('is_read')->equals(0)
                         ->field('receiver_id')->in(array($user_id))
                         ->distinct('sender_id') // add for speed related task
                                    ->getQuery()
                                    ->execute()
                                    ->toArray(false);
		return $result; 
	}
	public function listAllTotalThread($user_id)
	{
                //$user_id_arr = array($user_id);
		$qb     = $this->createQueryBuilder('User');
		$result = $qb   
                         //->field('deleteby')->notIn($user_id_arr)
                         ->field('message_type')->equals('N')
                             ->addOr($qb->expr()->field('receiver_id')->in(array($user_id)))
		             ->addOr($qb->expr()->field('sender_id')->equals((int)$user_id))
                                    ->getQuery()
                                    ->execute()
                                    ->toArray(false);
              
		return count($result);
	}
	public function listAllThreadForSearch($user_id)
	{
		$qb     = $this->createQueryBuilder('User');
		$result = $qb   
                         ->field('message_type')->equals('M')
                             ->addOr($qb->expr()->field('receiver_id')->equals((int)$user_id))
		             ->addOr($qb->expr()->field('sender_id')->equals((int)$user_id))
                                    ->getQuery()
                                    ->execute()
                                    ->toArray(false);
              
		return $result;
	}
	public function listAllMessages($thread_id,$user_id,$limit,$offset){
            $user_id_arr = array($user_id);            
            $qb     = $this->createQueryBuilder('User');
            $result = $qb  
                    ->field('deleteby')->notIn($user_id_arr)
                    ->addOr($qb->expr()->field('thread_id')->equals($thread_id))
                    ->addOr($qb->expr()->field('id')->equals(($thread_id)))                    
                    ->sort('id','DESC') 
                    ->limit($limit)
                                ->skip($offset)
                                ->getQuery()
                                ->execute()
                                ->toArray(false);
           
		return $result;
	}
	public function listAllTotalMessages($thread_id,$user_id)
	{
            $user_id_arr = array($user_id);
            $qb     = $this->createQueryBuilder('User');
            $result = $qb  
                    ->field('deleteby')->notIn($user_id_arr)
                    ->addOr($qb->expr()->field('thread_id')->equals($thread_id))
                    ->addOr($qb->expr()->field('id')->equals(($thread_id)))
                                ->getQuery()
                                ->execute()
                                ->toArray(false);           
                return $result;
	}
        
	public function checkThreadExist($user_id,$reciever_id)
	{
            $qb     = $this->createQueryBuilder('User');
            $result = $qb   
                    ->field('message_type')->equals('N')
                    ->field('receiver_id')->in(array((int)$user_id,(int)$reciever_id))
                    ->addOr($qb->expr()->field('sender_id')->in(array((int)$user_id,(int)$reciever_id)))
                        ->getQuery()
                        ->execute()
                        ->toArray(false);
            return $result;
	}
	public function getLastMessage($thread_id,$user_id)
	{
            $user_id_arr = array($user_id);  
            $qb     = $this->createQueryBuilder('User');
            $result = $qb
                    ->field('deleteby')->notIn($user_id_arr)
                ->addOr($qb->expr()->field('thread_id')->equals($thread_id))
                ->addOr($qb->expr()->field('id')->equals(($thread_id)))
                    ->sort('created_at','desc') 
                    ->limit(1)
                    ->getQuery()
                    ->execute()
                    ->toArray(false);
            return $result;
	}
        
        public function getLastWithUserDetailMessage($thread_id)
	{
          
            $qb     = $this->createQueryBuilder('User');
            $result = $qb
                ->addOr($qb->expr()->field('thread_id')->equals($thread_id))
                ->addOr($qb->expr()->field('id')->equals(($thread_id)))
                    ->sort('created_at','desc') 
                    ->limit(1)
                    ->getQuery()
                    ->execute()
                    ->toArray(false);
            return $result;
	}
        
        /**
         * 
         * @param type $thread_id
         * @return type
         */
	public function getAllThreadMessage($thread_id)
	{
            
            $qb     = $this->createQueryBuilder('User');
            $result = $qb
                    ->field('id')->in($thread_id)
                    ->getQuery()
                    ->execute()
                    ->toArray(false);
            return $result;
	}
        
        
        /**
        * Get All Group Messages
        * @param int $group_id
        * @return object array
        */
        public function getGroupMessages($group_id,$user_id,$limit,$offset){
            $qb     = $this->createQueryBuilder();
            $result = $qb
                     ->field('deleteby')->notIn(array((integer)$user_id))
                     ->field('thread_id')->equals($group_id)
                        ->sort('created_at','desc') 
                          ->limit($limit)
                          ->skip($offset)
                          ->getQuery()
                          ->execute()
                          ->toArray(false);

            return $result;
        }

        /**
        * Get All Group Messages Count
        * @param int $group_id
        * @return object array
        */
        public function getGroupMessagesCount($group_id,$user_id){
            $qb     = $this->createQueryBuilder();
            $result = $qb
                     ->field('deleteby')->notIn(array((integer)$user_id))
                     ->field('thread_id')->equals($group_id)
                          ->getQuery()
                          ->execute()
                          ->toArray(false);

            return count($result);
        }
        
        public function getThreadLastMessage($thread_id,$user_id)
	{ 
            $user_id_arr = array($user_id);  
            $qb     = $this->createQueryBuilder('User');
            $result = $qb
                    ->field('deleteby')->notIn($user_id_arr)
                    ->addOr($qb->expr()->field('thread_id')->equals($thread_id))
                    ->field('message_type')->notEqual('N')
                    ->sort('created_at','desc') 
                    ->limit(1)
                    ->getQuery()
                    ->execute()
                    ->toArray(false);
            return $result;
	}
        
        /**
        * Get Message Search
        * @param \Symfony\Component\HttpFoundation\Request $request
        * @return string
        */
        public function getMessageSearch($thread_id,$text,$user_id,$limit,$offset){
            $user_id_arr = array($user_id);  
            $results = array();
            //get all groups assigned to user
            $qb = $this->createQueryBuilder();
            $results = $qb->field('thread_id')->equals($thread_id)
                    ->field('body')->equals(new \MongoRegex('/.*' . $text . '.*/i'))
                    ->field('deleteby')->notIn($user_id_arr)
                    ->limit($limit)
                    ->skip($offset)
                    ->getQuery()
                    ->execute()
                    ->toArray(false);

            return $results;
        }
        
        /**
        * Get Message Search Cnt
        * @param \Symfony\Component\HttpFoundation\Request $request
        * @return string
        */
        public function getMessageSearchCnt($thread_id,$text,$user_id){
            $user_id_arr = array($user_id);
            $results = array();
            //get all groups assigned to user
            $qb = $this->createQueryBuilder();
            $results = $qb->field('thread_id')->equals($thread_id)
                    ->field('body')->equals(new \MongoRegex('/.*' . $text . '.*/i'))
                    ->field('deleteby')->notIn($user_id_arr)
                    ->getQuery()
                    ->execute()
                    ->toArray(false);
            return count($results);
        }
        
        /**
        * Get Message Search Cnt
        * @param \Symfony\Component\HttpFoundation\Request $request
        * @return string
        */
        public function listAllGroupUnreadThread($user_id,$limit,$offset,$thread_ids = array()){
            $user_id_arr = array($user_id); 
            $qb     = $this->createQueryBuilder('User');
            $result = $qb   
                    ->field('deleteby')->notIn($user_id_arr)
                    ->field('read_by')->notIn($user_id_arr)
                    ->field('receiver_id')->in(array($user_id))
                    ->field('thread_id')->notIn($thread_ids)
                    ->field('is_view_by')->notIn($user_id_arr)
                    ->field('message_type')->equals('M')
                             ->sort('created_at','desc') 
                                ->limit($limit)
                                ->skip($offset)
                                ->getQuery()
                                ->execute()
                                ->toArray(false);
            return $result;
	}
        /**
        * Get Message All Thread/Group
        * @param \Symfony\Component\HttpFoundation\Request $request
        * @return string
        */
        public function listAllGroupUnreadTotalThread($user_id,$thread_ids = array()){
                   $user_id_arr = array($user_id); 
		$qb     = $this->createQueryBuilder('User');
		$result = $qb
                         ->field('deleteby')->notIn($user_id_arr)
                         ->field('read_by')->notIn($user_id_arr)
                         ->field('receiver_id')->in(array($user_id))
                         ->field('thread_id')->notIn($thread_ids)
                                 ->field('message_type')->equals('M')
                                    ->getQuery()
                                    ->execute()
                                    ->toArray(false);
		return $result; 
	}

   public function updateUnreadMessage($thread_id,$deleted_user_id){ 
       $qb = $this->createQueryBuilder('User')
        ->update()
        ->field('deleteby')->set(array($deleted_user_id))
        ->field('thread_id')->equals($thread_id)
        ->getQuery();
       if($qb->execute()){
           return true;
       } else {
           return false;
       }
   }
   
   /********************************************/
   /**
        * Get Message Search Cnt
        * @param \Symfony\Component\HttpFoundation\Request $request
        * @return string
        */
        public function listAllWeekGroupUnreadThread($user_id,$limit,$offset,$thread_ids = array()){
            $user_id_arr = array($user_id);
            $from = new \DateTime();        
            $to =   new \DateTime();
            $from->sub(new \DateInterval('P7D'));
            $qb     = $this->createQueryBuilder('User');
            $result = $qb   
                    ->field('deleteby')->notIn($user_id_arr)
                    ->field('read_by')->notIn($user_id_arr)
                    ->field('receiver_id')->in(array($user_id))
                    ->field('thread_id')->notIn($thread_ids)
                    ->field('is_view')->equals(1)
                    ->field('created_at')->range($from, $to)
                             ->sort('created_at','desc') 
                                ->limit($limit)
                                ->skip($offset)
                                ->getQuery()
                                ->execute()
                                ->toArray(false);
            return $result;
	}
        /**
        * Get Message All Thread/Group
        * @param \Symfony\Component\HttpFoundation\Request $request
        * @return string
        */
        public function listAllWeekGroupUnreadTotalThread($user_id,$thread_ids = array()){
                   $user_id_arr = array($user_id); 
                   $from = new \DateTime();        
                   $to =   new \DateTime();
                   $from->sub(new \DateInterval('P7D'));
		   $qb     = $this->createQueryBuilder('User');
		   $result = $qb   
                         ->field('deleteby')->notIn($user_id_arr)
                         ->field('read_by')->notIn($user_id_arr)
                         ->field('receiver_id')->in(array($user_id))
                         ->field('thread_id')->notIn($thread_ids)
                           ->field('is_view')->equals(1)
                         ->field('created_at')->range($from, $to)
                                    ->getQuery()
                                    ->execute()
                                    ->toArray(false);
		return $result; 
	}
        /**
     * Mark notification as Viewed
     * @param int $user_id
     * @param int $is_view
     * @return boolean
     */
    public function getisviewUpdateGroupUnreadThread($user_id, $is_view)
    {
         $qb = $this->createQueryBuilder()
               ->update()
               ->multiple(true)
               ->field('is_view')->set($is_view)
               ->field('receiver_id')->in(array($user_id))              
               ->getQuery()
               ->execute();
           return true;
    }
    /**
        * Get Message All Thread/Group
        * @param \Symfony\Component\HttpFoundation\Request $request
        * @return string
        */
        public function listGroupUnreadTotalThread($user_id){
                   $user_id_arr = array($user_id); 
		   $qb     = $this->createQueryBuilder('User');
		   $result = $qb   
                         ->field('receiver_id')->in(array($user_id))
                         ->field('is_view')->equals(0)
                                    ->getQuery()
                                    ->execute()
                                    ->toArray(false);
		return $result; 
	}
        
        /**
        * Get Message All UnViewed Thread/Group
        * @param \Symfony\Component\HttpFoundation\Request $request
        * @return string
        */
        public function listAllGroupUnViewedTotalThread($user_id,$thread_ids = array()){
            $user_ids = array((int)$user_id); 
		$qb     = $this->createQueryBuilder('User');
		$result = $qb
                         ->distinct('thread_id')
                         ->field('deleteby')->notIn($user_ids)
                         ->field('read_by')->notIn($user_ids)
                         ->field('receiver_id')->in($user_ids)
                         ->field('thread_id')->notIn($thread_ids)
                         ->field('is_view_by')->notIn($user_ids)
                         ->field('message_type')->equals('M')
                                    ->getQuery()
                                    ->execute()
                                    ->toArray(false);
		return $result; 
	}
   /********************************************/
   
}