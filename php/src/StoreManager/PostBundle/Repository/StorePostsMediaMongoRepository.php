<?php

namespace StoreManager\PostBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * StorePostsMediaMongoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StorePostsMediaMongoRepository extends DocumentRepository
{
        public function removePostsMedia($post_id)
        {
            $qb = $this->createQueryBuilder();
            $qb->remove()
            ->field('post_id')->equals($post_id)
            ->getQuery()
            ->execute();
            return true;
        }
        
        public function updatePostsMedia($post_id,$media_id)
        {
            $qb = $this->createQueryBuilder();
            $qb->remove()
            ->field('post_id')->equals($post_id)
            ->field('id')->equals($media_id)
            ->getQuery()
            ->execute();
            return true;
        }
        
        /**
         * Publish the store post
         * @param array $images
         * @return boolean
         */
        public function publishStorePostImage($images){
            $qb = $this->createQueryBuilder()
                ->update()
                ->multiple(true)
                ->field('media_status')->set(1)
                ->field('id')->in($images)
                ->getQuery()
                ->execute();
            return true;
    }
    
    public function getPostMedia($postIds) {
        $results = array();
        //get all groups assigned to user
        $qb = $this->createQueryBuilder();
        $results = $qb->field('post_id')->in($postIds)
                   ->field('media_status')->equals(1)
                   ->getQuery()
                   ->execute()
                   ->toArray(false);
        return $results;
    }
    
    public function getCommentedUserIds($media_id){
        $qb = $this->createQueryBuilder('m')
                ->field('media_status')->equals(1)
                ->field('id')->equals($media_id)
                ->map('function() { 
                    var authors=[]; 
                    for(var i=0; i<this.comment.length; i++){
                        authors[i] = this.comment[i]["comment_author"];
                    }
                    emit(this._id, authors); }')
                ->reduce('function(k, vals) {
                    return vals;
                }');
        $comments = $qb->getQuery()->getSingleResult();
        return isset($comments['value']) ? $comments['value'] : array();
    }
    
    /**
     * publish media for a comment
     * @param array $media_id
     * @return boolean
     */
    public function getCommentsOfMedia($media_id, $limit= 5, $resultWithCount=false, $start=null){
        $commentCount=0;
        $qb = $this->createQueryBuilder('m')
            ->field('media_status')->equals(1)
            ->field('id')->equals($media_id)
            ->map('function() { var _length = this.comment ? this.comment.length : 0; emit("totalComment", _length); }')
            ->reduce('function(k, vals) {
                 var sum = 0;
                vals.forEach(function(value) {
                    sum += value;
                });
                return sum;
            }');
        $comments = $qb->getQuery()->getSingleResult();
        $commentCount = $comments ? $comments['value'] : 0;
        
        $query = $this->createQueryBuilder('mediacomments');
        if(!is_null($start)){
            $offset = $commentCount - ($start+$limit);
            if($offset<0){
                $offset = 0;
                $limit = ($commentCount-$start)>0 ? ($commentCount-$start) : 0;
            }
            $query =  $query->selectSlice('comment', $offset, $limit);
        }else{
            $query =  $query->selectSlice('comment', -$limit);
        }
        $result = $query->field('media_status')->equals(1)
                     ->field('id')->equals($media_id)
                     ->getQuery()
                     ->getSingleResult();
            
          return $resultWithCount==true ? array('result'=>$result, 'size'=>$commentCount) : array('result'=>$result);
    }
    
    /**
     * 
     * @param type $media_id
     * @param type $comment_id
     * @return type
     */
    public function getCommentedMedias($media_id, $comment_id){
        $qb = $this->createQueryBuilder('m')
                ->field('enabled')->equals(1)
                ->field('id')->equals($media_id)
                ->field('comment.id')->equals($comment_id)
                ->map('function() { 
                    var medias=[]; 
                    var commentId = ObjectId("'.$comment_id.'");
                    for(var i=0; i<this.comment.length; i++){
                        var id = this.comment[i]._id;
                        if(commentId.toString()==id.toString()){
                            medias = this.comment[i]["medias"];
                        }
                    }
                    emit(this._id, medias); }')
                ->reduce('function(k, vals) {
                    return vals;
                }');
               
            $comments = $qb->getQuery()->getSingleResult();
            return isset($comments['value']) ? $comments['value'] : array();
    }
}