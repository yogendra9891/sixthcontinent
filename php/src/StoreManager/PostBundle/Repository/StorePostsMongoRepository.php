<?php

namespace StoreManager\PostBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * StorePostsMongoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StorePostsMongoRepository extends DocumentRepository {

    /**
     * Search posts 
     * @param string $title
     * @param int $store_id
     * @param int $offset
     * @param int $limit
     * @return object array
     */
    public function searchByPostTitleOrOther($store_id, $title, $offset, $limit) {
        $qb = $this->createQueryBuilder('m');
        $result = $qb->field('post_title')->equals(new \MongoRegex('/.*' . $title . '.*/i'))
                ->field('store_id')->equals($store_id)
                ->limit($limit)
                ->skip($offset)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }

    /**
     * Search notification messages count
     * @param string $title
     * @param int $user_id
     * @return object array
     */
    public function searchPostTitleOrOtherCount($title) {
        $qb = $this->createQueryBuilder('m');
        $result = $qb->field('post_title')->equals(new \MongoRegex('/.*' . $title . '.*/i'))
                ->hydrate(false)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return count($result);
    }

    /**
     * Edit the post rate
     * @param type $rate_id
     * @return boolean
     */
    public function editPostRate($rate_id, $arrayPostRate, $post_id) {
        $result = $this->createQueryBuilder('post')
                ->update()
                ->field('id')->equals($post_id)
                ->field('rate.id')->equals($rate_id)
                ->field("rate.$")->set($arrayPostRate)
                ->getQuery()
                ->execute();
        return true;
    }

    /**
     *  function for getting the customer reviews for a store
     * @param type $storeId
     * @param type $limit_size
     * @param type $limit_start
     * @return type
     */
    public function getCustomerReviewsForStore($storeId, $limit_size, $limit_start,$friendsIds) {
        $qb = $this->createQueryBuilder('m');
        $qb->field('store_id')->equals($storeId)
                ->field('store_post_status')->equals(1)
                ->field('share_type')->equals('TXN');
        //check if friend ids present        
        if(count($friendsIds) > 0){
            $qb->field('store_post_author')->in($friendsIds);
        }
        $result = $qb->sort('store_post_created', 'DESC')
           ->limit($limit_size)
           ->skip($limit_start)
           ->getQuery()
           ->execute()
           ->toArray(false);
        return $result;
    }
    
     /**
     *  function for getting the customer reviews for a store
     * @param type $storeId
     * @param type $limit_size
     * @param type $limit_start
     * @return type
     */
    public function getCustomerReviewsForStoreCount($storeId,$friendsIds) {
        $qb = $this->createQueryBuilder('m');
         $qb->field('store_id')->equals($storeId)
                ->field('store_post_status')->equals(1)
                ->field('share_type')->equals('TXN');
                //check if friend ids present        
        if(count($friendsIds) > 0){
            $qb->field('store_post_author')->in($friendsIds);
        }
        $result = $qb->getQuery()
                     ->execute();
        return $result;
    }

    /**
     *  function for getting the friend who bought on store 
     * @param type $storeId
     * @param type $limit_size
     * @param type $limit_start
     * @return type
     */
    public function getFriendBoughtOnStore($storeId,$friendsIds) {
        $qb = $this->createQueryBuilder('m');
        $result = $qb->field('store_id')->equals($storeId)
                ->field('store_post_status')->equals(1)
                ->field('share_type')->equals('TXN')
                ->field('store_post_author')->in($friendsIds)
                ->sort('store_post_created', 'DESC')
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $result;
    }
    
    /**
     * List store posts
     * @param type $storeId
     * @param type $limit_size
     * @param type $limit_start
     */
    public function listStorePosts($storeId, $limit, $offset, $last_id = null)
    {
        if(!empty($last_id)){
	    $offset = 0;
	}
        $qb = $this->createQueryBuilder('m');
        $qb->field('store_id')->equals($storeId)
                ->field('store_post_status')->equals(1);
  
       //check for last id      
       if (!empty($last_id)) {
            $result = $qb->field('id')->lt($last_id);
        }
        $result = $qb->sort('store_post_created', 'DESC')
           ->limit($limit)
           ->skip($offset)
           ->getQuery()
           ->execute()
           ->toArray(false);
        return $result;
    }
}
