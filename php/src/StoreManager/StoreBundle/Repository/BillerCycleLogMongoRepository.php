<?php

namespace StoreManager\StoreBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * BillerCycleLogMongoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BillerCycleLogMongoRepository extends DocumentRepository
{
    /**
     * Get the shops whose notification need not be sent
     */
    public function getSentNotificationShop()
    {
        //create the query
        $qb     = $this->createQueryBuilder();
        $result = $qb->field('is_active')->equals(false)
                  ->getQuery()
                  ->execute()
		  ->toArray(false);
        
        return $result;
    }

    
    /**
     * 
     * @param type $shop_owner_id
     * @param type $shop_id
     * @param type $msg_type
     */
    public function checkLogEntry($shop_owner_id, $shop_id, $msg_status)
    {
        $shop_owner_id = (string)$shop_owner_id;
        $shop_id = (string)$shop_id;
        //create the query
        $qb     = $this->createQueryBuilder();
        $result = $qb->field('to_id')->equals($shop_owner_id)
                  ->field('shop_id')->equals($shop_id)
                  ->field('message_status')->equals($msg_status)
                  ->field('is_active')->equals(true)
                  ->getQuery()
                  ->execute()
		  ->toArray(false);
        return count($result);
    }
    
    /**
     * Check the log entry
     * @param int $shop_owner_id
     * @param int $shop_id
     * @return int
     */
    public function checkLogEntrySent($shop_owner_id, $shop_id)
    {
        $result = array();
        $shop_owner_id = (string)$shop_owner_id;
        $shop_id = (string)$shop_id;

        //create the query
        $qb     = $this->createQueryBuilder();
        $result = $qb->field('to_id')->equals($shop_owner_id)
                  ->field('shop_id')->equals($shop_id)
                  ->getQuery()
                  ->execute()
		  ->toArray(false);
        return count($result);
    }
    
    /**
     * removing the remove delete billing cycle log
     * @param type $shop_id, type $type
     * @return boolean
     */
    public function removeDeleteBillingCycleLog($shop_id,$type)
    {
            
            $shop_id = (string)$shop_id;
            $type = (string)$type; 
            $qb = $this->createQueryBuilder();
            $qb->remove()
                ->field('shop_id')->equals($shop_id)
                ->field('msg_code')->equals($type)
                ->getQuery()
                ->execute();
            return true;
    }
}