<?php

namespace StoreManager\StoreBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ShopFollowersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShopFollowersRepository extends EntityRepository
{
    
    protected $store_media_path = '/uploads/documents/stores/gallery/';
    private  $image_path = '/uploads/users/media/thumb/';
    
    /**
     * function for getting the users followed store
     * @param type $user_id
     * @param type $limit_start
     * @param type $limit_size
     * @param type $store_type
     * @param type $bucket_path
     * @param type $filter_type
     * @param type $citizen_income
     * @param type $language_code
     * @return type
     */
    public function getfollowedshops($user_id, $limit_start, $limit_size, $store_type, $bucket_path, $filter_type, $citizen_income = null,$language_code,$friendsIds = array()) {
        
        $image_path = $bucket_path . $this->store_media_path; 
        if(count($friendsIds) > 0) {
          $friends_id = implode(',', $friendsIds);
          $friend_condition = "(SELECT count(Distinct user_id) FROM PaymentProcessCredit WHERE shop_id = s.id and user_id in ($friends_id) and shop_status = 'APPROVED')";
        } else {
            $friend_condition = 0;
        }
        
        $condition = "where s.is_active = 1";
        $orderby_condition = '';
        //check if request is for only user store
        if ($store_type == 2) {
            $condition = $condition . ' and ' . 'co.user_id =' . $user_id;
        } elseif ($store_type == 1) {
            $condition = $condition . ' and ' . 'co.role =15 and s.shop_status =1';
        }
        
        //only getting followed shops
        $condition = $condition . " and follower.user_id = $user_id ";
        
        //made sorting according to the filters
        if ($filter_type == 1) {
            $orderby_condition = 'credit_available DESC';
        } elseif ($filter_type == 2) {
            $orderby_condition = 'shopRating DESC';
        } else {
            $orderby_condition = 'id DESC';
        }
       $sql = "select * from (SELECT (@store_id := s.id) as id, 
                s.email as email, 
                s.description as description, 
                s.parent_store_id as parentStoreId, 
                s.phone as phone, 
                s.business_name as businessName, 
                s.legal_status as legalStatus, 
                s.business_type as businessType, 
                s.business_country as businessCountry, 
                s.business_region as businessRegion, 
                s.business_city as businessCity, 
                s.business_address as businessAddress, 
                s.zip as zip, 
                s.province as province, 
                s.vat_number as vatNumber, 
                s.iban as iban, 
                s.map_place as mapPlace, 
                s.latitude as latitude, 
                s.longitude as longitude, 
                s.store_image as storeImage, 
                s.is_allowed as isAllowed, 
                s.is_active as isActive, 
                s.created_at as createdAt, 
                co.user_id as userId, 
                co.role as role, 
                s.payment_status as paymentStatus, 
                s.name as name,
                s.shop_status as shopStatus, 
                s.avg_rate as shopRating,
                s.vote_count as vote_count,
                s.sale_catid as catogory_id,
                s.sale_subcatid as sub_category_id,
                s.credit_card_status as creditCardStatus, 
                @citizen_income := $citizen_income as citizen_income,
                (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '" . $language_code . "') as shop_category,
                (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '" . $language_code . "') as shop_sub_category,         
                @image_name := sm.image_name as image_name, 
                @album_id := sm.album_id as album_id,
                if(@album_id IS NULL,if(bc.image_thumb is NULL ,'',bc.image_thumb),if(@album_id > 0, 
                concat(concat(concat(concat(concat('".$image_path."', @store_id),'/thumb/'),@album_id),'/'),@image_name),
                concat(concat(concat('".$image_path."', @store_id),'/thumb/'),@image_name))) as profile_image_thumb,

                if(@album_id IS NULL,if(bc.image is NULL ,'',bc.image),if(@album_id > 0, 
                concat(concat(concat(concat(concat('".$image_path."', @store_id),'/original/'),@album_id),'/'),@image_name),
                concat(concat(concat('".$image_path."', @store_id),'/original/'),@image_name))) as profile_image_original, 
                @balance_shot:= if(u.balance_shots > 0,u.balance_shots,0)  as balance_shot, @gc_avail := if(u.balance_gift_card > 0,u.balance_gift_card,0) as available_gc, @mom_amount := if(u.balance_momosy_card > 0,u.balance_momosy_card,0)  as balance_momosy_card, if(ud.balance_dp > 0 ,ud.balance_dp,0) as user_balance_dp, s.balance_dp, @dp_amount := least( if(ud.balance_dp > 0, ud.balance_dp , 0), if(s.balance_dp > 0, s.balance_dp , 0)) as min_dp, 
                @y := ( @citizen_income/1000000 ) %100 as f, 
                @x := ( (@citizen_income/1000000) - @y ) as a , 
                @z := @y %50 as b, @k := ( @y - @z ) as c , 
                @l := @z %30 as d, 
                @g := ( @z - @l ) as e , 
                @m := @l %20 as h, 
                @q := ( @l - @m ) as n,
                (@x + @k + @g + @q) AS gift_card_can_used,
                if(@x + @k + @g + @q + @balance_shot/1000000 + @gc_avail/1000000 + @dp_amount/1000000 + @mom_amount/1000000  > 0,@x + @k + @g + @q + @balance_shot/1000000 + @gc_avail/1000000 + @dp_amount/1000000 + @mom_amount/1000000,0) as credit_available,
                $friend_condition as friend_count,
                if($user_id = follower.user_id, 1, 0) as is_following ,
                if($user_id = fav.user_id, 1, 0) as is_fav
                FROM Store s
                INNER JOIN UserToStore co ON s.id = co.store_id and co.role = 15
                LEFT JOIN StoreMedia sm ON s.store_image = sm.id 
                LEFT JOIN (SELECT * FROM UserShopCredit x WHERE x.user_id =" . $user_id . ") u ON s.id = u.shop_id
                RIGHT JOIN ShopFollowers as follower on (s.id = follower.shop_id)
                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
                left join  BusinessCategory as bc on s.sale_catid = bc.id
                LEFT JOIN UserDiscountPosition ud ON ud.user_id = $user_id $condition) as tmptable order by $orderby_condition limit $limit_size offset $limit_start";
       $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
       
       $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;
    }
    
    /**
     * Get shop followers
     * @param type $offset
     * @param type $limit
     * @return type
     */
    public function getShopFollowers($shop_ids) {
        $result_res = array();
        $qb = $this->createQueryBuilder('c');
        $query = $qb->select('c.shopId, c.userId ')
                ->where(
                        $qb->expr()->In('c.shopId', ':s_id')
                )
                ->setParameter('s_id', $shop_ids)
                ->getQuery();
        $result_res = $query->getResult();
        if ($result_res) {
            return $result_res;
        }
        return $result_res;
    }
    
    /**
     * Get shop followers
     * @param type $offset
     * @param type $limit
     * @return type
     */
    public function getSingleShopFollowers($shop_id) {
        $result_res = array();
        $qb = $this->createQueryBuilder('c');
        $query = $qb->select('c.shopId, c.userId ')
                ->where(
                        $qb->expr()->eq('c.shopId', ':s_id')
                )
                ->setParameter('s_id', $shop_id)
                ->getQuery();
        $result_res = $query->getResult();
        if ($result_res) {
            return $result_res;
        }
        return $result_res;
    }

}