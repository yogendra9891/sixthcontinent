<?php

namespace StoreManager\StoreBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserToStoreRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserToStoreRepository extends EntityRepository
{
    /**
     * 
     * @param type $shop_ids
     */
    public function getShopOwners($shop_ids, $excludeOwners=array()){
        if(count($shop_ids)>0){
            $excludeOwners = is_array($excludeOwners) ? $excludeOwners : (array)$excludeOwners;
            $qb = $this->createQueryBuilder('c');
            $query = $qb->select('c.userId, c.storeId')
               ->where(
                        $qb->expr()->In('c.storeId', ':shops')
                    )
               ->andWhere(
                        $qb->expr()->eq('c.role', '15')
                    );

            if(!empty($excludeOwners)){
                $query->andWhere(
                        $qb->expr()->notIn('c.userId', $excludeOwners)
                        );
            }    
            $query->setParameter('shops', $shop_ids);

            $result = $query ->getQuery();
            $result_res = $result->getResult();

            return $result_res;
        }
        return array();
    }
    
    /**
     * 
     * @param type $shop_ids
     */
    public function getShopOwnerById($shop_id){
 
      $qb = $this->createQueryBuilder('c');
            $query = $qb->select('c.userId, c.storeId')
               ->where(
                        $qb->expr()->eq('c.storeId', ':shop')
                    )
               ->andWhere(
                        $qb->expr()->eq('c.role', '15')
                    )
                ->setParameter('shop', $shop_id);
        
        $result = $query ->getQuery();
        $result_res = $result->getResult();
        if($result_res){
        return $result_res[0];
        }
        return array();
    }
}
