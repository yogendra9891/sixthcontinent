<?php

namespace StoreManager\StoreBundle\Entity;

use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\EntityRepository;

/**
 * StoreRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StoreRepository extends EntityRepository {

    /**
     * Get stores list
     * @param type $user_id
     * @param type $limit_start
     * @param type $limit_size
     * @param type $store_type 1/2 . 1 for all stores, 2 for user id based stores member or owner
     * @return array
     */
    protected $store_media_path = '/uploads/documents/stores/gallery/';
    private $image_path = '/uploads/users/media/thumb/';

    public function getStores_old($user_id, $limit_start, $limit_size, $store_type) {

        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id, c.email, c.description, c.parentStoreId, c.phone, c.businessName, c.legalStatus, c.businessType, c.businessCountry, c.businessRegion, c.businessCity, c.businessAddress, c.zip, c.province, c.vatNumber, c.iban, c.mapPlace, c.latitude, c.longitude, c.storeImage, c.isAllowed, 
                 c.isActive, c.createdAt,co.userId, co.role,c.paymentStatus,c.name,c.shopStatus,c.creditCardStatus')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 'c.id = co.storeId');

        //check if request is for only user store
        if ($store_type == 2) {
            $result = $query->where('co.userId =:uid')
                    ->setParameter('uid', $user_id);
        } elseif ($store_type == 1) {
            $result = $query->where('co.role =:role')
                    ->setParameter('role', 15);
            $result = $query->andWhere('c.shopStatus =:shopstatus')
                    ->setParameter('shopstatus', 1);
        }

        $result = $query->andWhere('c.isActive =:status')
                ->setParameter('status', 1)
                ->orderBy('c.id', 'DESC');

        $result = $query->setFirstResult($limit_start)
                ->setMaxResults($limit_size)
                ->getQuery();

        $result_res = $result->getResult();


        return $result_res;
    }

    /**
     * Check if the user is the member or owner of any shop
     * @param int $user_id
     * @return int
     */
    public function checkIfUserHasShop($user_id) {
        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 'c.id = co.storeId');

        //check if request is for only user store
        $result = $query->where('co.userId =:uid')
                ->setParameter('uid', $user_id);

        $result = $query->andWhere('c.isActive =:status')
                ->setParameter('status', 1)
                ->orderBy('c.id', 'DESC');

        $result = $query->setFirstResult(0)
                ->setMaxResults(1)
                ->getQuery();

        $result_res = $result->getResult();
        return $result_res;
    }

    /**
     * Get stores list
     * @param type $user_id
     * @param type $store_type 1/2 . 1 for all stores, 2 for user id based stores
     * @return array
     */
    public function getStoresCount($user_id, $store_type) {

        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id, co.userId')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 'c.id = co.storeId');

        //check if request is for only user store
        if ($store_type == 2) {
            $result = $query->where('co.userId =:uid')
                    ->setParameter('uid', $user_id);
        } elseif ($store_type == 1) {
            $result = $query->where('co.role =:role')
                    ->setParameter('role', 15);
            $result = $query->andWhere('c.shopStatus =:shopstatus')
                    ->setParameter('shopstatus', 1);
        }

        $result = $query->andWhere('c.isActive =:status')
                ->setParameter('status', 1);

        $result = $query->getQuery();

        $result_res = $result->getResult();


        return count($result_res);
    }

    /**
     * Get child stores list
     * @param type $user_id
     * @param type $limit_start
     * @param type $limit_size
     * @param type $store_id
     * @return array
     */
    public function getChildStores($user_id, $limit_start, $limit_size, $store_id) {

        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id, c.email, c.description, c.parentStoreId, c.phone, c.businessName, c.legalStatus, c.businessType, c.businessCountry, c.businessRegion, c.businessCity, c.businessAddress, c.zip, c.province, c.vatNumber, c.iban, c.mapPlace, c.latitude, c.longitude, c.storeImage, c.isAllowed, 
                 c.isActive, c.createdAt,c.paymentStatus,c.name,c.shopStatus,c.creditCardStatus')
                ->where('c.parentStoreId =:sid')
                ->andWhere('c.isActive =:status')
                ->andWhere('c.shopStatus =:shopstatus')
                ->setParameter('shopstatus', 1)
                ->setParameter('status', 1)
                ->setParameter('sid', $store_id)
                ->setFirstResult($limit_start)
                ->setMaxResults($limit_size)
                ->getQuery();

        $result_res = $result->getResult();
        return $result_res;
    }

    /**
     * Get child stores list count
     * @param type $user_id
     * @param type $limit_start
     * @param type $limit_size
     * @param type $store_id
     * @return array
     */
    public function getChildStoresCount($user_id, $store_id) {

        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id')
                ->where('c.parentStoreId =:sid')
                ->andWhere('c.isActive =:status')
                ->andWhere('c.shopStatus =:shopstatus')
                ->setParameter('shopstatus', 1)
                ->setParameter('status', 1)
                ->setParameter('sid', $store_id)
                ->getQuery();

        $result_res = $result->getResult();
        return count($result_res);
    }

    /**
     * Delete store
     * @param type $store_id
     * @return boolean
     */
    public function deleteChildStores($store_id) {
        //create the query
        $query = $this->createQueryBuilder('s')
                ->update()
                ->set('s.isActive', '?1')
                ->where('s.parentStoreId = ?2')
                ->setParameter(1, 0)
                ->setParameter(2, $store_id)
                ->getQuery();
        $response = $query->getResult();
        return true;
    }

    /**
     * Search the store count
     * @param type $store_business_name
     * @param type $limit_start
     * @param type $limit_size
     * @return int
     */
    public function countSearchStores($store_business_name) {
        $result = array();
        $qb = $this->createQueryBuilder('s');
        $qb->where('s.isActive =:enabled', 's.shopStatus=:shopstatus')
                ->andWhere(
                        $qb->expr()->orX(
                                $qb->expr()->like('s.businessName', ':stitle'), $qb->expr()->like('s.name', ':stitle')
                        )
                )
                ->setParameter('enabled', 1)
                ->setParameter('shopstatus', 1)
                ->setParameter('stitle', '%' . $store_business_name . '%');
        $query = $qb->getQuery();
        $result = $query->getResult();
        return count($result);
    }

    /**
     * Search the store count
     * @param type $store_business_name
     * @param type $limit_start
     * @param type $limit_size
     * @return int
     */
    public function countSearchStoresWithOffer($store_business_name) {
        $result = array();

        $offerTable = $this->getEntityManager()->getClassMetadata('SixthContinentConnectBundle:Offer')->getTableName();
        $storeTable = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();
        $sql = "
            SELECT sum(records) as total_records FROM ((SELECT count(s.id) as records
                FROM $storeTable s
                where s.shop_status=1 and s.is_active=1 and (s.business_name like :search_text or s.name like :search_text)
                )
                UNION ALL
                (  SELECT 
                count(o.id) as records
                 FROM $offerTable o INNER JOIN  $storeTable s ON(o.shop_id=s.id)  WHERE o.is_active=1 AND o.is_deleted=0 AND s.is_active=1 AND o.name like :search_text
                 )) t";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->bindValue('search_text', "%$store_business_name%");
        $stmt->execute();
        $result = $stmt->fetchAll();
        $result = isset($result[0]['total_records']) ? $result[0]['total_records'] : 0;
        return $result;
    }

    /**
     * Get user created stores
     * @param type $user_id
     * @return type
     */
    public function getProfileStores($user_id) {
        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id, c.title, c.description,c.parentStoreId')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 'c.id = co.storeId')

                //check if request is for only user store
                ->where('co.userId =:uid')
                ->setParameter('uid', $user_id)
                ->andWhere('co.role =:role')
                ->setParameter('role', 15)
                ->andWhere('c.isActive =:status')
                ->setParameter('status', 1)
                ->getQuery();

        $result_res = $result->getResult();
        return $result_res;
    }

    /**
     * Get all stores
     * @param type $user_id
     * @return array
     */
    public function getAllStores($user_id, $limit_start, $limit_size) {
        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id, c.parentStoreId,c.businessName, c.businessType, c.isAllowed, co.userId, co.role,c.paymentStatus,c.name')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 'c.id = co.storeId');

        //check if request is for only user store

        $result = $query->where('co.userId =:uid')
                ->setParameter('uid', $user_id);

        $result = $query->andWhere('co.role =:role')
                ->setParameter('role', 15);
        $result = $query->andWhere('c.parentStoreId =:psid')
                ->setParameter('psid', 0);

        $result = $query->andWhere('c.isActive =:status')
                ->setParameter('status', 1);

        $result = $query->andWhere('c.shopStatus =:shopstatus')
                ->setParameter('shopstatus', 1);

        $result = $query->setFirstResult($limit_start)
                ->setMaxResults($limit_size)
                ->getQuery();

        $result_res = $result->getResult();

        if (count($result_res) > 0) {
            $i = 0;
            foreach ($result_res as $single_result_res) {
                $child_stores = $this->getAllChildStores($single_result_res['id']);
                $result_res[$i]['child_stores'] = $child_stores;
                $i++;
            }
        }

        return $result_res;
    }

    /**
     * Get all stores count
     * @param type $user_id
     * @return array
     */
    public function getAllStoresCount($user_id) {
        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id, c.parentStoreId,c.businessName, c.businessType, c.isAllowed, co.userId, co.role,c.paymentStatus,c.name')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 'c.id = co.storeId');

        //check if request is for only user store

        $result = $query->where('co.userId =:uid')
                ->setParameter('uid', $user_id);

        $result = $query->andWhere('co.role =:role')
                ->setParameter('role', 15);
        $result = $query->andWhere('c.parentStoreId =:psid')
                ->setParameter('psid', 0);

        $result = $query->andWhere('c.isActive =:status')
                ->setParameter('status', 1);

        $result = $query->andWhere('c.shopStatus =:shopstatus')
                ->setParameter('shopstatus', 1);

        $result = $query->getQuery();

        $result_res = $result->getResult();



        return count($result_res);
    }

    /**
     * Get all child stores
     * @param int $parent_store_id
     * @return array
     */
    public function getAllChildStores($parent_store_id) {
        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id, c.parentStoreId,c.businessName, c.businessType, c.isAllowed, co.userId, co.role,c.name,c.paymentStatus')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 'c.id = co.storeId');

        //check if request is for only user store

        $result = $query->andWhere('c.parentStoreId =:psid')
                ->setParameter('psid', $parent_store_id);

        $result = $query->andWhere('c.isActive =:status')
                ->setParameter('status', 1);

        $result = $query->getQuery();

        $result_res = $result->getResult();


        return $result_res;
    }

    /**
     * 
     * @param int $user_id
     */
    public function getExternalProfileStores($user_id) {
        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id, c.email, c.description, c.parentStoreId, c.phone, c.businessName, c.legalStatus, c.businessType, c.businessCountry, c.businessRegion, c.businessCity, c.businessAddress, c.zip, c.province, c.vatNumber, c.iban, c.mapPlace, c.latitude, c.longitude, c.storeImage, c.isAllowed, 
                 c.isActive, c.createdAt,co.userId, co.role,c.paymentStatus,c.name')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 'c.id = co.storeId');

        //check if request is for only user store

        $result = $query->where('co.userId =:uid')
                ->setParameter('uid', $user_id);


        $result = $query->andWhere('co.role =:role')
                ->setParameter('role', 15);

        $result = $query->andWhere('c.isActive =:status')
                ->setParameter('status', 1);

        $result = $query->andWhere('c.shopStatus =:shopstatus')
                ->setParameter('shopstatus', 1)
                ->orderBy('c.id', 'DESC');
        $result = $query->getQuery();
        $result_res = $result->getResult();
        return $result_res;
    }

    /**
     * Get user shop payment status
     * @param int $user_id
     * @return array
     */
    public function getUserShop($user_id) {
        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id,c.paymentStatus,c.newContractStatus')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 'c.id = co.storeId');

        //check if request is for only user store

        $result = $query->where('co.userId =:uid')
                ->setParameter('uid', $user_id);


        $result = $query->andWhere('co.role =:role')
                ->setParameter('role', 15);

        $result = $query->andWhere('c.isActive =:status')
                ->setParameter('status', 1)
                ->orderBy('c.id', 'DESC');
        $result = $query->getQuery();
        $result_res = $result->getResult();
        return $result_res;
    }

    /*
     * Get store information of a user for updating shop
     *  @param int $user_id
     */

    public function getStoresShoppinplus($user_id) {

        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id, c.email, c.description, c.parentStoreId, c.phone, c.businessName, c.legalStatus, c.businessType, c.businessCountry, c.businessRegion, c.businessCity, c.businessAddress, c.zip, c.province, c.vatNumber, c.iban, c.mapPlace, c.latitude, c.longitude, c.storeImage, c.isAllowed, 
                 c.isActive, c.createdAt,co.userId, co.role,c.paymentStatus,c.name')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 'c.id = co.storeId')
                ->where('co.userId =:uid')
                ->setParameter('uid', $user_id);
        $result = $query->getQuery();
        $result_res = $result->getResult();
        return $result_res;
    }

    /**
     * Get all stores for map
     * @param type $user_id
     * @return array
     */
    public function getAllMapStores() {
        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id, c.parentStoreId,c.businessName, c.businessType, c.isAllowed,c.paymentStatus,c.name,c.latitude,c.longitude,c.email,c.description,c.phone,c.legalStatus,c.businessType,c.businessRegion,c.businessCity,c.businessAddress,c.zip,c.province,c.vatNumber,c.iban,c.mapPlace,c.shopStatus,c.creditCardStatus,c.storeImage,c.createdAt,c.isActive,c.isAllowed,c.newContractStatus,co.id as contract_id,co.contractNumber,co.registrationTime,co.mail,co.pan,co.brand,co.expirationPan,co.alias,co.nationality,co.sessionId,co.productType,co.languageCode,co.region,co.createTime')
                ->leftJoin('CardManagementBundle:Contract', 'co', 'WITH', 'c.id = co.profileId and co.defaultflag=:status');
        //check if request is for only user store

        $result = $query->andWhere('c.isActive =:status')
                ->andWhere('c.shopStatus =:status')
                //->andWhere('co.defaultflag =:status')
                ->setParameter('status', 1);

        $result = $query->getQuery();

        $result_res = $result->getResult();
        return $result_res;
    }

    /**
     * funciton for getting the get map store list
     * @param type $user_id
     * @param int $citizen_income
     * @return Array array of all the stores and relevent data for the store 
     */
    public function getAllMapStoreOptimize($user_id, $citizen_income = null, $bucket_path, $language_code = 'it') {
        $image_path = $bucket_path . $this->store_media_path;
        $posTable = $this->getEntityManager()->getClassMetadata('SixthContinentConnectBundle:OfferPointofSale')->getTableName();
        $offerTable = $this->getEntityManager()->getClassMetadata('SixthContinentConnectBundle:Offer')->getTableName();
        $storeTable = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();
        $sql = "SELECT * from (";
        $sql .= "("
                . "  SELECT o.id as id, "
                . "0 as parentstoreid, "
                . "'' as businessname, "
                . "'' as businesstype, "
                . "1 as isallowed, "
                . "'' as paymentstatus, "
                . "o.name as name, "
                . "p.latitude as latitude, "
                . "p.longitude as longitude, "
                . "'' as email, "
                . "o.description as description, "
                . "'' as phone, "
                . "'' as legalstatus, "
                . "p.region as businessregion, "
                . "p.place as businesscity, "
                . "p.address as businessaddress, "
                . "p.zip as zip, "
                . "p.province as province, "
                . "'' as vatnumber, "
                . "'' as iban, "
                . "CONCAT(p.address, ', ', p.place, ' (', p.province, ')') as mapplace, "
                . "'' as storeimage, "
                . "1 as isactive, "
                . "1 as shop_status, "
                . "5 as shop_rating, "
                . "0 as vote_count, "
                . "'' as catogory_id, "
                . "'' as sub_category_id, "
                . "'' as new_contract_status, "
                . "CONVERT(o.category USING utf8) as shop_category, "
                . "CONVERT('' USING utf8) as shop_sub_category, "
                . "'' as shop_keyword, "
                . "0 as citizen_income, "
                . "o.shop_id as store_id, "
                . "CONVERT(if(TRIM(IFNULL(o.image,''))!='', o.image, '') USING utf8) as image_name, "
                . "'' as album_id, "
                . "'' as user_id, "
                . "0 as balance_shot, "
                . "0 as available_gc, "
                . "0 as balance_momosy_card, "
                . "0 as user_balance_dp, "
                . "0 as min_dp, "
                . "0 as total_credit_available, "
                . "CONVERT(if(TRIM(IFNULL(o.imagethumb,''))!='', o.imagethumb, '') USING utf8) as thumb_path, "
                . "CONVERT(if(TRIM(IFNULL(o.image,''))!='', o.image, '') USING utf8) as original_path, "
                . "0 as shot_status, "
                . "0 as card_status, "
                . "0 as dp_status, "
                . "0 as momosy_status, "
                . "0 as credit_status, "
                . "0 as credit_available, "
                . "0 as  is_fav, "
                . "'offer' as type, "
                . "ROUND(if(o.price<=0, 0, o.price)/100, 2) as price "
                . " FROM $offerTable o INNER JOIN  $storeTable s ON(o.shop_id=s.id) INNER JOIN  $posTable p ON(p.offer_id=o.id) "
                . " WHERE o.is_active=1 AND o.is_deleted=0 AND s.is_active=1 "
                . ") UNION (";

        $sql .= "SELECT s.id as id,
            s.parent_store_id as parentstoreid,
            s.business_name as businessname,
            s.business_type as businesstype,
            s.is_allowed as isallowed,
            s.payment_status as paymentstatus,
            s.name as name,
            s.latitude as latitude,
            s.longitude as longitude,
            s.email as email,
            s.description as description,
            s.phone as phone,
            s.legal_status as legalstatus,
            s.business_region as businessregion,
            s.business_city as businesscity,
            s.business_address as businessaddress,
            s.zip as zip,s.province as province,
            s.vat_number as vatnumber,
            s.iban as iban,
            s.map_place as mapplace,
            s.store_image as storeimage,
            s.is_active as isactive,
            s.shop_status as shop_status,
            s.avg_rate as shop_rating,
            s.vote_count as vote_count,
            s.sale_catid as catogory_id,
            s.sale_subcatid as sub_category_id,
            s.new_contract_status as new_contract_status,  
            CONVERT((select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '" . $language_code . "') USING utf8)  as shop_category,
            CONVERT((select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '" . $language_code . "') USING utf8)  as shop_sub_category,
            s.shop_keyword as shop_keyword,
            0 as citizen_income, 
            @store_id := s.id as store_id,
            CONVERT(@image_name := sm.image_name  USING utf8) as image_name, @album_id := sm.album_id as album_id,$user_id as user_id, 
            0 as balance_shot, 0 as available_gc, 0 as balance_momosy_card, 0 as user_balance_dp,0 as min_dp, 
            0 AS total_credit_available, 
            CONVERT( if(@album_id is NULL,bc.image_thumb,if(@album_id > 0, 
                concat(concat(concat(concat(concat('" . $image_path . "', @store_id),'/thumb/'),@album_id),'/'),@image_name),
                concat(concat(concat('" . $image_path . "', @store_id),'/thumb/'),@image_name))) USING utf8)  as thumb_path,

             CONVERT(if(@album_id is NULL,bc.image,if(@album_id > 0, 
                concat(concat(concat(concat(concat('" . $image_path . "', @store_id),'/original/'),@album_id),'/'),@image_name),
                concat(concat(concat('" . $image_path . "', @store_id),'/original/'),@image_name))) USING utf8)  as original_path, 
             0 as shot_status,
             0 as card_status,
             0 as dp_status,
             0 as momosy_status,
             0 as credit_status,
             0 as credit_available,
             if($user_id = fav.user_id, 1, 0) as is_fav,
              '' as type, 
            '' as price 
                FROM Store s
                INNER JOIN UserToStore co ON s.id = co.store_id and co.role = 15
                LEFT JOIN StoreMedia as sm on sm.id = s.store_image
                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
                left join  BusinessCategory as bc on s.sale_catid = bc.id
                where s.is_active=1 and (s.shop_status=1 OR co.user_id = $user_id )";
        $sql .= ")) as temptable ORDER BY shop_rating DESC, vote_count DESC";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        //$result = json_encode($result);
        return $result;
    }

    /**
     * getting the shop profile info for data exporting
     * @return array
     */
    public function getStoreProfile() {
        $yesterday = new \DateTime('2015-10-01');
        $start_date = $yesterday->format('Y-m-d');
        $today = new \DateTime('today');
        $end_date = $today->format('Y-m-d');
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $query = $qb->select()
                ->where('c.updatedAt >=:create_at', 'c.updatedAt <:end_at')
                ->setParameter('create_at', $start_date)
                ->setParameter('end_at', $end_date)
                ->getQuery();
        $response = $query->getResult();
        return $response;
    }

    /**
     * getting the shop profile info for data exporting for backlogs
     * @return array
     */
    public function getStoreProfileBackLogs($shop_id) {
        $yesterday = new \DateTime('yesterday');
        $start_date = $yesterday->format('Y-m-d');
        $today = new \DateTime('today');
        $end_date = $today->format('Y-m-d');
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $qb->select()
                ->where('c.createdAt >=:create_at', 'c.createdAt <:end_at');
        if ($shop_id > 0) {
            $qb->andwhere('c.id >:last_shop_id')
                    ->setParameter('last_shop_id', $shop_id);
        }

        $query = $qb->setParameter('create_at', $start_date)
                ->setParameter('end_at', $end_date)
                ->getQuery();

        $response = $query->getResult();
        return $response;
    }

    /**
     * getting the shop updated profile info for data exporting
     * @return array
     */
    public function getStoreUpdateProfile() {
        $yesterday = new \DateTime('yesterday');
        $start_date = $yesterday->format('Y-m-d');
        $today = new \DateTime('today');
        $end_date = $today->format('Y-m-d');
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $query = $qb->select()
                ->where('c.updatedAt >=:create_at', 'c.updatedAt<:end_at', 'c.createdAt != c.updatedAt')
                ->setParameter('create_at', $start_date)
                ->setParameter('end_at', $end_date)
                ->getQuery();
        $response = $query->getResult();
        return $response;
    }

    /**
     * getting the shop update profile info for data exporting for backlogs
     * @return array
     */
    public function getStoreUpdateProfileBackLogs($shop_id) {
        $yesterday = new \DateTime('yesterday');
        $start_date = $yesterday->format('Y-m-d');
        $today = new \DateTime('today');
        $end_date = $today->format('Y-m-d');
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $qb->select()
                ->where('c.updatedAt >=:create_at', 'c.updatedAt<:end_at', 'c.createdAt != c.updatedAt');
        if ($shop_id > 0) {
            $qb->andwhere('c.id >:last_shop_id')
                    ->setParameter('last_shop_id', $shop_id);
        }

        $query = $qb->setParameter('create_at', $start_date)
                ->setParameter('end_at', $end_date)
                ->getQuery();

        $response = $query->getResult();
        return $response;
    }

    /**
     * Get stores list
     * @param type $user_id
     * @param type $limit_start
     * @param type $limit_size
     * @param type $store_type 1/2 . 1 for all stores, 2 for user id based stores member or owner
     * @return array
     */
    public function getPublicStores($limit_start, $limit_size, $store_type) {

        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id, c.email, c.description, c.parentStoreId, c.phone, c.businessName, c.legalStatus, c.businessType, c.businessCountry, c.businessRegion, c.businessCity, c.businessAddress, c.zip, c.province, c.vatNumber, c.iban, c.mapPlace, c.latitude, c.longitude, c.storeImage, c.isAllowed, 
                 c.isActive, c.createdAt,co.userId, co.role,c.paymentStatus,c.name,c.shopStatus,c.creditCardStatus')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 'c.id = co.storeId');

        //check if request is for only user store

        $result = $query->where('co.role =:role')
                ->setParameter('role', 15);
        $result = $query->andWhere('c.shopStatus =:shopstatus')
                ->setParameter('shopstatus', 1);

        $result = $query->andWhere('c.isActive =:status')
                ->setParameter('status', 1)
                ->orderBy('c.id', 'DESC');

        $result = $query->setFirstResult($limit_start)
                ->setMaxResults($limit_size)
                ->getQuery();

        $result_res = $result->getResult();


        return $result_res;
    }

    /**
     * Get stores list
     * @param type $user_id
     * @param type $store_type 1/2 . 1 for all stores, 2 for user id based stores
     * @return array
     */
    public function getPublicStoresCount($store_type) {

        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id, co.userId')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 'c.id = co.storeId');

        //check if request is for only user store

        $result = $query->where('co.role =:role')
                ->setParameter('role', 15);
        $result = $query->andWhere('c.shopStatus =:shopstatus')
                ->setParameter('shopstatus', 1);


        $result = $query->andWhere('c.isActive =:status')
                ->setParameter('status', 1);

        $result = $query->getQuery();

        $result_res = $result->getResult();


        return count($result_res);
    }

    /**
     * Get all stores 
     * @param type $user_id
     * @return array
     */
    public function getAllStoresResult($limit_start, $limit_size) {
        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c')
                ->setFirstResult($limit_start)
                ->setMaxResults($limit_size);
        $result = $query->getQuery();
        $result_res = $result->getResult();
        return $result_res;
    }

    /**
     * Get store detail
     * @param type $shop_id
     * @return type
     */
    public function getMapStoresDetail($shop_id, $user_id, $bucket_path, $citizen_income, $language_code, $friendsIds) {
        if (count($friendsIds) > 0) {
            $friends_id = implode(',', $friendsIds);
            $friend_condition = "(SELECT count(Distinct user_id) FROM PaymentProcessCredit WHERE shop_id = s.id and user_id in ($friends_id) and shop_status = 'APPROVED')";
        } else {
            $friend_condition = 0;
        }
        $image_path = $bucket_path . $this->store_media_path;

        $offerTable = $this->getEntityManager()->getClassMetadata('SixthContinentConnectBundle:Offer')->getTableName();
        $storeTable = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();

        $sql = "select * from (";
        $sql .= "("
                . "  SELECT o.id as id, "
                . "'' as email, "
                . "o.description as description, "
                . "0 as parentStoreId, "
                . "'' as phone, "
                . "'' as businessName, "
                . "'' as legalStatus, "
                . "'' as businessType, "
                . "'' as businessCountry, "
                . "'' as businessRegion, "
                . "'' as businessCity, "
                . "'' as businessAddress, "
                . "'' as zip, "
                . "'' as province, "
                . "'' as vatNumber, "
                . "'' as iban, "
                . "'' as mapPlace, "
                . "'' as latitude, "
                . "'' as longitude, "
                . "'' as storeImage, "
                . "1 as isAllowed, "
                . "1 as isActive, "
                . "'' as createdAt, "
                . "'' as userId, "
                . "'' as role, "
                . "'' as paymentStatus, "
                . "o.name as name, "
                . "1 as shopStatus, "
                . "0 as shopRating, "
                . "0 as vote_count, "
                . "0 as creditCardStatus, "
                . "'' as catogory_id, "
                . "'' as sub_category_id, "
                . "CONVERT(o.category USING utf8) as shop_category, "
                . "CONVERT('' USING utf8) as shop_sub_category, "
                . "0 as citizen_income, "
                . "CONVERT(if(TRIM(IFNULL(o.image,''))!='', o.image, '') USING utf8) as image_name, "
                . "'' as album_id, "
                . "CONVERT(if(TRIM(IFNULL(o.imagethumb,''))!='', o.imagethumb, '') USING utf8) as profile_image_thumb, "
                . "CONVERT(if(TRIM(IFNULL(o.image,''))!='', o.image, '') USING utf8) as profile_image_original, "
                . "0 as balance_shot, "
                . "0 as available_gc, "
                . "0 as balance_momosy_card, "
                . "0 as user_balance_dp, "
                . "0 as min_dp, "
                . "0 AS gift_card_can_used, "
                . "0 as credit_available, "
                . "0 as friend_count, "
                . "0 as is_fav, "
                . "'offer' as type, "
                . "ROUND(if(o.price<=0, 0, o.price)/100, 2) as price "
                . " FROM $offerTable o INNER JOIN  $storeTable s ON(o.shop_id=s.id) "
                . " WHERE o.is_active=1 AND o.is_deleted=0 AND s.is_active=1 AND o.id= :offerId"
                . ") UNION (";
        $sql .= "SELECT (@store_id := s.id) as id, 
                s.email as email, 
                s.description as description, 
                s.parent_store_id as parentStoreId, 
                s.phone as phone, 
                s.business_name as businessName, 
                s.legal_status as legalStatus, 
                s.business_type as businessType, 
                s.business_country as businessCountry, 
                s.business_region as businessRegion, 
                s.business_city as businessCity, 
                s.business_address as businessAddress, 
                s.zip as zip, 
                s.province as province, 
                s.vat_number as vatNumber, 
                s.iban as iban, 
                s.map_place as mapPlace, 
                s.latitude as latitude, 
                s.longitude as longitude, 
                s.store_image as storeImage, 
                s.is_allowed as isAllowed, 
                s.is_active as isActive, 
                s.created_at as createdAt, 
                co.user_id as userId, 
                co.role as role, 
                s.payment_status as paymentStatus, 
                s.name as name, 
                s.shop_status as shopStatus, 
                s.avg_rate as shopRating,
                s.vote_count as vote_count,
                s.credit_card_status as creditCardStatus,
                s.sale_catid as catogory_id,
                s.sale_subcatid as sub_category_id,
                CONVERT((select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '" . $language_code . "') USING utf8) as shop_category,
                CONVERT((select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '" . $language_code . "') USING utf8) as shop_sub_category,         
                0 as citizen_income,
                CONVERT(@image_name := sm.image_name USING utf8) as image_name, 
                @album_id := sm.album_id as album_id,
                CONVERT(if(@album_id IS NULL,if(bc.image_thumb is NULL ,'',bc.image_thumb),if(@album_id > 0, 
                concat(concat(concat(concat(concat('" . $image_path . "', @store_id),'/thumb/'),@album_id),'/'),@image_name),
                concat(concat(concat('" . $image_path . "', @store_id),'/thumb/'),@image_name))) USING utf8) as profile_image_thumb,

                CONVERT(if(@album_id IS NULL,if(bc.image is NULL ,'',bc.image),if(@album_id > 0, 
                concat(concat(concat(concat(concat('" . $image_path . "', @store_id),'/original/'),@album_id),'/'),@image_name),
                concat(concat(concat('" . $image_path . "', @store_id),'/original/'),@image_name))) USING utf8) as profile_image_original,
                0 as balance_shot, 0 as available_gc, 0 as balance_momosy_card, 0 as user_balance_dp, 0 as min_dp, 
                0 AS gift_card_can_used,
                0 as credit_available,
                0 as friend_count,
                if($user_id = fav.user_id, 1, 0) as is_fav,
                '' as type,
                '' as price
                FROM Store s
                INNER JOIN UserToStore co ON s.id = co.store_id and co.role = 15
                LEFT JOIN StoreMedia sm ON s.store_image = sm.id 
                LEFT JOIN (SELECT * FROM UserShopCredit x WHERE x.user_id =" . $user_id . ") u ON s.id = u.shop_id
                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
                left join  BusinessCategory as bc on s.sale_catid = bc.id
                LEFT JOIN UserDiscountPosition ud ON ud.user_id = $user_id where s.id = $shop_id and co.role=15 and s.is_active = 1";
        $sql .= ")) as tmptable";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->bindValue('offerId', $shop_id);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;
    }

    /**
     * Get store detail
     * @param type $shop_id
     * @return type
     */
    public function getMapStoresDetail_old($shop_id) {

        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id, c.email, c.description, c.parentStoreId, c.phone, c.businessName, c.legalStatus, c.businessType, c.businessCountry, c.businessRegion, c.businessCity, c.businessAddress, c.zip, c.province, c.vatNumber, c.iban, c.mapPlace, c.latitude, c.longitude, c.storeImage, c.isAllowed, 
                 c.isActive, c.createdAt,co.userId, co.role,c.paymentStatus,c.name,c.shopStatus,c.creditCardStatus')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 'c.id = co.storeId');

        //check if request is for only user store
        $result = $query->where('c.id =:shop_id')
                ->setParameter('shop_id', $shop_id);

        $result = $query->andWhere('co.role =:role')
                ->setParameter('role', 15);

        $result = $query->andWhere('c.isActive =:status')
                ->setParameter('status', 1)
                ->orderBy('c.id', 'DESC');

        $result = $query->getQuery();

        $result_res = $result->getResult();
        if (count($result_res) > 0) {
            return $result_res[0];
        }
        return array();
    }

    /**
     * Get shop object
     * @param type $shop_ids
     * @return array
     */
    public function getAllStoreObject($shop_ids) {
        if (count($shop_ids) > 0) {
            $qb = $this->createQueryBuilder('c');
            $query = $qb->select()
                    ->where(
                            $qb->expr()->In('c.id', ':shops')
                    )
                    ->setParameter('shops', $shop_ids);

            $result = $query->getQuery();
            $result_res = $result->getResult();

            return $result_res;
        }
        return array();
    }

    /**
     * function for getting the users store
     * @param type $user_id
     * @param type $limit_start
     * @param type $limit_size
     * @param type $store_type
     * @param type $bucket_path
     * @param type $filter_type
     * @param type $citizen_income
     * @param type $language_code
     * @return type
     */
    public function getStores($user_id, $limit_start, $limit_size, $store_type, $bucket_path, $filter_type, $citizen_income = null, $language_code, $friendsIds) {
        $image_path = $bucket_path . $this->store_media_path;
        if (count($friendsIds) > 0) {
            $friends_id = implode(',', $friendsIds);
            $friend_condition = "(SELECT count(Distinct user_id) FROM PaymentProcessCredit WHERE shop_id = s.id and user_id in ($friends_id) and shop_status = 'APPROVED')";
        } else {
            $friend_condition = 0;
        }

        $condition = "where s.is_active = 1";
        $orderby_condition = '';
        //check if request is for only user store
        if ($store_type == 2) {
            $condition = $condition . ' and ' . 'co.user_id =' . $user_id;
        } elseif ($store_type == 1) {
            $condition = $condition . ' and ' . 'co.role =15 and s.shop_status =1';
        }
        //made sorting according to the filters
        if ($filter_type == 1) {
            $orderby_condition = 'credit_available DESC';
        } elseif ($filter_type == 2) {
            $orderby_condition = 'shopRating DESC,vote_count DESC';
        } else {
            $orderby_condition = 'id DESC';
        }
//       $sql = "select * from (SELECT (@store_id := s.id) as id, 
//                s.email as email, 
//                s.description as description, 
//                s.parent_store_id as parentStoreId, 
//                s.phone as phone, 
//                s.business_name as businessName, 
//                s.legal_status as legalStatus, 
//                s.business_type as businessType, 
//                s.business_country as businessCountry, 
//                s.business_region as businessRegion, 
//                s.business_city as businessCity, 
//                s.business_address as businessAddress, 
//                s.zip as zip, 
//                s.province as province, 
//                s.vat_number as vatNumber, 
//                s.iban as iban, 
//                s.map_place as mapPlace, 
//                s.latitude as latitude, 
//                s.longitude as longitude, 
//                s.store_image as storeImage, 
//                s.is_allowed as isAllowed, 
//                s.is_active as isActive, 
//                s.created_at as createdAt, 
//                co.user_id as userId, 
//                co.role as role, 
//                s.payment_status as paymentStatus, 
//                s.name as name,
//                s.shop_status as shopStatus, 
//                s.avg_rate as shopRating,
//                s.vote_count as vote_count,
//                s.sale_catid as catogory_id,
//                s.sale_subcatid as sub_category_id,
//                s.credit_card_status as creditCardStatus, 
//                @citizen_income := $citizen_income as citizen_income,
//                (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '" . $language_code . "') as shop_category,
//                (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '" . $language_code . "') as shop_sub_category,         
//                @image_name := sm.image_name as image_name, 
//                @album_id := sm.album_id as album_id,
//                if(@album_id IS NULL,'',if(@album_id > 0, 
//                concat(concat(concat(concat(concat('".$image_path."', @store_id),'/thumb/'),@album_id),'/'),@image_name),
//                concat(concat(concat('".$image_path."', @store_id),'/thumb/'),@image_name))) as profile_image_thumb,
//
//                if(@album_id IS NULL,'',if(@album_id > 0, 
//                concat(concat(concat(concat(concat('".$image_path."', @store_id),'/original/'),@album_id),'/'),@image_name),
//                concat(concat(concat('".$image_path."', @store_id),'/original/'),@image_name))) as profile_image_original, 
//                @balance_shot:= if(u.balance_shots > 0,u.balance_shots,0)  as balance_shot, @gc_avail := if(u.balance_gift_card > 0,u.balance_gift_card,0) as available_gc, @mom_amount := if(u.balance_momosy_card > 0,u.balance_momosy_card,0)  as balance_momosy_card, if(ud.balance_dp > 0 ,ud.balance_dp,0) as user_balance_dp, s.balance_dp, @dp_amount := least( if(ud.balance_dp > 0, ud.balance_dp , 0), if(s.balance_dp > 0, s.balance_dp , 0)) as min_dp, 
//                @y := ( @citizen_income/1000000 ) %100 as f, 
//                @x := ( (@citizen_income/1000000) - @y ) as a , 
//                @z := @y %50 as b, @k := ( @y - @z ) as c , 
//                @l := @z %30 as d, 
//                @g := ( @z - @l ) as e , 
//                @m := @l %20 as h, 
//                @q := ( @l - @m ) as n,
//                (@x + @k + @g + @q) AS gift_card_can_used,
//                if(@x + @k + @g + @q + @balance_shot/1000000 + @gc_avail/1000000 + @dp_amount/1000000 + @mom_amount/1000000  > 0,@x + @k + @g + @q + @balance_shot/1000000 + @gc_avail/1000000 + @dp_amount/1000000 + @mom_amount/1000000,0) as credit_available,
//                $friend_condition as friend_count,
//                if($user_id = fav.user_id, 1, 0) as is_fav 
//                FROM Store s
//                INNER JOIN UserToStore co ON s.id = co.store_id and co.role = 15
//                LEFT JOIN StoreMedia sm ON s.store_image = sm.id 
//                LEFT JOIN (SELECT * FROM UserShopCredit x WHERE x.user_id =" . $user_id . ") u ON s.id = u.shop_id
//                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
//                LEFT JOIN UserDiscountPosition ud ON ud.user_id = $user_id $condition) as tmptable order by $orderby_condition limit $limit_size offset $limit_start";
        $sql = "select * from (SELECT (@store_id := s.id) as id, 
                s.email as email, 
                s.description as description, 
                s.parent_store_id as parentStoreId, 
                s.phone as phone, 
                s.business_name as businessName, 
                s.legal_status as legalStatus, 
                s.business_type as businessType, 
                s.business_country as businessCountry, 
                s.business_region as businessRegion, 
                s.business_city as businessCity, 
                s.business_address as businessAddress, 
                s.zip as zip, 
                s.province as province, 
                s.vat_number as vatNumber, 
                s.iban as iban, 
                s.map_place as mapPlace, 
                s.latitude as latitude, 
                s.longitude as longitude, 
                s.store_image as storeImage, 
                s.is_allowed as isAllowed, 
                s.is_active as isActive, 
                s.created_at as createdAt, 
                co.user_id as userId, 
                co.role as role, 
                s.payment_status as paymentStatus, 
                s.name as name,
                s.shop_status as shopStatus, 
                s.avg_rate as shopRating,
                s.vote_count as vote_count,
                s.sale_catid as catogory_id,
                s.sale_subcatid as sub_category_id,
                s.credit_card_status as creditCardStatus, 
                0 as citizen_income,
                s.new_contract_status as new_contract_status,   
                (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '" . $language_code . "') as shop_category,
                (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '" . $language_code . "') as shop_sub_category,         
                @image_name := sm.image_name as image_name, 
                @album_id := sm.album_id as album_id,
                if(@album_id IS NULL,if(bc.image_thumb is NULL ,'',bc.image_thumb),if(@album_id > 0, 
                concat(concat(concat(concat(concat('" . $image_path . "', @store_id),'/thumb/'),@album_id),'/'),@image_name),
                concat(concat(concat('" . $image_path . "', @store_id),'/thumb/'),@image_name))) as profile_image_thumb,

                if(@album_id IS NULL,if(bc.image is NULL ,'',bc.image),if(@album_id > 0, 
                concat(concat(concat(concat(concat('" . $image_path . "', @store_id),'/original/'),@album_id),'/'),@image_name),
                concat(concat(concat('" . $image_path . "', @store_id),'/original/'),@image_name))) as profile_image_original, 
                0 as balance_shot, 0 as available_gc, 0 as balance_momosy_card, 0 as user_balance_dp, 0 as min_dp, 
                0 AS gift_card_can_used,
                0 as credit_available,
                0 as friend_count,
                if($user_id = fav.user_id, 1, 0) as is_fav 
                FROM Store s
                INNER JOIN UserToStore co ON s.id = co.store_id and co.role = 15
                LEFT JOIN StoreMedia sm ON s.store_image = sm.id 
                left join  BusinessCategory as bc on s.sale_catid = bc.id
                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
                $condition) as tmptable order by $orderby_condition limit $limit_size offset $limit_start";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;
    }

    public function getStoresWithOffers($user_id, $limit_start, $limit_size, $store_type, $bucket_path, $filter_type, $citizen_income = null, $language_code, $friendsIds) {
        $image_path = $bucket_path . $this->store_media_path;
        if (count($friendsIds) > 0) {
            $friends_id = implode(',', $friendsIds);
            $friend_condition = "(SELECT count(Distinct user_id) FROM PaymentProcessCredit WHERE shop_id = s.id and user_id in ($friends_id) and shop_status = 'APPROVED')";
        } else {
            $friend_condition = 0;
        }

        $condition = "where s.is_active = 1";
        $orderby_condition = '';
        $offerSelect = false;
        //check if request is for only user store
        if ($store_type == 2) {
            $condition = $condition . ' and ' . 'co.user_id =' . $user_id;
        } elseif ($store_type == 1) {
            $condition = $condition . ' and ' . 'co.role =15 and s.shop_status =1';
            $offerSelect = true;
        }
        //made sorting according to the filters
        if ($filter_type == 1) {
            $orderby_condition = 'credit_available DESC';
        } elseif ($filter_type == 2) {
            $orderby_condition = 'shopRating DESC,vote_count DESC';
        } else {
            $orderby_condition = 'id DESC';
        }
        $posTable = $this->getEntityManager()->getClassMetadata('SixthContinentConnectBundle:OfferPointofSale')->getTableName();
        $offerTable = $this->getEntityManager()->getClassMetadata('SixthContinentConnectBundle:Offer')->getTableName();
        $storeTable = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();
        $sql = "select * from ( ";

        if ($offerSelect === true) {
            $sql .= "("
                    . "  SELECT o.id as id, "
                    . "'' as email, "
                    . "o.description as description, "
                    . "0 as parentStoreId, "
                    . "'' as phone, "
                    . "'' as businessName, "
                    . "'' as legalStatus, "
                    . "'' as businesstype, "
                    . "'' as businessCountry, "
                    . "'' as businessRegion, "
                    . "'' as businessCity, "
                    . "'' as businessAddress, "
                    . "'' as zip, "
                    . "'' as province, "
                    . "'' as vatNumber, "
                    . "'' as iban, "
                    . "'' as mapPlace, "
                    . "'' as latitude, "
                    . "'' as longitude, "
                    . "'' as storeImage, "
                    . "1 as isAllowed, "
                    . "1 as isActive, "
                    . "'' as createdAt, "
                    . "'' as userId, "
                    . "'' as role, "
                    . "'' as paymentStatus, "
                    . "o.name as name, "
                    . "1 as shopStatus, "
                    . "0 as shopRating, "
                    . "0 as vote_count, "
                    . "'' as catogory_id, "
                    . "'' as sub_category_id, "
                    . "0 as creditCardStatus, "
                    . "0 as citizen_income, "
                    . "'' as new_contract_status, "
                    . "CONVERT(o.category USING utf8) as shop_category, "
                    . "CONVERT('' USING utf8) as shop_sub_category, "
                    . "CONVERT(if(TRIM(IFNULL(o.image,''))!='', o.image, '') USING utf8) as image_name, "
                    . "'' as album_id, "
                    . "CONVERT(if(TRIM(IFNULL(o.imagethumb,''))!='', o.imagethumb, '') USING utf8) as profile_image_thumb, "
                    . "CONVERT(if(TRIM(IFNULL(o.image,''))!='', o.image, '') USING utf8) as profile_image_original, "
                    . "0 as balance_shot, "
                    . "0 as available_gc, "
                    . "0 as balance_momosy_card, "
                    . "0 as user_balance_dp, "
                    . "0 as min_dp, "
                    . "0 AS gift_card_can_used, "
                    . "0 as credit_available, "
                    . "0 as friend_count, "
                    . "0 as is_fav, "
                    . "'offer' as type, "
                    . "ROUND(if(o.price<=0, 0, o.price)/100, 2) as price "
                    . " FROM $offerTable o INNER JOIN  $storeTable s ON(o.shop_id=s.id) "
                    . " WHERE o.is_active=1 AND o.is_deleted=0 AND s.is_active=1 "
                    . ") UNION ";
        }

        $sql .= " 
           (SELECT (@store_id := s.id) as id, 
                s.email as email, 
                s.description as description, 
                s.parent_store_id as parentStoreId, 
                s.phone as phone, 
                s.business_name as businessName, 
                s.legal_status as legalStatus, 
                s.business_type as businessType, 
                s.business_country as businessCountry, 
                s.business_region as businessRegion, 
                s.business_city as businessCity, 
                s.business_address as businessAddress, 
                s.zip as zip, 
                s.province as province, 
                s.vat_number as vatNumber, 
                s.iban as iban, 
                s.map_place as mapPlace, 
                s.latitude as latitude, 
                s.longitude as longitude, 
                s.store_image as storeImage, 
                s.is_allowed as isAllowed, 
                s.is_active as isActive, 
                s.created_at as createdAt, 
                co.user_id as userId, 
                co.role as role, 
                s.payment_status as paymentStatus, 
                s.name as name,
                s.shop_status as shopStatus, 
                s.avg_rate as shopRating,
                s.vote_count as vote_count,
                s.sale_catid as catogory_id,
                s.sale_subcatid as sub_category_id,
                s.credit_card_status as creditCardStatus, 
                0 as citizen_income,
                s.new_contract_status as new_contract_status,   
                CONVERT((select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '" . $language_code . "') USING utf8) as shop_category,
                CONVERT((select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '" . $language_code . "') USING utf8) as shop_sub_category,         
                CONVERT(@image_name := sm.image_name USING utf8) as image_name, 
                @album_id := sm.album_id as album_id,
                CONVERT(if(@album_id IS NULL,if(bc.image_thumb is NULL ,'',bc.image_thumb),if(@album_id > 0, 
                concat(concat(concat(concat(concat('" . $image_path . "', @store_id),'/thumb/'),@album_id),'/'),@image_name),
                concat(concat(concat('" . $image_path . "', @store_id),'/thumb/'),@image_name))) USING utf8) as profile_image_thumb,

                CONVERT(if(@album_id IS NULL,if(bc.image is NULL ,'',bc.image),if(@album_id > 0, 
                concat(concat(concat(concat(concat('" . $image_path . "', @store_id),'/original/'),@album_id),'/'),@image_name),
                concat(concat(concat('" . $image_path . "', @store_id),'/original/'),@image_name))) USING utf8) as profile_image_original, 
                0 as balance_shot, 0 as available_gc, 0 as balance_momosy_card, 0 as user_balance_dp, 0 as min_dp, 
                0 AS gift_card_can_used,
                0 as credit_available,
                0 as friend_count,
                if($user_id = fav.user_id, 1, 0) as is_fav,
                '' as type,
                '' as price
                FROM Store s
                INNER JOIN UserToStore co ON s.id = co.store_id and co.role = 15
                LEFT JOIN StoreMedia sm ON s.store_image = sm.id 
                left join  BusinessCategory as bc on s.sale_catid = bc.id
                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
                $condition "
                . ")) as tmptable order by $orderby_condition limit $limit_size offset $limit_start";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;
    }

    public function getStoresWithOffersCount($user_id, $store_type) {

        $condition = "where s.is_active = 1";
        $offerSelect = false;
        //check if request is for only user store
        if ($store_type == 2) {
            $condition = $condition . ' and ' . 'co.user_id =' . $user_id;
        } elseif ($store_type == 1) {
            $condition = $condition . ' and ' . 'co.role =15 and s.shop_status =1';
            $offerSelect = true;
        }

        $offerTable = $this->getEntityManager()->getClassMetadata('SixthContinentConnectBundle:Offer')->getTableName();
        $storeTable = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();
        $sql = "select (
           (SELECT count(s.id) as records
                FROM Store s
                INNER JOIN UserToStore co ON (s.id = co.store_id)
                $condition "
                . ") ";
        if ($offerSelect === true) {
            $sql .= "+ ("
                    . "  SELECT count(o.id) as records "
                    . " FROM $offerTable o INNER JOIN  $storeTable s ON(o.shop_id=s.id) "
                    . " WHERE o.is_active=1 AND o.is_deleted=0 AND s.is_active=1 "
                    . ") ";
        }

        $sql .= ") as t_records";

        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        $result = isset($result[0]['t_records']) ? $result[0]['t_records'] : 0;
        return $result;
    }

    /**
     * Search the store
     * @param type $store_business_name
     * @param type $limit_start
     * @param type $limit_size
     * @return type
     */
    public function searchStores_old($store_business_name, $limit_start, $limit_size) {
        $qb = $this->createQueryBuilder('s');
        $qb->select('s.id,s.name,s.paymentStatus,s.businessName,s.email,s.description,s.phone,s.legalStatus,s.businessType,s.businessCountry,s.businessRegion,s.businessCity,s.businessAddress,s.zip,s.province,s.vatNumber,s.iban,s.mapPlace,s.latitude,s.longitude,s.parentStoreId,s.isActive,s.isAllowed,s.createdAt,s.shopStatus,s.creditCardStatus,s.storeImage,sm.albumId,sm.imageName,co.userId')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 's.id = co.storeId and co.role = 15')
                ->leftJoin('StoreManagerStoreBundle:StoreMedia', 'sm', 'WITH', 's.storeImage = sm.id')
                ->where('s.isActive =:enabled')
                ->andWhere('s.shopStatus=:shopstatus')
                ->andWhere(
                        $qb->expr()->orX(
                                $qb->expr()->like('s.businessName', ':stitle'), $qb->expr()->like('s.name', ':stitle')
                        )
                )
                ->setParameter('enabled', 1)
                ->setParameter('shopstatus', 1)
                ->setParameter('stitle', '%' . $store_business_name . '%')
                ->setFirstResult($limit_start)
                ->setMaxResults($limit_size);
        $query = $qb->getQuery();
        $result = $query->getResult();
        return $result;
    }

    /**
     * Search the store
     * @param type $store_business_name
     * @param type $limit_start
     * @param type $limit_size
     * @return type
     */
    public function searchStores($user_id, $store_business_name, $limit_start, $limit_size, $bucket_path, $language_code, $citizen_income = null, $friendsIds) {
        $image_path = $bucket_path . $this->store_media_path;
        $store_business_name = addslashes($store_business_name);
        if (count($friendsIds) > 0) {
            $friends_id = implode(',', $friendsIds);
            $friend_condition = "(SELECT count(Distinct user_id) FROM PaymentProcessCredit WHERE shop_id = s.id and user_id in ($friends_id) and shop_status = 'APPROVED')";
        } else {
            $friend_condition = 0;
        }
//        $sql = "SELECT s.id as id,
//            s.parent_store_id as parentStoreId,
//            s.business_name as businessName,
//            s.business_type as businessType,
//            s.is_allowed as isAllowed,
//            s.payment_status as paymentstatus,
//            s.name as name,
//            s.latitude as latitude,
//            s.longitude as longitude,
//            s.email as email,
//            s.description as description,
//            s.phone as phone,
//            s.legal_status as legalStatus,
//            s.business_region as businessRegion,
//            s.business_city as businessCity,
//            s.business_country as businessCountry, 
//            s.business_address as businessAddress,
//            s.zip as zip,s.province as province,
//            s.vat_number as vatNumber,
//            s.iban as iban,
//            s.map_place as mapPlace,
//            s.store_image as storeimage,
//            s.is_active as isActive,
//            s.shop_status as shopStatus,
//            s.payment_status as paymentStatus, 
//            s.created_at as createdAt,
//            s.avg_rate as shop_rating,
//            s.vote_count as vote_count,
//            co.user_id as userId,
//            s.store_image as storeImage,
//            s.credit_card_status as creditCardStatus, 
//            s.sale_catid as catogory_id,
//            s.sale_subcatid as sub_category_id,
//            sm.album_id as albumId,
//            $friend_condition as friend_count,
//            (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '" . $language_code . "') as shop_category,
//            (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '" . $language_code . "') as shop_sub_category,
//            s.shop_keyword as shop_keyword,
//            @citizen_income := $citizen_income as citizen_income,
//            @balance_shot:= if(u.balance_shots > 0,u.balance_shots,0)  as balance_shot, @gc_avail := if(u.balance_gift_card > 0,u.balance_gift_card,0) as available_gc, @mom_amount := if(u.balance_momosy_card > 0,u.balance_momosy_card,0)  as balance_momosy_card, if(ud.balance_dp > 0 ,ud.balance_dp,0) as user_balance_dp, s.balance_dp, @dp_amount := least( if(ud.balance_dp > 0, ud.balance_dp , 0), if(s.balance_dp > 0, s.balance_dp , 0)) as min_dp, 
//            @y := ( @citizen_income/1000000 ) %100 as f, 
//            @x := ( (@citizen_income/1000000) - @y ) as a , 
//            @z := @y %50 as b, @k := ( @y - @z ) as c , 
//            @l := @z %30 as d, 
//            @g := ( @z - @l ) as e , 
//            @m := @l %20 as h, 
//            @q := ( @l - @m ) as n,
//            (@x + @k + @g + @q) AS gift_card_can_used,
//            if(@x + @k + @g + @q + @balance_shot/1000000 + @gc_avail/1000000 + @dp_amount/1000000 + @mom_amount/1000000  > 0,@x + @k + @g + @q + @balance_shot/1000000 + @gc_avail/1000000 + @dp_amount/1000000 + @mom_amount/1000000,0) as credit_available,
//            sm.image_name as imageName,
//            if($user_id = fav.user_id, 1, 0) as is_fav 
//                FROM Store s
//                inner join UserToStore co on s.id = co.store_id and co.role = 15
//                LEFT JOIN StoreMedia as sm on sm.id = s.store_image 
//                LEFT JOIN (SELECT * FROM UserShopCredit x WHERE x.user_id =" . $user_id . ") u ON s.id = u.shop_id
//                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
//                LEFT JOIN UserDiscountPosition ud ON ud.user_id = $user_id where s.shop_status=1 and s.is_active=1 and (s.business_name like '%".$store_business_name."%' or s.name like '%".$store_business_name."%') limit $limit_size offset $limit_start";
        $sql = "SELECT s.id as id,
            s.parent_store_id as parentStoreId,
            s.business_name as businessName,
            s.business_type as businessType,
            s.is_allowed as isAllowed,
            s.payment_status as paymentstatus,
            s.name as name,
            s.latitude as latitude,
            s.longitude as longitude,
            s.email as email,
            s.description as description,
            s.phone as phone,
            s.legal_status as legalStatus,
            s.business_region as businessRegion,
            s.business_city as businessCity,
            s.business_country as businessCountry, 
            s.business_address as businessAddress,
            s.zip as zip,s.province as province,
            s.vat_number as vatNumber,
            s.iban as iban,
            s.map_place as mapPlace,
            s.store_image as storeimage,
            s.is_active as isActive,
            s.shop_status as shopStatus,
            s.payment_status as paymentStatus, 
            s.created_at as createdAt,
            s.avg_rate as shop_rating,
            s.vote_count as vote_count,
            co.user_id as userId,
            s.store_image as storeImage,
            s.credit_card_status as creditCardStatus, 
            s.sale_catid as catogory_id,
            s.sale_subcatid as sub_category_id,
            sm.album_id as albumId,
            0 as friend_count,
            (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '" . $language_code . "') as shop_category,
            (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '" . $language_code . "') as shop_sub_category,
            s.shop_keyword as shop_keyword,
            0 as citizen_income,
            0 as balance_shot, 0 as available_gc, 0 as balance_momosy_card, 0 as user_balance_dp, 0 as min_dp, 
            0 AS gift_card_can_used,
            0 as credit_available,
            sm.image_name as imageName,
            if($user_id = fav.user_id, 1, 0) as is_fav 
                FROM Store s
                inner join UserToStore co on s.id = co.store_id and co.role = 15
                LEFT JOIN StoreMedia as sm on sm.id = s.store_image 
                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
                where s.shop_status=1 and s.is_active=1 and (s.business_name like :search_text or s.name like :search_text) limit $limit_size offset $limit_start";
        $params['search_text'] = "%$store_business_name%";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute($params);
        $result = $stmt->fetchAll();
        //$result = json_encode($result);
        return $result;
    }

    /**
     * Search the store
     * @param type $store_business_name
     * @param type $limit_start
     * @param type $limit_size
     * @return type
     */
    public function searchStoresWithOffer($user_id, $store_business_name, $limit_start, $limit_size, $bucket_path, $language_code, $citizen_income = null, $friendsIds) {
        $image_path = $bucket_path . $this->store_media_path;
        $store_business_name = addslashes($store_business_name);
        if (count($friendsIds) > 0) {
            $friends_id = implode(',', $friendsIds);
            $friend_condition = "(SELECT count(Distinct user_id) FROM PaymentProcessCredit WHERE shop_id = s.id and user_id in ($friends_id) and shop_status = 'APPROVED')";
        } else {
            $friend_condition = 0;
        }
        $offerTable = $this->getEntityManager()->getClassMetadata('SixthContinentConnectBundle:Offer')->getTableName();
        $storeTable = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();
        $sql = "
            (SELECT s.id as id,
            s.parent_store_id as parentStoreId,
            s.business_name as businessName,
            s.business_type as businessType,
            s.is_allowed as isAllowed,
            s.payment_status as paymentStatus,
            s.name as name,
            s.latitude as latitude,
            s.longitude as longitude,
            s.email as email,
            s.description as description,
            s.phone as phone,
            s.legal_status as legalStatus,
            s.business_region as businessRegion,
            s.business_city as businessCity,
            s.business_country as businessCountry, 
            s.business_address as businessAddress,
            s.zip as zip,s.province as province,
            s.vat_number as vatNumber,
            s.iban as iban,
            s.map_place as mapPlace,
            s.is_active as isActive,
            s.shop_status as shopStatus,
            s.created_at as createdAt,
            s.avg_rate as shop_rating,
            s.vote_count as vote_count,
            co.user_id as userId,
            s.store_image as storeImage,
            s.credit_card_status as creditCardStatus, 
            s.sale_catid as catogory_id,
            s.sale_subcatid as sub_category_id,
            sm.album_id as albumId,
            0 as friend_count,
            CONVERT((select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '" . $language_code . "') USING utf8) as shop_category,
            CONVERT((select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '" . $language_code . "') USING utf8) as shop_sub_category,
            s.shop_keyword as shop_keyword,
            0 as citizen_income,
            0 as balance_shot, 0 as available_gc, 0 as balance_momosy_card, 0 as user_balance_dp, 0 as min_dp, 
            0 AS gift_card_can_used,
            0 as credit_available,
            CONVERT(sm.image_name USING utf8) as imageName,
            if($user_id = fav.user_id, 1, 0) as is_fav,
                '' as type, 
                 '' as price,
                 CONVERT(''  USING utf8)as profile_image_thumb,
                 CONVERT('' USING utf8) as profile_image_original
                FROM Store s
                inner join UserToStore co on s.id = co.store_id and co.role = 15
                LEFT JOIN StoreMedia as sm on sm.id = s.store_image 
                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
                where s.shop_status=1 and s.is_active=1 and (s.business_name like :search_text or s.name like :search_text)
                )
                UNION
                (  SELECT 
                o.id as id, 
                0 as parentStoreId, 
                '' as businessName, 
                '' as businesstype,
                1 as isAllowed, 
                 '' as paymentStatus, 
                  o.name as name, 
                '' as latitude,
                '' as longitude, 
                '' as email, 
                o.description as description,
                '' as phone, 
                 '' as legalStatus, 
                 '' as businessRegion, 
                 '' as businessCity, 
                '' as businessCountry,  
                 '' as businessAddress,
                '' as zip, 
                 '' as province, 
                '' as vatNumber,  
                 '' as iban, 
                 '' as mapPlace,
                 1 as isActive,  
                  1 as shopStatus, 
                  '' as createdAt, 
                 0 as shop_rating,
                 0 as vote_count, 
                 '' as userId,  
                 '' as storeImage,
                 0 as creditCardStatus, 
                  '' as catogory_id, 
                 '' as sub_category_id,
                 '' as albumId, 
                 0 as friend_count,
                 CONVERT(o.category  USING utf8) as shop_category, 
                 CONVERT(''  USING utf8) as shop_sub_category, 
                 '' as shop_keyword,
                 0 as citizen_income, 
                 0 as balance_shot, 
                 0 as available_gc, 
                 0 as balance_momosy_card, 
                 0 as user_balance_dp, 
                 0 as min_dp, 
                 0 AS gift_card_can_used,
                0 as credit_available, 
                CONVERT(if(TRIM(IFNULL(o.image,''))!='', o.image, '')  USING utf8)  as imageName, 
                  0 as is_fav, 
                 'offer' as type, 
                 ROUND(if(o.price<=0, 0, o.price)/100, 2) as price ,
                 CONVERT(if(TRIM(IFNULL(o.imagethumb,''))!='', o.imagethumb, '')  USING utf8) as profile_image_thumb, 
                 CONVERT(if(TRIM(IFNULL(o.image,''))!='', o.image, '')  USING utf8) as profile_image_original
                 FROM $offerTable o INNER JOIN  $storeTable s ON(o.shop_id=s.id)  WHERE o.is_active=1 AND o.is_deleted=0 AND s.is_active=1 AND o.name like :search_text
                 )
                limit $limit_size offset $limit_start";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->bindValue('search_text', "%$store_business_name%");
        $stmt->execute();
        $result = $stmt->fetchAll();
//        var_dump($result);exit;
        //$result = json_encode($result);
        return $result;
    }

    /**
     * citizen user.
     */
    public function getShopProfile() {
        $sql = "SELECT id, parent_store_id, name, email, description, phone, business_name,
                legal_status, business_type, payment_status, shop_status, credit_card_status, business_country, business_region,
                business_city, business_address, zip, province, vat_number, iban, map_place, latitude,
                longitude, store_image, DATE_FORMAT(created_at, '%m/%d/%Y') as created_at, is_active, is_allowed
                FROM store";

        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;
    }

    /**
     * Get all shop that has not added the credit card
     * @return array
     */
    public function getUserShopNotCc() {
        $qb = $this->createQueryBuilder('s');
        $qb->select('co.storeId, co.userId, s.createdAt, s.creditCardStatus')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 's.id = co.storeId')
                ->where('s.isActive =:enabled')
                ->andWhere('s.creditCardStatus=:creditcardstatus')
                ->setParameter('enabled', 1)
                ->setParameter('creditcardstatus', 0);
        $query = $qb->getQuery();
        $result = $query->getResult();
        return $result;
    }

    /**
     * Deactivate shops
     * @param array $shop_ids
     * @return boolean
     */
    public function deactivateShops($shop_ids) {
        if (count($shop_ids) > 0) {
            $time = new \DateTime("now");

            //create the query
            $qb = $this->createQueryBuilder('s');
            $query = $qb->update()
                    ->where(
                            $qb->expr()->In('s.id', '?3')
                    )
                    ->set('s.shopStatus', '?1')
                    ->set('s.updatedAt', '?2')
                    ->setParameter(1, 0)
                    ->setParameter(2, $time)
                    ->setParameter(3, $shop_ids)
                    ->getQuery();
            $response = $query->getResult();
            return true;
        }
        return true;
    }

    /**
     *  function for getting the store f or the applied filters 
     * @param type $user_id
     * @param type $search_text
     * @param type $search_city
     * @param type $category
     * @param type $favourite
     * @param type $lat_long
     * @param type $radius
     * @param type $sort_type
     * @param type $limits
     * @param type $citizen_income
     * @param type $bucket_path
     * @param type $store_type
     * @return type
     */
    public function getFilterStore($user_id, $search_text, $search_city, $category, $lat_long, $radius, $sort_type, $limits, $citizen_income, $bucket_path, $store_type, $language_code, $favorite_shop) {
        $image_path = $bucket_path . $this->store_media_path;
        $search_text = addslashes($search_text);
        $search_city = addslashes($search_city);
        $condition = "where s.is_active = 1";
        $param = array();

        //check if request is for only user store
        if ($store_type == 2) {
            $condition = $condition . ' and ' . 'co.user_id =' . $user_id;
        } elseif ($store_type == 1) {
            $condition = $condition . ' and ' . 'co.role =15 and s.shop_status =1';
        }
        $orderby_condition = '';
        //check for the city search
        if ($search_city != '') {
            $condition = $condition . ' and ' . "s.business_city like :search_city";
            $param['search_city'] = "%$search_city%";
        }
        //check for the search text
        if ($search_text != '') {
            $condition = $condition . ' and ' . "(s.business_name like :search_text OR FIND_IN_SET( :search_text, shop_keyword ) OR s.name like :search_text OR (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '$language_code') like :search_text OR (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '$language_code') like :search_text)";
            $param['search_text'] = "%$search_text%";
        }
        //check for category
        if (count($category) > 0) {
            $categories = implode(',', $category);
            $condition = $condition . " and s.sale_catid in ($categories)";
        }

        //check for favourite
        if ($favorite_shop == 1) {
            //$favourite = implode(',', $favourite);
            $condition = $condition . " and s.id = fav.store_id and fav.user_id = $user_id";
        }
        //check for category
        $distance = 0;
        //check for lat long
        if (count($lat_long) == 2) {
            $latitute = $lat_long[0];
            $longitude = $lat_long[1];
            $distance = "(6371 * acos(cos( radians( $latitute ) ) * cos( radians( s.latitude ) ) * cos( radians( s.longitude ) - radians( $longitude )) + sin(radians( $latitute)) * sin(radians(s.latitude))))";
            $condition = $condition . " having distance <= $radius";
        }

        //getting the order by condition 
        if ($sort_type == 1) {
            $orderby_condition = "shopRating DESC,voteCount DESC";
        } elseif ($sort_type == 2) {
            $orderby_condition = "credit_available DESC";
        } else {
            $orderby_condition = "distance ASC";
        }

        //setting limit 
        $limit_condition = "";
        if (isset($limits['limit_size']) && isset($limits['limit_start'])) {
            $limit_size = $limits['limit_size'];
            $limit_start = $limits['limit_start'];
            $limit_condition = "limit $limit_size offset $limit_start";
        }

//        $sql = "select * from (SELECT (@store_id := s.id) as id, 
//                s.email as email, 
//                s.description as description, 
//                s.parent_store_id as parentStoreId, 
//                s.phone as phone, 
//                s.business_name as businessName, 
//                s.legal_status as legalStatus, 
//                s.business_type as businessType, 
//                s.business_country as businessCountry, 
//                s.business_region as businessRegion, 
//                s.business_city as businessCity, 
//                s.business_address as businessAddress, 
//                s.zip as zip, 
//                s.province as province, 
//                s.vat_number as vatNumber, 
//                s.iban as iban, 
//                s.map_place as mapPlace,
//                CAST(s.latitude AS DECIMAL(10,6)) as latitude,
//                CAST(s.longitude AS DECIMAL(10,6)) as longitude, 
//                s.store_image as storeImage, 
//                s.is_allowed as isAllowed, 
//                s.is_active as isActive, 
//                s.created_at as createdAt, 
//                co.user_id as userId, 
//                co.role as role, 
//                s.payment_status as paymentStatus, 
//                s.name as name, 
//                s.shop_status as shopStatus, 
//                s.avg_rate as shopRating,
//                s.vote_count as voteCount,
//                s.sale_catid as catogory_id,
//                s.sale_subcatid as sub_category_id,
//                s.credit_card_status as creditCardStatus, 
//                s.shop_keyword as shopKeywords,
//                if((@owner_first_name := (select firstname from fos_user_user where id = co.user_id)) IS NULL,'',@owner_first_name) as ownerFirstName,
//                if((@owner_last_name := (select lastname from fos_user_user where id = co.user_id)) IS NULL,'',@owner_last_name) as ownerLastName,
//                @citizen_income := $citizen_income as citizen_income,
//                $distance as distance,
//                if($user_id = fav.user_id, 1, 0) as is_fav,
//                if($user_id = follower.user_id, 1, 0) as is_following,
//                (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '$language_code') as shop_category,
//                (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '$language_code') as shop_sub_category,         
//                @image_name := sm.image_name as image_name, 
//                @album_id := sm.album_id as album_id,
//                if(@album_id IS NULL,'',if(@album_id > 0, 
//                concat(concat(concat(concat(concat('".$image_path."', @store_id),'/thumb/'),@album_id),'/'),@image_name),
//                concat(concat(concat('".$image_path."', @store_id),'/thumb/'),@image_name))) as profile_image_thumb,
//
//                if(@album_id IS NULL,'',if(@album_id > 0, 
//                concat(concat(concat(concat(concat('".$image_path."', @store_id),'/original/'),@album_id),'/'),@image_name),
//                concat(concat(concat('".$image_path."', @store_id),'/original/'),@image_name))) as profile_image_original,
//                @balance_shot:= if(u.balance_shots > 0,u.balance_shots,0)  as balance_shot, @gc_avail := if(u.balance_gift_card > 0,u.balance_gift_card,0) as available_gc, @mom_amount := if(u.balance_momosy_card > 0,u.balance_momosy_card,0)  as balance_momosy_card, if(ud.balance_dp > 0 ,ud.balance_dp,0) as user_balance_dp, s.balance_dp, @dp_amount := least( if(ud.balance_dp > 0, ud.balance_dp , 0), if(s.balance_dp > 0, s.balance_dp , 0)) as min_dp, 
//                @y := ( @citizen_income/1000000 ) %100 as f, 
//                @x := ( (@citizen_income/1000000) - @y ) as a , 
//                @z := @y %50 as b, @k := ( @y - @z ) as c , 
//                @l := @z %30 as d, 
//                @g := ( @z - @l ) as e , 
//                @m := @l %20 as h, 
//                @q := ( @l - @m ) as n,
//                (@x + @k + @g + @q) AS gift_card_can_used,
//                @shot_status := if(@balance_shot > 0,1,0)as shot_status,
//                @card_status := if(@gc_avail > 0,1,0) as card_status,
//                @dp_status := if(@dp_amount > 0,1,0) as dp_status,
//                @momosy_status := if(@mom_amount > 0,1,0) as momosy_status,
//                if((@shot_status OR @card_status OR @dp_status OR @momosy_status) = 1 , 1,0) as credit_status,
//                if(@x + @k + @g + @q + @balance_shot/1000000 + @gc_avail/1000000 + @dp_amount/1000000 + @mom_amount/1000000  > 0,@x + @k + @g + @q + @balance_shot/1000000 + @gc_avail/1000000 + @dp_amount/1000000 + @mom_amount/1000000,0) as credit_available
//                FROM Store s
//                INNER JOIN UserToStore co ON s.id = co.store_id and co.role = 15
//                LEFT JOIN StoreMedia sm ON s.store_image = sm.id 
//                LEFT JOIN (SELECT * FROM UserShopCredit x WHERE x.user_id =" . $user_id . ") u ON s.id = u.shop_id
//                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
//                LEFT JOIN ShopFollowers as follower on (s.id = follower.shop_id and follower.user_id = $user_id)
//                LEFT JOIN UserDiscountPosition ud ON ud.user_id = $user_id $condition) as temptable order by $orderby_condition $limit_condition";
        $sql = "select * from (SELECT (@store_id := s.id) as id, 
                s.email as email, 
                s.description as description, 
                s.parent_store_id as parentStoreId, 
                s.phone as phone, 
                s.business_name as businessName, 
                s.legal_status as legalStatus, 
                s.business_type as businessType, 
                s.business_country as businessCountry, 
                s.business_region as businessRegion, 
                s.business_city as businessCity, 
                s.business_address as businessAddress, 
                s.zip as zip, 
                s.province as province, 
                s.vat_number as vatNumber, 
                s.iban as iban, 
                s.map_place as mapPlace,
                CAST(s.latitude AS DECIMAL(10,6)) as latitude,
                CAST(s.longitude AS DECIMAL(10,6)) as longitude, 
                s.store_image as storeImage, 
                s.is_allowed as isAllowed, 
                s.is_active as isActive, 
                s.created_at as createdAt, 
                co.user_id as userId, 
                co.role as role, 
                s.payment_status as paymentStatus, 
                s.name as name, 
                s.shop_status as shopStatus, 
                s.avg_rate as shopRating,
                s.vote_count as voteCount,
                s.sale_catid as catogory_id,
                s.sale_subcatid as sub_category_id,
                s.credit_card_status as creditCardStatus,
                s.shop_keyword as shopKeywords,
                if((@owner_first_name := (select firstname from fos_user_user where id = co.user_id)) IS NULL,'',@owner_first_name) as ownerFirstName,
                if((@owner_last_name := (select lastname from fos_user_user where id = co.user_id)) IS NULL,'',@owner_last_name) as ownerLastName,
                0 as citizen_income,
                $distance as distance,
                if($user_id = fav.user_id, 1, 0) as is_fav,
                if($user_id = follower.user_id, 1, 0) as is_following,
                (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '$language_code') as shop_category,
                (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '$language_code') as shop_sub_category,         
                @image_name := sm.image_name as image_name, 
                @album_id := sm.album_id as album_id,
                if(@album_id IS NULL,if(bc.image_thumb is NULL ,'',bc.image_thumb),if(@album_id > 0, 
                concat(concat(concat(concat(concat('" . $image_path . "', @store_id),'/thumb/'),@album_id),'/'),@image_name),
                concat(concat(concat('" . $image_path . "', @store_id),'/thumb/'),@image_name))) as profile_image_thumb,

                if(@album_id IS NULL,if(bc.image is NULL ,'',bc.image),if(@album_id > 0, 
                concat(concat(concat(concat(concat('" . $image_path . "', @store_id),'/original/'),@album_id),'/'),@image_name),
                concat(concat(concat('" . $image_path . "', @store_id),'/original/'),@image_name))) as profile_image_original,
                0 as balance_shot, 0 as available_gc, 0 as balance_momosy_card, 0 as user_balance_dp, 0 as min_dp, 
                0 AS gift_card_can_used,
                0 as shot_status,
                0 as card_status,
                0 as dp_status,
                0 as momosy_status,
                0 as credit_status,
                0 as credit_available,
                s.new_contract_status as new_contract_status
                FROM Store s
                INNER JOIN UserToStore co ON s.id = co.store_id and co.role = 15
                LEFT JOIN StoreMedia sm ON s.store_image = sm.id 
                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
                left join  BusinessCategory as bc on s.sale_catid = bc.id
                LEFT JOIN ShopFollowers as follower on (s.id = follower.shop_id and follower.user_id = $user_id)
                $condition) as temptable order by $orderby_condition $limit_condition";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute($param);
        $result = $stmt->fetchAll();
        return $result;
    }

    /**
     *  function for getting the store f or the applied filters 
     * @param type $user_id
     * @param type $search_text
     * @param type $search_city
     * @param type $category
     * @param type $favourite
     * @param type $lat_long
     * @param type $radius
     * @param type $sort_type
     * @param type $limits
     * @param type $citizen_income
     * @param type $bucket_path
     * @param type $store_type
     * @return type
     */
    public function getFilterStoreWithOffer($user_id, $search_text, $search_city, $category, $lat_long, $radius, $sort_type, $limits, $citizen_income, $bucket_path, $store_type, $language_code, $favorite_shop) {
        $image_path = $bucket_path . $this->store_media_path;
        $search_text = addslashes($search_text);
        $search_city = addslashes($search_city);
        $condition = "where s.is_active = 1";
        $param = array();
        $offerCond = 'o.is_active=1 AND o.is_deleted=0 AND s.is_active=1 ';
        $offerSelect = false;
        //check if request is for only user store
        if ($store_type == 2) {
            $condition = $condition . ' and ' . 'co.user_id =' . $user_id;
        } elseif ($store_type == 1) {
            $condition = $condition . ' and ' . 'co.role =15 and s.shop_status =1';
            $offerSelect = true;
        }
        $orderby_condition = '';
        //check for the city search
        if ($search_city != '') {
            $condition = $condition . ' and ' . "s.business_city like :search_city";
            $param['search_city'] = "%$search_city%";
        }
        //check for the search text
        if ($search_text != '') {
            $condition = $condition . ' and ' . "(s.business_name like :search_text OR FIND_IN_SET( :search_text, shop_keyword ) OR s.name like :search_text OR (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '$language_code') like :search_text OR (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '$language_code') like :search_text)";
            $param['search_text'] = "%$search_text%";
            $offerCond .= " AND o.name like :search_text ";
        }
        //check for category
        if (count($category) > 0) {
            $categories = implode(',', $category);
            $condition = $condition . " and s.sale_catid in ($categories)";
        }

        //check for favourite
        if ($favorite_shop == 1) {
            //$favourite = implode(',', $favourite);
            $condition = $condition . " and s.id = fav.store_id and fav.user_id = $user_id";
            $offerSelect = false;
        }
        //check for category
        $distance = 0;
        //check for lat long
        if (count($lat_long) == 2) {
            $latitute = $lat_long[0];
            $longitude = $lat_long[1];
            $distance = "(6371 * acos(cos( radians( $latitute ) ) * cos( radians( s.latitude ) ) * cos( radians( s.longitude ) - radians( $longitude )) + sin(radians( $latitute)) * sin(radians(s.latitude))))";
            $condition = $condition . " having distance <= $radius";
        }

        //getting the order by condition 
        if ($sort_type == 1) {
            $orderby_condition = "shopRating DESC,voteCount DESC";
        } elseif ($sort_type == 2) {
            $orderby_condition = "credit_available DESC";
        } else {
            $orderby_condition = "distance ASC";
        }

        //setting limit 
        $limit_condition = "";
        if (isset($limits['limit_size']) && isset($limits['limit_start'])) {
            $limit_size = $limits['limit_size'];
            $limit_start = $limits['limit_start'];
            $limit_condition = "limit $limit_size offset $limit_start";
        }

        $offerTable = $this->getEntityManager()->getClassMetadata('SixthContinentConnectBundle:Offer')->getTableName();
        $storeTable = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();

        $sql = "select * from ( ";
        if ($offerSelect === true) {
            $sql .= " (  SELECT 
                o.id as id, 
                '' as email, 
                o.description as description,
                 0 as parentStoreId, 
                 '' as phone, 
                 '' as businessName, 
                 '' as legalStatus, 
                 '' as businesstype, 
                 '' as businessCountry, 
                 '' as businessRegion, 
                 '' as businessCity, 
                 '' as businessAddress, 
                 '' as zip, 
                 '' as province, 
                 '' as vatNumber, 
                 '' as iban, 
                 '' as mapPlace,
                 CAST('' AS DECIMAL(10,6)) as latitude,
                CAST('' AS DECIMAL(10,6)) as longitude,  
                 '' as storeImage, 
                 1 as isAllowed, 
                 1 as isActive, 
                 '' as createdAt, 
                 '' as userId, 
                 '' as role, 
                 '' as paymentStatus, 
                 o.name as name, 
                 1 as shopStatus, 
                 0 as shopRating, 
                 0 as voteCount, 
                 '' as catogory_id, 
                 '' as sub_category_id, 
                 0 as creditCardStatus, 
                 0 as citizenAffCharge,
                 0 as shopAffCharge,
                 0 as friendsFollowerCharge,
                 0 as buyerCharge,
                 0 as sixcCharge,
                 0 as allCountryCharge,

                 '' as shopKeywords,
                 '' as ownerFirstName,
                '' as ownerLastName,
                 0 as citizen_income, 
                 0 as distance,
                 0 as is_fav, 
                 0 as is_following,

                 CONVERT(o.category  USING utf8) as shop_category, 
                 CONVERT(''  USING utf8) as shop_sub_category, 
                 CONVERT(if(TRIM(IFNULL(o.image,''))!='', o.image, '')  USING utf8)  as image_name, 
                 '' as album_id, 
                 CONVERT(if(TRIM(IFNULL(o.imagethumb,''))!='', o.imagethumb, '')  USING utf8) as profile_image_thumb, 
                 CONVERT(if(TRIM(IFNULL(o.image,''))!='', o.image, '')  USING utf8) as profile_image_original, 
                 0 as balance_shot, 
                 0 as available_gc, 
                 0 as balance_momosy_card, 
                 0 as user_balance_dp, 
                 0 as min_dp, 
                 0 AS gift_card_can_used,
                 0 as shot_status,
                0 as card_status,
                0 as dp_status,
                0 as momosy_status,
                0 as credit_status,
                0 as credit_available, 
                 '' as new_contract_status, 
                 'offer' as type, 
                 ROUND(if(o.price<=0, 0, o.price)/100, 2) as price  
                 FROM $offerTable o INNER JOIN  $storeTable s ON(o.shop_id=s.id)  WHERE $offerCond ) "
                    . " UNION ";
        }

        $sql .= "   (SELECT (@store_id := s.id) as id, 
                s.email as email, 
                s.description as description, 
                s.parent_store_id as parentStoreId, 
                s.phone as phone, 
                s.business_name as businessName, 
                s.legal_status as legalStatus, 
                s.business_type as businessType, 
                s.business_country as businessCountry, 
                s.business_region as businessRegion, 
                s.business_city as businessCity, 
                s.business_address as businessAddress, 
                s.zip as zip, 
                s.province as province, 
                s.vat_number as vatNumber, 
                s.iban as iban, 
                s.map_place as mapPlace,
                CAST(s.latitude AS DECIMAL(10,6)) as latitude,
                CAST(s.longitude AS DECIMAL(10,6)) as longitude, 
                s.store_image as storeImage, 
                s.is_allowed as isAllowed, 
                s.is_active as isActive, 
                s.created_at as createdAt, 
                co.user_id as userId, 
                co.role as role, 
                s.payment_status as paymentStatus, 
                s.name as name, 
                s.shop_status as shopStatus, 
                s.avg_rate as shopRating,
                s.vote_count as voteCount,
                s.sale_catid as catogory_id,
                s.sale_subcatid as sub_category_id,
                s.credit_card_status as creditCardStatus,
             
                s.citizen_aff_charge as citizenAffCharge,
                s.shop_aff_charge as shopAffCharge,
                s.friends_follower_charge as friendsFollowerCharge,
                s.buyer_charge as buyerCharge,
                s.sixc_charge as sixcCharge,
                s.all_country_charge as allCountryCharge,
            
                s.shop_keyword as shopKeywords,
                if((@owner_first_name := (select firstname from fos_user_user where id = co.user_id)) IS NULL,'',@owner_first_name) as ownerFirstName,
                if((@owner_last_name := (select lastname from fos_user_user where id = co.user_id)) IS NULL,'',@owner_last_name) as ownerLastName,
                0 as citizen_income,
                $distance as distance,
                if($user_id = fav.user_id, 1, 0) as is_fav,
                if($user_id = follower.user_id, 1, 0) as is_following,
                CONVERT((select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '$language_code')  USING utf8) as shop_category,
                CONVERT((select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '$language_code')  USING utf8) as shop_sub_category,         
                CONVERT(@image_name := sm.image_name  USING utf8) as image_name, 
                @album_id := sm.album_id as album_id,
                CONVERT(if(@album_id IS NULL,if(bc.image_thumb is NULL ,'',bc.image_thumb),if(@album_id > 0, 
                concat(concat(concat(concat(concat('" . $image_path . "', @store_id),'/thumb/'),@album_id),'/'),@image_name),
                concat(concat(concat('" . $image_path . "', @store_id),'/thumb/'),@image_name))) USING utf8) as profile_image_thumb,

                CONVERT(if(@album_id IS NULL,if(bc.image is NULL ,'',bc.image),if(@album_id > 0, 
                concat(concat(concat(concat(concat('" . $image_path . "', @store_id),'/original/'),@album_id),'/'),@image_name),
                concat(concat(concat('" . $image_path . "', @store_id),'/original/'),@image_name))) USING utf8) as profile_image_original,
                0 as balance_shot, 0 as available_gc, 0 as balance_momosy_card, 0 as user_balance_dp, 0 as min_dp, 
                0 AS gift_card_can_used,
                0 as shot_status,
                0 as card_status,
                0 as dp_status,
                0 as momosy_status,
                0 as credit_status,
                0 as credit_available,
                s.new_contract_status as new_contract_status,
                '' as type, 
                 '' as price 
                FROM Store s
                INNER JOIN UserToStore co ON s.id = co.store_id and co.role = 15
                LEFT JOIN StoreMedia sm ON s.store_image = sm.id 
                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
                left join  BusinessCategory as bc on s.sale_catid = bc.id
                LEFT JOIN ShopFollowers as follower on (s.id = follower.shop_id and follower.user_id = $user_id)
                $condition) ) as temptable order by $orderby_condition $limit_condition";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        if (!empty($param)) {
            foreach ($param as $prm => $prmVal) {
                $stmt->bindValue($prm, $prmVal);
            }
        }
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;
    }

    /**
     *  function for calculating the total number of stores for the applied filter
     * @param type $user_id
     * @param type $search_text
     * @param type $search_city
     * @param type $category
     * @param type $favourite
     * @param type $lat_long
     * @param type $radius
     * @param type $sort_type
     * @param type $limits
     * @param type $citizen_income
     * @param type $bucket_path
     * @param type $store_type
     * @return type
     */
    public function getFilterStoresCount($user_id, $search_text, $search_city, $category, $lat_long, $radius, $sort_type, $limits, $citizen_income, $bucket_path, $store_type, $language_code, $favorite_shop) {
        //initilizing the store count to 0
        $search_text = addslashes($search_text);
        $search_city = addslashes($search_city);
        $store_count = 0;
        $param = array();
        //defining global condition
        $condition = "where s.is_active = 1";

        //check if request is for only user store
        if ($store_type == 2) {
            $condition = $condition . ' and ' . 'co.user_id =' . $user_id;
        } elseif ($store_type == 1) {
            $condition = $condition . ' and ' . 'co.role =15 and s.shop_status =1';
        }
        //check for the city search
        if ($search_city != '') {
            $condition = $condition . ' and ' . "s.business_city like :search_city";
            $param['search_city'] = "%$search_city%";
        }
        //check for the search text
        if ($search_text != '') {
            $condition = $condition . ' and ' . "(s.business_name like :search_text OR FIND_IN_SET( :search_text, shop_keyword ) OR s.name like :search_text OR (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '$language_code') like :search_text OR (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '$language_code') like :search_text)";
            $param['search_text'] = "%$search_text%";
        }
        //check for category
        if (count($category) > 0) {
            $categories = implode(',', $category);
            $condition = $condition . " and s.sale_catid in ($categories)";
        }

        //check for favourite
        if ($favorite_shop == 1) {
            //$favourite = implode(',', $favourite);
            $condition = $condition . " and s.id = fav.store_id and fav.user_id = $user_id";
        }
        //check for category
        $distance = 0;
        //check for lat long
        if (count($lat_long) == 2) {
            $latitute = $lat_long[0];
            $longitude = $lat_long[1];
            $distance = "(6371 * acos(cos( radians( $latitute ) ) * cos( radians( s.latitude ) ) * cos( radians( s.longitude ) - radians( $longitude )) + sin(radians( $latitute)) * sin(radians(s.latitude))))";
            $condition = $condition . " having distance <= $radius";
        }

        $sql = "select count(*) as store_count from (SELECT (@store_id := s.id) as id, 
                s.email as email, 
                s.description as description, 
                s.parent_store_id as parentStoreId, 
                s.phone as phone, 
                s.business_name as businessName, 
                s.legal_status as legalStatus, 
                s.business_type as businessType, 
                s.business_country as businessCountry, 
                s.business_region as businessRegion, 
                s.business_city as businessCity, 
                s.business_address as businessAddress, 
                s.zip as zip, 
                s.province as province, 
                s.vat_number as vatNumber, 
                s.iban as iban, 
                s.map_place as mapPlace, 
                s.latitude as latitude, 
                s.longitude as longitude, 
                s.store_image as storeImage, 
                s.is_allowed as isAllowed, 
                s.is_active as isActive, 
                s.created_at as createdAt, 
                co.user_id as userId, 
                co.role as role, 
                s.payment_status as paymentStatus, 
                s.name as name, 
                s.shop_status as shopStatus, 
                s.avg_rate as shopRating,
                s.vote_count as voteCount,
                s.sale_catid as catogory_id,
                s.sale_subcatid as sub_category_id,
                s.credit_card_status as creditCardStatus,
                s.citizen_aff_charge as citizenAffCharge,
                s.shop_aff_charge as shopAffCharge,
                s.friends_follower_charge as friendsFollowerCharge,
                s.buyer_charge as buyerCharge,
                s.sixc_charge as sixcCharge,
                s.all_country_charge as allCountryCharge,
            
                $distance as distance
                FROM Store s
                INNER JOIN UserToStore co ON s.id = co.store_id and co.role = 15
                LEFT JOIN StoreMedia sm ON s.store_image = sm.id 
                LEFT JOIN (SELECT * FROM UserShopCredit x WHERE x.user_id =" . $user_id . ") u ON s.id = u.shop_id
                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
                LEFT JOIN UserDiscountPosition ud ON ud.user_id = $user_id $condition) as temptable ";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute($param);
        $count = $stmt->fetchAll();
        if (count($count) > 0) {
            $store_count = $count[0]['store_count'];
        }
        return $store_count;
    }

    /**
     *  function for calculating the total number of stores for the applied filter
     * @param type $user_id
     * @param type $search_text
     * @param type $search_city
     * @param type $category
     * @param type $favourite
     * @param type $lat_long
     * @param type $radius
     * @param type $sort_type
     * @param type $limits
     * @param type $citizen_income
     * @param type $bucket_path
     * @param type $store_type
     * @return type
     */
    public function getFilterStoresWithOfferCount($user_id, $search_text, $search_city, $category, $lat_long, $radius, $sort_type, $limits, $citizen_income, $bucket_path, $store_type, $language_code, $favorite_shop) {
        //initilizing the store count to 0
        $search_text = addslashes($search_text);
        $search_city = addslashes($search_city);
        $store_count = 0;
        $param = array();
        $offerCond = 'o.is_active=1 AND o.is_deleted=0 AND s.is_active=1';
        $offerSelect = false;
        //defining global condition
        $condition = "where s.is_active = 1";

        //check if request is for only user store
        if ($store_type == 2) {
            $condition = $condition . ' and ' . 'co.user_id =' . $user_id;
        } elseif ($store_type == 1) {
            $condition = $condition . ' and ' . 'co.role =15 and s.shop_status =1';
            $offerSelect = true;
        }
        //check for the city search
        if ($search_city != '') {
            $condition = $condition . ' and ' . "s.business_city like :search_city";
            $param['search_city'] = "%$search_city%";
        }
        //check for the search text
        if ($search_text != '') {
            $condition = $condition . ' and ' . "(s.business_name like :search_text OR FIND_IN_SET( :search_text, shop_keyword ) OR s.name like :search_text OR (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '$language_code') like :search_text OR (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '$language_code') like :search_text)";
            $param['search_text'] = "%$search_text%";
            $offerCond .= " AND o.name like :search_text ";
        }
        //check for category
        if (count($category) > 0) {
            $categories = implode(',', $category);
            $condition = $condition . " and s.sale_catid in ($categories)";
        }

        //check for favourite
        if ($favorite_shop == 1) {
            //$favourite = implode(',', $favourite);
            $condition = $condition . " and s.id = fav.store_id and fav.user_id = $user_id";
            $offerSelect = false;
        }
        //check for category
        $distance = 0;
        //check for lat long
        if (count($lat_long) == 2) {
            $latitute = $lat_long[0];
            $longitude = $lat_long[1];
            $distance = "(6371 * acos(cos( radians( $latitute ) ) * cos( radians( s.latitude ) ) * cos( radians( s.longitude ) - radians( $longitude )) + sin(radians( $latitute)) * sin(radians(s.latitude))))";
            $condition = $condition . " having distance <= $radius";
        }
        $offerTable = $this->getEntityManager()->getClassMetadata('SixthContinentConnectBundle:Offer')->getTableName();
        $storeTable = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();
        $sql = "select sum(records) as total_records  from ((SELECT count(s.id) as records, $distance as distance 
                FROM Store s
                INNER JOIN UserToStore co ON s.id = co.store_id and co.role = 15
                LEFT JOIN StoreMedia sm ON s.store_image = sm.id 
                LEFT JOIN (SELECT * FROM UserShopCredit x WHERE x.user_id =" . $user_id . ") u ON s.id = u.shop_id
                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
                LEFT JOIN UserDiscountPosition ud ON ud.user_id = $user_id $condition)";
        if ($offerSelect === true) {
            $sql .= " UNION ALL "
                    . " (  SELECT 
                count(o.id) as records, 0 as distance
                 FROM $offerTable o INNER JOIN  $storeTable s ON(o.shop_id=s.id)  WHERE $offerCond)";
        }
        $sql .= " ) t";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        if (!empty($param)) {
            foreach ($param as $prm => $prmVal) {
                $stmt->bindValue($prm, $prmVal);
            }
        }
        $stmt->execute();
        $count = $stmt->fetchAll();
        if (count($count) > 0) {
            $store_count = $count[0]['total_records'];
        }
        return $store_count;
    }

    /**
     * function for getting the store details
     * @param type $user_id
     * @param type $store_id
     * @param type $citizen_income
     * @param type $bucket_path
     */
    public function getStoreDetails($user_id, $store_id, $citizen_income, $bucket_path) {
        //making the base path for the 
        $image_path = $bucket_path . $this->store_media_path;
//        $sql = "SELECT (@store_id := s.id) as id, 
//                s.email as email, 
//                s.description as description,  
//                s.phone as phone, 
//                s.name as name, 
//                s.business_name as businessName, 
//                s.business_type as businessType, 
//                s.business_city as businessCity,
//                s.business_country as businessCountry, 
//                s.business_region as businessRegion,                  
//                s.business_address as businessAddress, 
//                s.zip as zip, 
//                s.province as province, 
//                s.map_place as mapPlace, 
//                CAST(s.latitude AS DECIMAL(10,6)) as latitude,
//                CAST(s.longitude AS DECIMAL(10,6)) as longitude,
//                s.store_image as storeImage, 
//                s.created_at as createdAt, 
//                co.user_id as userId,
//                @citizen_income := $citizen_income as citizen_income,
//                s.avg_rate as shopRating,
//                s.vote_count as voteCount,
//                s.sale_catid as catogory_id,
//                s.payment_status as paymentStatus,
//                s.credit_card_status as creditCardStatus,
//                s.shop_status as shopStatus,
//                s.is_active as isActive,
//                s.sale_subcatid as sub_category_id,
//                if($user_id = fav.user_id, 1, 0) as is_fav,
//                if($user_id = follower.user_id, 1, 0) as is_following,
//                if((@owner_first_name := (select firstname from fos_user_user where id = co.user_id)) IS NULL,'',@owner_first_name) as ownerFirstName,
//                if((@owner_last_name := (select lastname from fos_user_user where id = co.user_id)) IS NULL,'',@owner_last_name) as ownerLastName,
//                (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = 'it') as shop_category,
//                (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = 'it') as shop_sub_category,         
//                @image_name := sm.image_name as image_name, 
//                @album_id := sm.album_id as album_id,
//                if(@album_id IS NULL,'',if(@album_id > 0, 
//                concat(concat(concat(concat(concat('".$image_path."', @store_id),'/thumb/'),@album_id),'/'),@image_name),
//                concat(concat(concat('".$image_path."', @store_id),'/thumb/'),@image_name))) as profile_image_thumb,
//
//                if(@album_id IS NULL,'',if(@album_id > 0, 
//                concat(concat(concat(concat(concat('".$image_path."', @store_id),'/original/'),@album_id),'/'),@image_name),
//                concat(concat(concat('".$image_path."', @store_id),'/original/'),@image_name))) as profile_image_original,
//                @balance_shot:= if(u.balance_shots > 0,u.balance_shots/1000000,0)  as balance_shot, @gc_avail := if(u.balance_gift_card > 0,u.balance_gift_card/1000000,0) as balance_gc, @mom_amount := if(u.balance_momosy_card > 0,u.balance_momosy_card/1000000,0)  as balance_momosy_card, if(ud.balance_dp > 0 ,ud.balance_dp/1000000,0) as user_balance_dp, s.balance_dp, @dp_amount := least( if(ud.balance_dp > 0, ud.balance_dp , 0), if(s.balance_dp > 0, s.balance_dp , 0))/1000000 as dp_can_use, 
//                @y := ( @citizen_income/1000000 ) %100 as f, 
//                @x := ( (@citizen_income/1000000) - @y ) as a , 
//                @z := @y %50 as b, @k := ( @y - @z ) as c , 
//                @l := @z %30 as d, 
//                @g := ( @z - @l ) as e , 
//                @m := @l %20 as h, 
//                @q := ( @l - @m ) as n,
//                (@x + @k + @g + @q) AS gift_card_can_used,
//                if(@x + @k + @g + @q + @balance_shot + @gc_avail + @dp_amount + @mom_amount  > 0,@x + @k + @g + @q + @balance_shot + @gc_avail + @dp_amount + @mom_amount,0) as credit_available
//                FROM Store s
//                INNER JOIN UserToStore co ON s.id = co.store_id and co.role = 15
//                LEFT JOIN StoreMedia sm ON s.store_image = sm.id 
//                LEFT JOIN (SELECT * FROM UserShopCredit x WHERE x.user_id =" . $user_id . " and x.shop_id = ".$store_id.") u ON s.id = u.shop_id
//                LEFT JOIN ShopFollowers as follower on (s.id = follower.shop_id and follower.user_id = $user_id)
//                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
//                LEFT JOIN UserDiscountPosition ud ON ud.user_id = $user_id where s.id = $store_id and co.role = 15 and s.is_active= 1 ";
        $sql = "SELECT (@store_id := s.id) as id, 
                s.email as email, 
                s.description as description,  
                s.phone as phone, 
                s.name as name, 
                s.business_name as businessName, 
                s.business_type as businessType, 
                s.business_city as businessCity,
                s.business_country as businessCountry, 
                s.business_region as businessRegion,                  
                s.business_address as businessAddress, 
                s.zip as zip, 
                s.province as province, 
                s.map_place as mapPlace, 
                CAST(s.latitude AS DECIMAL(10,6)) as latitude,
                CAST(s.longitude AS DECIMAL(10,6)) as longitude,
                s.store_image as storeImage, 
                s.created_at as createdAt, 
                co.user_id as userId,
                0 as citizen_income,
                s.avg_rate as shopRating,
                s.vote_count as voteCount,
                s.sale_catid as catogory_id,
                s.payment_status as paymentStatus,
                s.credit_card_status as creditCardStatus,
                s.shop_status as shopStatus,
                s.is_active as isActive,
                s.sale_subcatid as sub_category_id,
                if($user_id = fav.user_id, 1, 0) as is_fav,
                if($user_id = follower.user_id, 1, 0) as is_following,
                if((@owner_first_name := (select firstname from fos_user_user where id = co.user_id)) IS NULL,'',@owner_first_name) as ownerFirstName,
                if((@owner_last_name := (select lastname from fos_user_user where id = co.user_id)) IS NULL,'',@owner_last_name) as ownerLastName,
                (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = 'it') as shop_category,
                (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = 'it') as shop_sub_category,         
                @image_name := sm.image_name as image_name, 
                @album_id := sm.album_id as album_id,
                if(@album_id IS NULL,if(bc.image_thumb is NULL ,'',bc.image_thumb),if(@album_id > 0, 
                concat(concat(concat(concat(concat('" . $image_path . "', @store_id),'/thumb/'),@album_id),'/'),@image_name),
                concat(concat(concat('" . $image_path . "', @store_id),'/thumb/'),@image_name))) as profile_image_thumb,

                if(@album_id IS NULL,if(bc.image is NULL ,'',bc.image),if(@album_id > 0, 
                concat(concat(concat(concat(concat('" . $image_path . "', @store_id),'/original/'),@album_id),'/'),@image_name),
                concat(concat(concat('" . $image_path . "', @store_id),'/original/'),@image_name))) as profile_image_original,
                0 as balance_shot, 0 as balance_gc, 0 as balance_momosy_card, 0 as user_balance_dp, 0 as dp_can_use, 
                0 AS gift_card_can_used,
                0 as credit_available,
                s.new_contract_status as new_contract_status, 
                s.affiliation_status as affiliation_status 
                FROM Store s
                INNER JOIN UserToStore co ON s.id = co.store_id and co.role = 15
                LEFT JOIN StoreMedia sm ON s.store_image = sm.id 
                LEFT JOIN (SELECT * FROM UserShopCredit x WHERE x.user_id =" . $user_id . " and x.shop_id = " . $store_id . ") u ON s.id = u.shop_id
                LEFT JOIN ShopFollowers as follower on (s.id = follower.shop_id and follower.user_id = $user_id)
                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
                left join  BusinessCategory as bc on s.sale_catid = bc.id
                LEFT JOIN UserDiscountPosition ud ON ud.user_id = $user_id where s.id = $store_id and co.role = 15 and s.is_active= 1 ";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetch();
        return $result;
    }

    /**
     * Search all stores
     * @param string $searchstring
     * @param int $offset
     * @param int $limit
     * @return object array
     */
    public function searchallStores($searchstring, $offset, $limit, $aws_bucket) {
        $searchstring = addslashes($searchstring);
        $image_path = $aws_bucket . $this->image_path;
        //die;
        $store_table = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();
        $trimsearchName = str_replace(' ', '', $searchstring);
        $sql = "SELECT @store_id := t2.id as id,
                   t2.name,
                   t2.business_name,
                   ' ' as firstname,
                   ' ' as last_name,
                   ' ' as email,
                   t2.shop_status as status,
                   @store_album_id := sm.album_id as album_id,
                   @image_name := sm.image_name as profile_image,
                   if(@store_album_id IS NULL, if(bc.image_thumb is NULL ,cast('' as CHAR CHARACTER SET utf8),cast(bc.image_thumb as CHAR CHARACTER SET utf8)) ,if(@store_album_id > 0, 
                   concat(cast('https://s3.amazonaws.com/sixthcontinent/uploads/documents/stores/gallery/' as CHAR CHARACTER SET utf8), cast(@store_id as CHAR CHARACTER SET utf8),'/thumb/',cast(@store_album_id as CHAR CHARACTER SET utf8),'/',cast(@image_name as CHAR CHARACTER SET utf8)),
                   concat(cast('https://s3.amazonaws.com/sixthcontinent/uploads/documents/stores/gallery/' as CHAR CHARACTER SET utf8), cast(@store_id as CHAR CHARACTER SET utf8),'/thumb/',cast(@image_name as CHAR CHARACTER SET utf8)))) as thumb_path,
                   'S' as type
                   from " . $store_table . " as t2 "
                . " LEFT JOIN StoreMedia as sm on sm.id = t2.store_image"
                . " left join  BusinessCategory as bc on t2.sale_catid = bc.id"
                . " where (t2.name like :search_string or t2.business_name like :search_string) and t2.shop_status = 1 and t2.is_active = 1 limit $offset,$limit";
        $param['search_string'] = "%$searchstring%";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute($param);
        $result = $stmt->fetchAll();


        //$result = json_encode($result);
        return $result;
    }

    /*
     * get count of  all stores search
     * @param string $searchstring
     * @param int $offset
     * @param int $limit
     * @return object array
     */

    public function countallStoressearch($searchstring, $aws_bucket) {
        $searchstring = addslashes($searchstring);
        $image_path = $aws_bucket . $this->image_path;
        //die;
        $store_table = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();
        $trimsearchName = str_replace(' ', '', $searchstring);
        $sql = "SELECT @store_id := t2.id as id,
                   t2.name,
                   t2.business_name,
                   ' ' as firstname,
                   ' ' as last_name,
                   ' ' as email,
                   t2.shop_status as status,
                   @store_album_id := sm.album_id as album_id,
                   @image_name := sm.image_name as profile_image,
                   if(@store_album_id IS NULL, '' ,if(@store_album_id > 0, 
                   concat(cast('https://s3.amazonaws.com/sixthcontinent/uploads/documents/stores/gallery/' as CHAR CHARACTER SET utf8), cast(@store_id as CHAR CHARACTER SET utf8),'/thumb/',cast(@store_album_id as CHAR CHARACTER SET utf8),'/',cast(@image_name as CHAR CHARACTER SET utf8)),
                   concat(cast('https://s3.amazonaws.com/sixthcontinent/uploads/documents/stores/gallery/' as CHAR CHARACTER SET utf8), cast(@store_id as CHAR CHARACTER SET utf8),'/thumb/',cast(@image_name as CHAR CHARACTER SET utf8)))) as thumb_path,
                   'S' 
                   from " . $store_table . " as t2 "
                . " LEFT JOIN StoreMedia as sm on sm.id = t2.store_image"
                . " where (t2.name like :search_string or t2.business_name like :search_string) and t2.shop_status = 1 and t2.is_active = 1 ";
        $param['search_string'] = "%$searchstring%";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute($param);
        $result = $stmt->fetchAll();

        $res = count($result);

        //$result = json_encode($result);
        return $res;
    }

    /*
     * get Store details
     * @param int $user_id
     * @param int $store_id
     * @return object array
     */

    public function getStoreDetail($user_id, $store_id) {

        $sql = "SELECT s.*, if($user_id = fav.user_id, 1, 0) as is_fav, if($user_id = follower.user_id, 1, 0) as is_following   "
                . "FROM Store as s "
                . "left join Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id ) "
                . "left JOIN ShopFollowers as follower on (s.id = follower.shop_id and follower.user_id = $user_id)"
                . "where s.id = $store_id "
                . "and s.is_active = 1";

        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();

        return $result;
    }

    public function getFilterStoreondimension($longitude, $latitute, $radius, $limit_start, $limit_size) {

        $distance = "(6371 * acos(cos( radians( $latitute ) ) * cos( radians( s.latitude ) ) * cos( radians( s.longitude ) - radians( $longitude )) + sin(radians( $latitute)) * sin(radians(s.latitude))))";
        $limit_sql = '';
//            if($limit_size!='')
//            {
//                $limit_sql="limit $limit_size offset $limit_start";
//            }else{
//                $limit_sql='';
//            }
        $sql = "select id,$distance as distance from Store s where s.shop_status = 1 and s.is_active = 1 having distance <= $radius $limit_sql";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;
    }

    public function getcountStoreondimension($longitude, $latitute, $radius) {

        $distance = "(6371 * acos(cos( radians( $latitute ) ) * cos( radians( s.latitude ) ) * cos( radians( s.longitude ) - radians( $longitude )) + sin(radians( $latitute)) * sin(radians(s.latitude))))";

        $sql = "select id,$distance as distance from Store s where s.shop_status = 1 and s.is_active = 1 having distance <= $radius";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return count($result);
    }

    /**
     * Get all shop that have registration fee pending
     * @return array
     */
    public function getShopRegistrationFee() {
        $result = array();
        $qb = $this->createQueryBuilder('s');
        $qb->select('co.userId as store_owner, co.storeId, s.createdAt, s.paymentStatus')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 's.id = co.storeId')
                ->where('s.isActive =:isactive')
                ->andWhere('s.paymentStatus =:paymentstatus')
                ->andWhere('s.shopStatus =:shopstatus')
                ->setParameter('isactive', 1)
                ->setParameter('paymentstatus', 0)
                ->setParameter('shopstatus', 1);
        $query = $qb->getQuery();
        $result = $query->getResult();
        return $result;
    }

    /**
     * find users shops
     * @param int $user_id
     * $return array $result_res
     */
    public function getUserShops($user_id) {
        $shop_ids = array();
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.id')
                ->innerJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 'c.id = co.storeId')
                ->where('co.userId =:uid', 'co.role =:role')
                ->setParameter('uid', $user_id)
                ->setParameter('role', 15)
                ->getQuery();
        $result_res = $result->getResult();
        if (count($result_res)) {
            foreach ($result_res as $result)
                $shop_ids[] = $result['id'];
        }
        return $shop_ids;
    }

    public function getCategoryNamesByIds($lang_code, array $cat_ids) {
        echo "hello";
        echo $_cat_ids = implode("',", $cat_ids);
        exit;
        $_cat_ids = "'" . $_cat_ids . "'";
        //object of query builder.
        $qb = $this->_em->createQueryBuilder('cat');
        $query = $qb->select('cat.id, code.categoryName as category_name, cat.image, cat.image_thumb')
                ->from('UserManagerSonataUserBundle:BusinessCategory', 'cat')
                ->innerJoin('UserManagerSonataUserBundle:BusinessCategoryCode', 'code', 'WITH', 'code.categoryCode = cat.name')
                ->where('code.langCode =:langCode', 'cat.id IN (:catId)')
                ->setParameter('langCode', $lang_code)
                ->setParameter('catId', $_cat_ids)
                ->getQuery();
        $response = $query->getResult();

        return $response;
    }

    /**
     * Update waiver subscription
     * @param array $shop_ids
     * @return boolean
     */
    public function updateWaiverSubscription($shop_ids) {
        //create the query 
        $qb = $this->createQueryBuilder('s');
        $query = $qb->update()
                ->set('s.isSubscribed', ':status')
                ->where(
                        $qb->expr()->In('s.id', ':s_id')
                )
                ->setParameter('status', 1)
                ->setParameter('s_id', $shop_ids)
                ->getQuery();
        $response = $query->getResult();
        return true;
    }

    /**
     * Update waiver registration
     * @param array $shop_ids
     * @return boolean
     */
    public function updateWaiverRegistration($shop_ids) {
        //create the query 
        $qb = $this->createQueryBuilder('s');
        $query = $qb->update()
                ->set('s.paymentStatus', ':status')
                ->where(
                        $qb->expr()->In('s.id', ':s_id')
                )
                ->setParameter('status', 1)
                ->setParameter('s_id', $shop_ids)
                ->getQuery();
        $response = $query->getResult();
        return true;
    }

    /**
     * Get all shops
     * @param type $offset
     * @param type $limit
     * @return type
     */
    public function getRegistredShops($offset, $limit) {
        $result_res = array();
        $qb = $this->createQueryBuilder('c');
        $query = $qb->select('c.id')
                ->setFirstResult($offset)
                ->setMaxResults($limit)
                ->getQuery();
        $result_res = $query->getResult();
        if ($result_res) {
            return $result_res;
        }
        return $result_res;
    }

    /**
     * Get all shops
     * @param type $offset
     * @param type $limit
     * @return type
     */
    public function getRegistredShopsProfile($offset, $limit) {

        $result_res = array();
        $qb = $this->createQueryBuilder('c');
        //$query = $qb->select('c.id, c.saleCatid, c.saleCountry, co.userId, c.businessAddress, c.salePhoneNumber, c.name, c.creditCardStatus, c.mapPlace, c.isActive, c.saleRegion, c.saleProvince')
        $query = $qb->select('c.id, c.saleCatid as category_id, c.saleCountry as country, co.userId as shopowner_id, c.businessAddress as address_l1, c.salePhoneNumber as mobile_no, c.name as name, c.creditCardStatus as credit_card_added, c.mapPlace as address_l2, c.isActive as is_shop_deleted, c.saleRegion as region, c.saleProvince as province, c.saleZip as zip, c.saleAddress as street_address, c.saleEmail as email_address, c.latitude as latitude, c.longitude as longitude, c.saleSubcatid as subcategory_id, c.storeImage')
                ->leftJoin('StoreManagerStoreBundle:UserToStore', 'co', 'WITH', 'c.id = co.storeId')
                ->setFirstResult($offset)
                ->setMaxResults($limit)
                ->getQuery();
        $result_res = $query->getResult();
        if ($result_res) {
            return $result_res;
        }
        return $result_res;
    }

    /**
     * getting the shop profile info for data exporting
     * @return array
     */
    public function getAllStoreProfile() {
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $query = $qb->select()
                ->where('c.newContractStatus =:contract')
                ->setParameter('contract', 1)
                ->getQuery();
        $response = $query->getResult();
        return $response;
    }

    // Get all stores using new services 

    /**
     * funciton for getting the get map store list
     * @param type $user_id
     * @param int $citizen_income
     * @return Array array of all the stores and relevent data for the store 
     */
    public function getAllMapStoreOptimizeRest($user_id, $citizen_income = null, $bucket_path, $language_code = 'it') {
        $image_path = $bucket_path . $this->store_media_path;
        $posTable = $this->getEntityManager()->getClassMetadata('SixthContinentConnectBundle:OfferPointofSale')->getTableName();
        $offerTable = $this->getEntityManager()->getClassMetadata('SixthContinentConnectBundle:Offer')->getTableName();
        $storeTable = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();
        $sql = "SELECT * from (";
        $sql .= "("
                . "  SELECT o.id as id, "
                . "0 as parentstoreid, "
                . "'' as businessname, "
                . "'' as businesstype, "
                . "1 as isallowed, "
                . "'' as paymentstatus, "
                . "o.name as name, "
                . "p.latitude as latitude, "
                . "p.longitude as longitude, "
                . "'' as email, "
                . "o.description as description, "
                . "'' as phone, "
                . "'' as legalstatus, "
                . "p.region as businessregion, "
                . "p.place as businesscity, "
                . "p.address as businessaddress, "
                . "p.zip as zip, "
                . "p.province as province, "
                . "'' as vatnumber, "
                . "'' as iban, "
                . "CONCAT(p.address, ', ', p.place, ' (', p.province, ')') as mapplace, "
                . "'' as storeimage, "
                . "1 as isactive, "
                . "1 as shop_status, "
                . "5 as shop_rating, "
                . "0 as vote_count, "
                . "'' as catogory_id, "
                . "'' as sub_category_id, "
                . "'' as new_contract_status, "
                . "CONVERT(o.category USING utf8) as shop_category, "
                . "CONVERT('' USING utf8) as shop_sub_category, "
                . "'' as shop_keyword, "
                . "0 as citizen_income, "
                . "o.shop_id as store_id, "
                . "CONVERT(if(TRIM(IFNULL(o.image,''))!='', o.image, '') USING utf8) as image_name, "
                . "'' as album_id, "
                . "'' as user_id, "
                . "0 as balance_shot, "
                . "0 as available_gc, "
                . "0 as balance_momosy_card, "
                . "0 as user_balance_dp, "
                . "0 as min_dp, "
                . "0 as total_credit_available, "
                . "CONVERT(if(TRIM(IFNULL(o.imagethumb,''))!='', o.imagethumb, '') USING utf8) as thumb_path, "
                . "CONVERT(if(TRIM(IFNULL(o.image,''))!='', o.image, '') USING utf8) as original_path, "
                . "0 as shot_status, "
                . "0 as card_status, "
                . "0 as dp_status, "
                . "0 as momosy_status, "
                . "0 as credit_status, "
                . "0 as credit_available, "
                . "0 as  is_fav, "
                . "'offer' as type, "
                . "ROUND(if(o.price<=0, 0, o.price)/100, 2) as price "
                . " FROM $offerTable o INNER JOIN  $storeTable s ON(o.shop_id=s.id) INNER JOIN  $posTable p ON(p.offer_id=o.id) "
                . " WHERE o.is_active=1 AND o.is_deleted=0 AND s.is_active=1 "
                . ") UNION (";

        $sql .= "SELECT s.id as id,
            s.parent_store_id as parentstoreid,
            s.business_name as businessname,
            s.business_type as businesstype,
            s.is_allowed as isallowed,
            s.payment_status as paymentstatus,
            s.name as name,
            s.latitude as latitude,
            s.longitude as longitude,
            s.email as email,
            s.description as description,
            s.phone as phone,
            s.legal_status as legalstatus,
            s.business_region as businessregion,
            s.business_city as businesscity,
            s.business_address as businessaddress,
            s.zip as zip,s.province as province,
            s.vat_number as vatnumber,
            s.iban as iban,
            s.map_place as mapplace,
            s.store_image as storeimage,
            s.is_active as isactive,
            s.shop_status as shop_status,
            s.avg_rate as shop_rating,
            s.vote_count as vote_count,
            s.sale_catid as catogory_id,
            s.sale_subcatid as sub_category_id,
            s.new_contract_status as new_contract_status,  
            CONVERT((select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '" . $language_code . "') USING utf8)  as shop_category,
            CONVERT((select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '" . $language_code . "') USING utf8)  as shop_sub_category,
            s.shop_keyword as shop_keyword,
            0 as citizen_income, 
            @store_id := s.id as store_id,
            CONVERT(@image_name := sm.image_name  USING utf8) as image_name, @album_id := sm.album_id as album_id,$user_id as user_id, 
            0 as balance_shot, 0 as available_gc, 0 as balance_momosy_card, 0 as user_balance_dp,0 as min_dp, 
            0 AS total_credit_available, 
            CONVERT( if(@album_id is NULL,bc.image_thumb,if(@album_id > 0, 
                concat(concat(concat(concat(concat('" . $image_path . "', @store_id),'/thumb/'),@album_id),'/'),@image_name),
                concat(concat(concat('" . $image_path . "', @store_id),'/thumb/'),@image_name))) USING utf8)  as thumb_path,

             CONVERT(if(@album_id is NULL,bc.image,if(@album_id > 0, 
                concat(concat(concat(concat(concat('" . $image_path . "', @store_id),'/original/'),@album_id),'/'),@image_name),
                concat(concat(concat('" . $image_path . "', @store_id),'/original/'),@image_name))) USING utf8)  as original_path, 
             0 as shot_status,
             0 as card_status,
             0 as dp_status,
             0 as momosy_status,
             0 as credit_status,
             0 as credit_available,
             if($user_id = fav.user_id, 1, 0) as is_fav,
              '' as type, 
            '' as price 
                FROM Store s
                INNER JOIN UserToStore co ON s.id = co.store_id and co.role = 15
                LEFT JOIN StoreMedia as sm on sm.id = s.store_image
                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
                left join  BusinessCategory as bc on s.sale_catid = bc.id
                where s.is_active=1 and (s.shop_status=1 OR co.user_id = $user_id )";
        $sql .= ")) as temptable ORDER BY shop_rating DESC, vote_count DESC";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        //$result = json_encode($result);
        return $result;
    }

    /**
     * Get favourite store
     * @param request object
     * @param json
     */
    public function favouriteStore($store_id, $user_id) {

        $sql = "select * from Favourite where user_id = '$user_id' AND store_id ='$store_id' ";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        return $result = $stmt->fetchAll();
    }

    /**
     * Get Friend count
     * @param request object
     * @param json
     */
    public function friendCount($userid, $shop_id) {

        $sql = "select connect_from,connect_to from UserConnection  as uc
                 where connect_to = '$userid' and status = '1'";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();

        $count = 0;

        foreach ($result as $res) {

            $sql_tra = "select count(uc.id) from Transaction as uc
                 where buyer_id = '" . $res['connect_from'] . "' and seller_id = '$shop_id' group by buyer_id limit 1";
            $stmt_tra = $this->getEntityManager()
                    ->getConnection()
                    ->prepare($sql_tra);
            $stmt_tra->execute();
            $result_check = $stmt_tra->fetchAll();

            if (!empty($result_check)) {

                $count++;
            }
        }
        return $count;
    }

    /**
     * Get All Store Details with Filter
     * @param request object
     * @param json
     */
    function getAllStoresDetails($de_serialize, $bucket_path, $count = false) {

        $image_path = $bucket_path . $this->store_media_path;

        $user_id = (isset($de_serialize['user_id']) ? $de_serialize['user_id'] : '');
        $search_type = (isset($de_serialize['search_type']) ? $de_serialize['search_type'] : '');

        $category = (isset($de_serialize['category']) ? implode(',', $de_serialize['category']) : '');

        $keywords = (isset($de_serialize['keywords']) ? $de_serialize['keywords'] : '');

        $lat_long = (isset($de_serialize['lat_long']) ? $de_serialize['lat_long'] : '');

        $latitude = (isset($lat_long[0]) ? $lat_long[0] : '');

        $longitude = (isset($lat_long[0]) ? $lat_long[1] : '');

        $limits = (isset($de_serialize['limits']) ? $de_serialize['limits'] : '');

        $offset = (isset($limits['limit_start']) ? $limits['limit_start'] : '');

        $limit_size = (isset($limits['limit_size']) ? $limits['limit_size'] : '');

        $filter = (isset($de_serialize['filter']) ? $de_serialize['filter'] : 'recent');

        $radius = (isset($de_serialize['radius']) ? $de_serialize['radius'] : '100');

        $sort_type = (isset($de_serialize['sort_type']) ? $de_serialize['sort_type'] : '');

        $only_in_favorite = (isset($de_serialize['only_in_favorite']) ? $de_serialize['only_in_favorite'] : '');

        $seller_id = (isset($de_serialize['seller_id'])) ? $de_serialize['seller_id'] : null;


        // Manage order by 

        $orderby = " ORDER BY s.id DESC";
        if (($filter == "rating" || $sort_type == 1)) {
            $orderby = " ORDER BY s.avg_rate DESC";
        }
        if (($latitude != NULL && $longitude != NULL) && ($sort_type == 0)) {
            $orderby = " ORDER BY distance DESC";
        }

        $distance = "(6371 * acos(cos( radians( $latitude ) ) * cos( radians( s.latitude ) ) * cos( radians( s.longitude ) - radians( $longitude )) + sin(radians( $latitude)) * sin(radians(s.latitude))))";

        if ($count) {
            $sql = "select count(co.store_id) as totalcount";
        } else {
            $sql = "select
                            co.user_id as id,
                            co.store_id as storeId,
                            s.email as email,
                            s.description as description,
                            s.parent_store_id as parentStoreId,
                            s.phone as phone,
                            s.business_name as businessName,
                            s.legal_status as legalStatus,
                            s.business_type as businesstype,
                            s.business_country as businessCountry,
                            s.business_region as businessRegion,
                            s.business_city as businessCity,
                            s.business_address as businessAddress,
                            s.zip as zip,
                            s.province as province,
                            s.vat_number as vatNumber,
                            s.iban as iban,
                            s.map_place as mapPlace,
                            s.latitude as latitude,
                            s.longitude as longitude,
                            s.is_allowed as isallowed,
                            s.payment_status as paymentstatus,
                            s.name as name,
                            s.store_image as storeImage,
                            s.is_allowed as isAllowed,
                            s.is_active as isActive,
                            s.created_at as createdAt,
                            co.role as role,
                            s.payment_status as paymentStatus,
                            s.shop_status as shopStatus,
                            s.avg_rate as shopRating,
                            s.vote_count as vote_count,
                            s.sale_catid as catogory_id,
                            s.citizen_aff_charge as citizenAffCharge,
                            s.shop_aff_charge as shopAffCharge,
                            s.friends_follower_charge as friendsFollowerCharge,
                            s.buyer_charge as buyerCharge,
                            s.sixc_charge as sixcCharge,
                            s.all_country_charge as allCountryCharge,
                            s.new_contract_status as new_contract_status ";

            if ($latitude != NULL && $longitude != NULL) {
                $sql .= ", $distance as distance";
            }
        }
        $sql .= " from Store as s 
                             LEFT JOIN UserToStore as co on s.id = co.store_id";

        if ($only_in_favorite == 1 && $seller_id != null) {
            $sql .=" JOIN Favourite as fv on fv.store_id = co.store_id ";
        }

        $sql .=" where s.is_active = 1 AND s.shop_status=1 ";


        if ($seller_id != null) {

            $sql .=" AND s.id=$seller_id ";
        } else {
            if ($keywords != null) {
                $sql .=" AND s.name LIKE '%" . $keywords . "%' ";
            }
            if ($category != NULL) {
                $sql .=" AND s.sale_catid in ($category)";
            }
            if ($latitude != NULL && $longitude != NULL && $keywords == null && $count == false) {
                $sql .=" HAVING distance < $radius";
            }

            if ($count == false) {
                if ($orderby != NULL) {

                    $sql .= $orderby;
                }
                if ($offset != NULL && $limit_size != NULL) {

                    $sql .=" LIMIT " . $offset . "," . $limit_size . " ";
                } else {
                    $sql .=" LIMIT 0,8";
                }
            }
        }

        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();

        return $result;
    }

    /**
     * Get All Store Count with Filter
     * @param request object
     * @param json
     */
    function getAllStoresDetailsCount($de_serialize, $bucket_path) {

        $image_path = $bucket_path . $this->store_media_path;

        $user_id = (isset($de_serialize['user_id']) ? $de_serialize['user_id'] : '');
        $search_type = (isset($de_serialize['search_type']) ? $de_serialize['search_type'] : '');

        $category = (isset($de_serialize['category']) ? implode(',', $de_serialize['category']) : '');

        $keywords = (isset($de_serialize['keywords']) ? $de_serialize['keywords'] : '');

        $lat_long = (isset($de_serialize['lat_long']) ? $de_serialize['lat_long'] : '');

        $latitude = (isset($lat_long[0]) ? $lat_long[0] : '');

        $longitude = (isset($lat_long[0]) ? $lat_long[1] : '');

        $limits = (isset($de_serialize['limits']) ? $de_serialize['limits'] : '');

        $offset = (isset($de_serialize['limit_start']) ? $de_serialize['limit_start'] : '');

        $limit_size = (isset($de_serialize['limit_size']) ? $de_serialize['limit_size'] : '');

        $filter = (isset($de_serialize['filter']) ? $de_serialize['filter'] : 'recent');

        $radius = (isset($de_serialize['radius']) ? $de_serialize['radius'] : '100');

        $sort_type = (isset($de_serialize['sort_type']) ? $de_serialize['sort_type'] : '');

        $only_in_favorite = (isset($de_serialize['only_in_favorite']) ? $de_serialize['only_in_favorite'] : '');


        $orderby = " ORDER BY s.id DESC";

        if (($filter == "rating" || $sort_type == 1)) {

            $orderby = " ORDER BY s.avg_rate DESC";
        }

        if (($latitude != NULL && $longitude != NULL) && ($sort_type == 0)) {
            $orderby = " ORDER BY distance DESC";
        }

        $distance = "(6371 * acos(cos( radians( $latitude ) ) * cos( radians( s.latitude ) ) * cos( radians( s.longitude ) - radians( $longitude )) + sin(radians( $latitude)) * sin(radians(s.latitude))))";

        $sql = "select count(co.store_id) as totalcount";

        if ($latitude != NULL && $longitude != NULL) {
            $sql .= ", $distance as distance";
        }
        $sql .= " from Store as s 
                             LEFT JOIN UserToStore as co on s.id = co.store_id
                             LEFT JOIN  BusinessCategory as bc on s.sale_catid = bc.id 
                             LEFT JOIN StoreMedia as sm on sm.store_id = s.store_image ";

        if ($only_in_favorite == 1) {

            $sql .=" JOIN Favourite as fv on fv.store_id = co.store_id ";
        }

        $sql .=" where s.is_active = 1 AND s.shop_status=1 ";


        if ($keywords != null) {

            $sql .=" AND s.name LIKE '%" . $keywords . "%' ";
        }

        if ($category != NULL) {
            $sql .=" AND s.sale_catid in ($category)";
        }

        if ($latitude != NULL && $longitude != NULL && $keywords == null) {
            $sql .=" HAVING distance < $radius";
        }

        if ($orderby != NULL) {

            $sql .= $orderby;
        }



        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        return $result = $stmt->fetchAll();
    }

    /**
     *  Search Shop List
     * @param request object
     * @param json
     */
    public function getShopList($object_info) {

        $searchshop = (isset($object_info['searchshop']) ? $object_info['searchshop'] : '');
        $sql = "select name as shopname , s.id as seller_id ,
                    s.business_name as businessName,
                    s.legal_status as legalStatus,
                    s.business_type as businesstype,
                    s.business_country as businessCountry,
                    s.business_region as businessRegion,
                    s.business_city as businessCity,
                    s.business_address as businessAddress,
                    s.zip as zip";
        if ($searchshop != NULL) {
            $sql.=" from Store as s where name LIKE :search and ";
        } else {
            $sql.="  from Store as s   where  ";
        }
        $sql.="  s.is_active = 1 AND s.shop_status=1 ";

        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        if ($searchshop != NULL) {
            $stmt->bindValue('search', "%" . $searchshop . "%");
        }
        $stmt->execute();
        return $result = $stmt->fetchAll();
    }

    /**
     * Get All City List
     * @param request object
     * @param json
     */
    public function getcitylist($object_info) {

        $keywords = (isset($object_info['keywords']) ? $object_info['keywords'] : '');

        if ($keywords != NULL) {

            $sql = "select s.business_city as city , business_region as region,s.business_country as country , s.latitude , s.longitude from Store as s where s.business_city LIKE '%" . $keywords . "%'";

            $stmt = $this->getEntityManager()
                    ->getConnection()
                    ->prepare($sql);
            $stmt->execute();
            return $result = $stmt->fetchAll();
        }
    }

    /**
     * 
     * @param type $data
     * @return type
     */
     public function getStoreMarkers($data) {
        $data_result = array();
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $query = "
        SELECT  s.id , s.business_name , s.latitude, s.longitude, 
        SQRT( POW(69.1 * (  latitude - :latitude ), 2) + 
        POW(69.1 * ( :longitude  - longitude) * COS(latitude / 57.3), 2)) 
        AS distance , business_region , business_city , business_address ,zip
        FROM Store s where s.is_active = 1 AND s.shop_status=1 
        and s.name like :business_name 
        ";


        if (isset($data["category_id"]) && $data["category_id"] != null && count($data["category_id"]) > 0) {
            $query.=" and sale_catid in (:category_id) ";
        }

        if (isset($data["seller_id"]) && $data["seller_id"] > 0) {
            $query.=" and s.id=:seller_id ";
            $query.=" ORDER  BY distance ";
        } else {
            $query.=" HAVING distance < :limit_distance ORDER  BY distance ";
        }

        $statement = $connection->prepare($query);

        $longitude = ( isset($data["longitude"]) && $data["longitude"] != null) ? $data["longitude"] : "9.1881714";
        $latitude = (isset($data["latitude"]) && $data["latitude"] != null ) ? $data["latitude"] : "45.463681";
        $limit_distance = (isset($data["limit_distance"]) && $data["limit_distance"] != null ) ? $data["limit_distance"] : "100";
        $business_name = (isset($data["query"]) && strlen($data["query"]) > 0 ) ? $data["query"] : "";

        if (isset($data["seller_id"]) && $data["seller_id"] > 0) {
            $statement->bindValue('seller_id', $data["seller_id"]);
        } else {
            $statement->bindValue('limit_distance', $limit_distance);
        }

        if (isset($data["category_id"]) && $data["category_id"] != null && count($data["category_id"]) > 0) {
            $comma_separated = implode(",", $data["category_id"]);
            $statement->bindValue('category_id', $comma_separated);
        }

        $statement->bindValue('longitude', $longitude);
        $statement->bindValue('latitude', $latitude);
        $statement->bindValue('business_name', "%" . $business_name . "%");


        if ($statement->execute()) {

            $data_result["message"] = "SUCCESS";
            $data_result["code"] = "200";
            $data_result["results"] = $statement->fetchAll();
        } else {
            $data_result["message"] = "FAILED";
            $data_result["code"] = "614";
            $data_result["results"] = $statement->fetchAll();
        }

        return $data_result;
    }

   public function checkBoucher($seller_id){

            $sql = "select count(s.id) as records from Store as s
                   left join CommercialPromotion as cp on cp.seller_id = s.id 
                   where cp.commercial_promotion_type_id = '864135' and cp.seller_id = '$seller_id' ";
            $stmt = $this->getEntityManager()
                    ->getConnection()
                    ->prepare($sql);
            $stmt->execute();
            $result = $stmt->fetchAll();
            return  $result;     
    } 

}
