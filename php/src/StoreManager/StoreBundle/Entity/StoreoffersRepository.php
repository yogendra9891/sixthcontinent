<?php

namespace StoreManager\StoreBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * StoreoffersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StoreoffersRepository extends EntityRepository {

    /**
     * function for getting the number of users for the shots assignment
     * @param type $shop_zip
     * @param INt $shots number of shots to be assigned
     * @return type
     */
    public function getRendomUsers($shots) {

        $citizen_count = $this->getTotalCitizensCount();
        $query_builder = $this->_em->createQueryBuilder();
        $result = $query_builder->select('u.userId')
                ->from('UserManagerSonataUserBundle:CitizenUser', 'u')
                ->addSelect('RAND() as HIDDEN rand')
                ->orderBy('rand')
                ->setMaxResults($shots)
                ->getQuery()
                ->getResult();
        return $result;
    }

    /**
     * function for getting the user by the role
     * @param type $role
     * @return type
     */
    public function findByRole($role) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u.id')
                ->from('UserManagerSonataUserBundle:User', 'u')
                ->where('u.roles LIKE :roles')
                ->setParameter('roles', '%"' . $role . '"%');
        $admin_id = $qb->setMaxResults(1)->getQuery()->getResult();
        if (count($admin_id) > 0) {
            return $admin_id[0]['id'];
        } else {
            return '';
        }
    }

    /**
     * function for gettinf the count of all the citizens
     * @param None
     * @return int total number of citizens
     */
    private function getTotalCitizensCount() {
        $qb = $this->_em->createQueryBuilder();
        $citizen_count = $qb->select('count(c.id)')
                ->from('UserManagerSonataUserBundle:CitizenUser', 'c')
                ->getQuery()
                ->getSingleScalarResult();
        return $citizen_count;
    }

    /**
     * function for checking if discount position is open for a shop
     * @param type $shop_id
     * @return int 0/1 based on absent/present
     */
    public function checkDPForShop($shop_id, $user_id) {
        $user_dp = $this->getUserDPAvailable($user_id);
        $shop_dp = $this->getShopDPAvailable($shop_id);
        $dp_user_can_use = min($user_dp, $shop_dp);
        $dp_user_can_use = $this->getAmountInEuro($dp_user_can_use);
        if ($dp_user_can_use > 0) {
            return 1;
        } else {
            return 0;
        }
    }

    /**
     * function for checking if Shot is available for a user on a shop
     * @param type $shop_id
     * @param type $user_id
     * @return int 0/1 based on absent/present  
     */
    public function checkShotsForShop($shop_id, $user_id) {
        $user_credit = $this->getUserCreditAvailable($user_id, $shop_id);
        if ($user_credit != null) {
            $user_shot = $user_credit['balanceShots'];
        } else {
            $user_shot = 0;
        }

        if ($user_shot > 0) {
            return 1;
        } else {
            return 0;
        }
    }

    /**
     * function for checking if Gift card is available for a user on a shop
     * @param type $shop_id
     * @param type $user_id
     * @return int 0/1 based on available/unavailable
     */
    public function checkGiftCardForShop($shop_id, $user_id) {
        $user_credit = $this->getUserGiftCardAvailable($user_id, $shop_id);
        if ($user_credit > 0) {
            return 1;
        } else {
            return 0;
        }
    }

    public function checkDPForShopExternal($shop_id) {
        $shop_dp = $this->getShopDPAvailable($shop_id);
        $shop_dp = $this->getAmountInEuro($shop_dp);
        if ($shop_dp > 0) {
            return 1;
        } else {
            return 0;
        }
    }

    /**
     * function for checking if citizen income exist
     * @param type $shop_id
     * @param type $user_id
     * @return int
     */
    public function checkCitizenIncomeForShop($shop_id, $user_id) {
        $user_ci = $this->getUserCIAvailable($user_id);
        $maximum_CI_used = $this->getMaximumCIUsed($user_ci);
        if ($maximum_CI_used > 0) {
            return 1;
        } else {
            return 0;
        }
    }

    /**
     * function for getting the total credit available for a user on shop
     * @param type $user_id
     * @param type $shop_id
     * @return type
     */
    public function getTotalCreditAvailableForUser($user_id, $shop_id) {

        $user_dp = $this->getUserDPAvailable($user_id);
        $shop_dp = $this->getShopDPAvailable($shop_id);
        $dp_user_can_use = min($user_dp, $shop_dp);
        $user_ci = $this->getUserCIAvailable($user_id);
        $maximum_CI_used = $this->getMaximumCIUsed($user_ci);
        $user_credit = $this->getUserCreditAvailable($user_id, $shop_id);
        if ($user_credit != null) {
            $user_shot = $user_credit['balanceShots'];
            $user_gc = $user_credit['balanceGiftCard'];
            $user_momosy_balance = $user_credit['balanceMomosyCard'];
        } else {
            $user_shot = 0;
            $user_gc = 0;
            $user_momosy_balance = 0;
        }

        $total_credit = $user_shot + $dp_user_can_use + $maximum_CI_used + $user_gc + $user_momosy_balance;
        $total_credit = $this->getAmountInEuro($total_credit);
        return $total_credit;
    }

    /**
     * get DP available for the user
     * @param type $user_id
     * @return int
     */
    private function getUserDPAvailable($user_id) {
        $qb = $this->_em->createQueryBuilder();
        $DP_remaining = $qb->select('c.balanceDp')
                ->from('WalletManagementWalletBundle:UserDiscountPosition', 'c')
                ->where('c.userId = :user_id')
                ->setParameter('user_id', $user_id)
                ->setMaxResults(1)
                ->getQuery()
                ->getResult();
        if (count($DP_remaining) > 0) {
            return $DP_remaining[0]['balanceDp'];
        } else {
            return 0;
        }
    }

    /**
     * get DP available for shop
     * @param type $shop_id
     * @return int
     */
    private function getShopDPAvailable($shop_id) {
        $qb = $this->_em->createQueryBuilder();
        $DP_remaining = $qb->select('c.balanceDp')
                ->from('WalletManagementWalletBundle:ShopDiscountPosition', 'c')
                ->where('c.shopId = :shop_id')
                ->setParameter('shop_id', $shop_id)
                ->getQuery()
                ->getResult();
        if (count($DP_remaining) > 0) {
            return $DP_remaining[0]['balanceDp'];
        } else {
            return 0;
        }
    }

    /**
     * function for getting the refferal id from shop id
     * @param type $shop_id
     * @return null
     */
    public function getRefferalIdFromShopId($shop_id) {
        $qb = $this->_em->createQueryBuilder();
        $referral_id = $qb->select('c.fromId')
                ->from('AffiliationAffiliationManagerBundle:AffiliationShop', 'c')
                ->where('c.shopId = :shop_id')
                ->setParameter('shop_id', $shop_id)
                ->getQuery()
                ->getResult();
        if (count($referral_id) > 0) {
            return $referral_id[0]['fromId'];
        } else {
            return null;
        }
    }

    /**
     * function for getting the DP amount that user can use in shop
     * @param type $user_id
     * @param type $shop_id
     * @return type
     */
    public function getDPAmount($user_id, $shop_id) {
        $user_dp = $this->getUserDPAvailable($user_id);
        $shop_dp = $this->getShopDPAvailable($shop_id);
        $dp_user_can_use = min($user_dp, $shop_dp);
        $dp_user_can_use = $this->getAmountInEuro($dp_user_can_use);
        return $dp_user_can_use;
    }

    /**
     * get shot amount for a user on shop
     * @param type $user_id
     * @param type $shop_id
     * @return type
     */
    public function getShotAmount($user_id, $shop_id) {
        $user_credit = $this->getUserCreditAvailable($user_id, $shop_id);
        if ($user_credit != null) {
            $user_shot = $user_credit['balanceShots'];
        } else {
            $user_shot = 0;
        }
        $user_shot = $this->getAmountInEuro($user_shot);
        return $user_shot;
    }

    /**
     * function for getting the CI available amount
     * @param type $user_id
     * @param type $shop_id
     * @return type
     */
    public function getCIAmount($user_id, $shop_id) {
        $user_ci = $this->getUserCIAvailable($user_id);
        $maximum_CI_used = $this->getMaximumCIUsed($user_ci);
        $maximum_CI_used = $this->getAmountInEuro($maximum_CI_used);
        return $maximum_CI_used;
    }

    /**
     * function for getting the Gift card amount available
     * @param type $user_id
     * @param type $shop_id
     * @return type
     */
    public function getGCAmount($user_id, $shop_id) {
        $user_credit = $this->getUserGiftCardAvailable($user_id, $shop_id);
        $user_gc = $this->getAmountInEuro($user_credit);
        return $user_gc;
    }

    /**
     * function for geting the user credit amount details
     * @param type $user_id
     * @param type $shop_id
     * @return null
     */
    private function getUserCreditAvailable($user_id, $shop_id) {
        $qb = $this->_em->createQueryBuilder();
        $credit_remaining = $qb->select('c.balanceShots, c.balanceGiftCard, c.balanceMomosyCard')
                ->from('WalletManagementWalletBundle:UserShopCredit', 'c')
                ->where('c.shopId = :shop_id')
                ->andWhere('c.userId = :user_id')
                ->setParameter('shop_id', $shop_id)
                ->setParameter('user_id', $user_id)
                ->getQuery()
                ->getResult();
        if (count($credit_remaining) > 0) {
            return $credit_remaining[0];
        } else {
            return null;
        }
    }

    /**
     * function for getting the CI amount left for the user
     * @param type $user_id
     * @return int
     */
    private function getUserCIAvailable($user_id) {
        $qb = $this->_em->createQueryBuilder();
        $DP_remaining = $qb->select('c.citizenIncome')
                ->from('WalletManagementWalletBundle:UserDiscountPosition', 'c')
                ->where('c.userId = :user_id')
                ->setParameter('user_id', $user_id)
                ->setMaxResults(1)
                ->getQuery()
                ->getResult();
        if (count($DP_remaining) > 0) {
            return $DP_remaining[0]['citizenIncome'];
        } else {
            return 0;
        }
    }

    /**
     * function for geting the user credit amount details
     * @param type $user_id
     * @param type $shop_id
     * @return null
     */
    private function getUserGiftCardAvailable($user_id, $shop_id) {
        $qb = $this->_em->createQueryBuilder();
        $credit_remaining = $qb->select('c.balanceGiftCard')
                ->from('WalletManagementWalletBundle:UserShopCredit', 'c')
                ->where('c.shopId = :shop_id')
                ->andWhere('c.userId = :user_id')
                ->setParameter('shop_id', $shop_id)
                ->setParameter('user_id', $user_id)
                ->getQuery()
                ->getResult();
        if (count($credit_remaining) > 0) {
            return $credit_remaining[0]['balanceGiftCard'];
        } else {
            return 0;
        }
    }

    /**
     * function for getting the Maximum CI that user can use on the shop
     * @param type $user_ci
     * @return type
     */
    private function getMaximumCIUsed($user_ci) {
        $user_ci = $this->getAmountInEuro($user_ci);
        $amount = 0;
        $amount_left = $this->getAmountLeft($user_ci, 50);
        $amount += $this->getAmountToAdd($user_ci, 50);
        $amount += $this->getAmountToAdd($amount_left, 20);
        $amount_left = $this->getAmountLeft($amount_left, 20);
        $amount += $this->getAmountToAdd($amount_left, 10);
        $amount_left = $this->getAmountLeft($amount_left, 10);
        $amount = $this->getAmountInTotalCurrency($amount);
        return $amount;
    }

    /**
     * function for getting the amount left for CI
     * @param type $amount
     * @param type $divisor
     * @return type
     */
    private function getAmountLeft($amount, $divisor) {
        return fmod($amount, $divisor);
    }

    /**
     * function for getting the amount that need to add in CI amount
     * @param type $amount
     * @param type $divisor
     * @return type
     */
    private function getAmountToAdd($amount, $divisor) {
        $left = fmod($amount, $divisor);
        return ($amount - $left);
    }

    /**
     * function for getting the amount in EURO
     * @param type $amount
     * @return type
     */
    private function getAmountInEuro($amount) {
        return $amount / 1000000;
    }

    /**
     * function for converting the given EURO into EURO*1000000
     * @param type $amount
     * @return type
     */
    private function getAmountInTotalCurrency($amount) {
        return $amount * 1000000;
    }

    public function getStoreIdFromItemId($dp_item_id) {
        $store_id = array();
        $qb = $this->createQueryBuilder('c');
        $query = $qb->select()
                ->where(
                        $qb->expr()->In('c.id', ':shops')
                )
                ->setParameter('shops', $dp_item_id);
        $result = $query->getQuery();
        $result_res = $result->getResult();
        return $result_res;
    }

}
