<?php

namespace ExportManagement\ExportManagementBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Utility\UtilityBundle\Utils\Utility;
use Utility\ApplaneIntegrationBundle\Model\ApplaneConstentInterface;
use SixthContinent\SixthContinentConnectBundle\Entity\Sixthcontinentconnecttransaction;
use Transaction\TransactionSystemBundle\Entity\Transaction;


/**
 * SalesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SalesRepository extends EntityRepository
{
    /**
     * getting the sales transaction 
     * @param none
     * @return array
     */
    public function getSalesTransaction() {

              $response = $this->getEntityManager()
                ->createQuery("SELECT t.id,t.status,t.sellerId,t.sixcAmountPc as importo,t.sixcAmountPcVat as importo_piu_iva,t.timeInitH,t.transactionTypeId as trn_type,t.sixcTransactionId
                            FROM Transaction\TransactionSystemBundle\Entity\Transaction t
                            WHERE t.status = 'COMPLETED'")
               ->getResult();
        
              $data = array();
            
               foreach ($response as $getdata) {

                   $res = $this->getEntityManager()
                   ->createQuery("SELECT sx.ciTransactionSystemId,sx.applicationId,sx.paypalTransactionId
                            FROM SixthContinent\SixthContinentConnectBundle\Entity\Sixthcontinentconnecttransaction sx
                            WHERE sx.ciTransactionSystemId = ".($getdata['id'])." ")
                    ->getResult();
              
                  if(!empty($res)){
                      $getdata['ciTransactionSystemId'] = $res[0]['ciTransactionSystemId'];
                     }
                     else{
                      $getdata['ciTransactionSystemId'] = $getdata['id'];
                     }
                
                   $data[] = $getdata;
                } 

             return $data;

         //  $response = $this->getEntityManager()
         //        ->createQuery("SELECT t.id,t.status,t.sellerId,t.sixcAmountPc as importo,t.sixcAmountPcVat as importo_piu_iva,sx.ciTransactionSystemId,t.timeInitH,sx.applicationId as appid , t.transactionTypeId as trn_type , t.sixcTransactionId
         //                    FROM Transaction\TransactionSystemBundle\Entity\Transaction t
         //                    inner join SixthContinent\SixthContinentConnectBundle\Entity\Sixthcontinentconnecttransaction sx
         //                    WITH t.id = sx.ciTransactionSystemId
         //                    WHERE t.status = 'COMPLETED'")
         //       ->getResult();
         // return $response;        

        // $today          =  new \DateTime('now');
        // $start_date     =  $today->format('Y-m-d');
        // $tomorrow       =  new \DateTime('tomorrow');
        // $end_date       =  $tomorrow->format('Y-m-d');

        // //create the query
        // $query = $this->createQueryBuilder('c');
        // $query->select();
       
         /* New  */

         // if($request != ""){
         //     $query->Where('c.date =:date')
         //     ->setParameter('date','2015-08-04');
         //   }  

         /* New  End */
        
        // ->Where('c.createdAt >=:create_at', 'c.createdAt <:end_at')
        // ->setParameter('create_at', $start_date)
        // ->setParameter('end_at', $end_date);

        // $result     = $query->getQuery();
        // $result_res = $result->getResult();
        // return $result_res;
    }
    
    /**
     * find the counter of today transaction
     * @return object array
     */
    public function getTransactionCounter() {
        $today          =  new \DateTime('now');
        $start_date     =  $today->format('Y-m-d');
        $counter = 0;
        //create the query
        $query = $this->createQueryBuilder('c');
        $query->select()
              ->Where('c.createdAt =:create_at')
              ->orderBy('c.id', 'DESC')
              ->setMaxResults(1)  
              ->setParameter('create_at', $start_date);

        $result     = $query->getQuery();
        $result_res = $result->getResult();
        if (count($result_res)) {
            $result = $result_res[0];
            $counter_string = $result->getProgress();
            $counter_trimmed_string = Utility::getTrimmedString($counter_string);
            $counter_constant = ApplaneConstentInterface::SIX_PROGRESS_CONST;
            $counter_replace  = Utility::getReplaceString($counter_constant, '', $counter_trimmed_string);
            $counter = Utility::getIntergerValue($counter_replace);
        }
        return $counter;
    }
}
