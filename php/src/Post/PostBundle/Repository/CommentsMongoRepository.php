<?php

namespace Post\PostBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * CommentsMongoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommentsMongoRepository extends DocumentRepository
{
    /**
    * comments lising
    * @param int $post_id
    * @param int $user_id
    * @return object array
    */
	public function listingComments($post_id,$user_id,$limit,$offset)
	{
		$qb     = $this->createQueryBuilder('User');
		$result = $qb
                                ->field('post_id')->equals($post_id)
                                ->field('status')->equals(1)
                                ->limit($limit)
                                ->skip($offset)
                                ->getQuery()
                                ->execute()
                                ->toArray(false);
                
		return $result;
	}
    /**
    * count comments
    * @param int $post_id
    * @param int $user_id
    * @return object array
    */
	public function listingTotalComments($post_id)
	{
		$qb     = $this->createQueryBuilder('User');
		$result = $qb
                                ->field('post_id')->equals($post_id)
                                ->field('status')->equals(1)
                               
                                ->getQuery()
                                ->execute()
                                ->toArray(false);
                
		return $result;
	}
        
         /**
     * finding the commennts of posts.
     * @param type $post_ids
     * @return document object.
     */
    public function findPostsComments($post_ids) {
            $qb     = $this->createQueryBuilder('u');
            $result = $qb->field('status')->equals(1)
                         ->field('post_id')->in($post_ids)
                         ->sort('comment_created_at','DESC')
                         ->getQuery()
                         ->execute()
                         ->toArray(false);
            return $result;
    }
    
     /**
     * Edit the post comment rate
     * @param type $rate_id
     * @return boolean
     */
    public function editCommentRate($rate_id, $arrayPostCommentRate, $comment_id) {
        $result = $this->createQueryBuilder('post')
                ->update()
                ->field('id')->equals($comment_id)
                ->field('rate.id')->equals($rate_id)
                ->field("rate.$")->set($arrayPostCommentRate)
                ->getQuery()
                ->execute();
        return true;
    }
    
    /**
     * finding the commennts of posts.
     * @param type $post_ids
     * @return document object.
     */
    public function getRecentPostsComments($post_ids,  $limitForEachPost=0) {
        $response = array();
        foreach ($post_ids as $post_id){
            $result = $this->findBy(array('post_id'=>$post_id, 'status'=>1), array('comment_created_at'=>'DESC'), $limitForEachPost);
            $response = array_merge($response, $result);
        }
            return $response;
    }
}