<?php

namespace Votes\VotesBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * VotesMongoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VotesMongoRepository extends DocumentRepository
{
    public function isVoted($voterId, $voterType, $itemId, $itemType){
        $qb = $this->createQueryBuilder();
        $result = $qb->count()
                ->field('voter_id')->equals((string)$voterId)
                ->field('voter_type')->equals($voterType)
                ->field('item_id')->equals($itemId)
                ->field('item_type')->equals($itemType)
                ->field('vote')->equals(1)
                ->getQuery()
                ->execute();
        return $result>0 ? 1 : 0;
    }
    
    public function getVotesCount($itemId, $itemType){
        $qb = $this->createQueryBuilder();
        $result = $qb->count()
                ->field('item_id')->equals($itemId)
                ->field('item_type')->equals($itemType)
                ->field('vote')->equals(1)
                ->getQuery()
                ->execute();
        return $result;
    }
    
    public function getVotes($itemId, $itemType, $offset, $limit){
        $result = null;
        try{
            $qb = $this->createQueryBuilder();
            $result = $qb
                    ->field('item_id')->equals($itemId)
                    ->field('item_type')->equals($itemType)
                    ->field('vote')->equals(1)
                    ->sort('created_at', -1)
                    ->skip($offset)
                    ->limit($limit)
                    ->getQuery()
                    ->execute();
        } catch (\Exception $e){
            //echo $e->getMessage();
        }
        return $result;
    }
    
    public function inActiveVote($voterId, $voterType, $itemId, $itemType){
        $qb = $this->createQueryBuilder();
        $result = $qb->update()
                ->field('vote')->set(0)
                ->field('voter_id')->equals((string)$voterId)
                ->field('voter_type')->equals($voterType)
                ->field('item_id')->equals($itemId)
                ->field('item_type')->equals($itemType)
                ->getQuery()
                ->execute();
        return true;
    }
    
    public function isVotedForManyItems($voterId, $voterType, $itemIds, $itemType){
        $itemIds = is_array($itemIds) ? $itemIds : (array)$itemIds;
        $qb = $this->createQueryBuilder();
        $result = $qb->group(array('item_id'=>1), array('count'=>0))
                ->field('voter_id')->equals((string)$voterId)
                ->field('voter_type')->equals($voterType)
                ->field('item_id')->in($itemIds)
                ->field('item_type')->equals($itemType)
                ->field('vote')->equals(1)
                ->reduce('function (obj, prev) { prev.count++; }')
                ->getQuery()
                ->execute()
                ->toArray(true);
        
        $response=array();
        if(count($result)>0){
            foreach($result as $_r){
                $response[$_r['item_id']]= (int)$_r['count'];
            }
        }
        $fetchedItemId = array_keys($response);
        $notVotedItemId = array_diff($itemIds, $fetchedItemId);
        if(!empty($notVotedItemId)){
            foreach($notVotedItemId as $_nvI){
                $response[$_nvI]=0;
            }
        }
        return $response;
    }
}