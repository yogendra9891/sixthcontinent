<?php

namespace WalletManagement\WalletBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserShopCreditRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class UserShopCreditRepository extends EntityRepository {

    /**
     * Get citizen wallet shots
     * @param int $user_id
     * @param int $limit_start
     * @param int $limit_size
     * @return array
     */
    public function getCitizenShots($user_id, $limit_start, $limit_size)
    {
       //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.shopId, c.totalShots, c.balanceShots')
                ->innerJoin('StoreManagerStoreBundle:Store', 'co', 'WITH', 'c.shopId = co.id')
                ->where('c.userId =:uid')
                ->andWhere('co.shopStatus =:shopstatus')
                ->andWhere('co.isActive =:isactive')
                ->andWhere('c.balanceShots >:balaceshots')
                ->setParameter('uid', $user_id)
                ->setParameter('shopstatus', 1)
                ->setParameter('isactive', 1)
                ->setParameter('balaceshots', 0)
                ->setFirstResult($limit_start)
                ->setMaxResults($limit_size)
                ->getQuery();

        $result_res = $result->getResult();
        
        return $result_res;
    }
    
    /**
     * Get citizen wallet gift cards
     * @param int $user_id
     * @param int $limit_start
     * @param int $limit_size
     * @return array
     */
    public function getCitizenGiftCards($user_id, $limit_start, $limit_size)
    {
       //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.shopId, c.totalGiftCard, c.balanceGiftCard')
                ->innerJoin('StoreManagerStoreBundle:Store', 'co', 'WITH', 'c.shopId = co.id')
                ->where('c.userId =:uid')
                ->andWhere('co.shopStatus =:shopstatus')
                ->andWhere('co.isActive =:isactive')
                ->andWhere('c.balanceGiftCard >:balancegiftcard')
                ->setParameter('uid', $user_id)
                ->setParameter('shopstatus', 1)
                ->setParameter('isactive', 1)
                ->setParameter('balancegiftcard', 0)
                ->setFirstResult($limit_start)
                ->setMaxResults($limit_size)
                ->getQuery();

        $result_res = $result->getResult();
        
        return $result_res;
    }
    
    
    /**
     * Get citizen wallet momosy cards
     * @param int $user_id
     * @param int $limit_start
     * @param int $limit_size
     * @return array
     */
    public function getCitizenMomosyCards($user_id, $limit_start, $limit_size)
    {
       //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c.shopId, c.totalMomosyCard, c.balanceMomosyCard')
                ->innerJoin('StoreManagerStoreBundle:Store', 'co', 'WITH', 'c.shopId = co.id')
                ->where('c.userId =:uid')
                ->andWhere('co.shopStatus =:shopstatus')
                ->andWhere('co.isActive =:isactive')
                ->andWhere('c.balanceMomosyCard >:balancemomosycard')
                ->setParameter('uid', $user_id)
                ->setParameter('shopstatus', 1)
                ->setParameter('isactive', 1)
                ->setParameter('balancemomosycard', 0)
                ->setFirstResult($limit_start)
                ->setMaxResults($limit_size)
                ->getQuery();

        $result_res = $result->getResult();
        
        return $result_res;
    }
    
    /**
     * Get Citizen balance
     * @param type $user_id
     */
    public function getCitizenBalance($user_id)
    {
        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('sum(c.balanceMomosyCard) as balanceMomosycard, sum(c.balanceShots) as balanceShots, sum(c.balanceGiftCard) as balanceGiftcard')
                ->innerJoin('StoreManagerStoreBundle:Store', 'co', 'WITH', 'c.shopId = co.id')
                ->groupBy('c.userId')
                ->where('c.userId =:uid')
                ->andWhere('co.shopStatus =:shopstatus')
                ->andWhere('co.isActive =:isactive')
                ->setParameter('uid', $user_id)
                ->setParameter('shopstatus', 1)
                ->setParameter('isactive', 1)
                ->getQuery();
      
        $result_res = $result->getResult();
       if($result_res){
        return $result_res[0];
       }
       return array();
    }
    
    /**
     * Get Total record count
     * @param int $user_id
     * $return int
     */
    public function citizenShotsCount($user_id)
    {
        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select()
                ->innerJoin('StoreManagerStoreBundle:Store', 'co', 'WITH', 'c.shopId = co.id')
                ->where('c.userId =:uid')
                ->andWhere('co.shopStatus =:shopstatus')
                ->andWhere('co.isActive =:isactive')
                ->andWhere('c.balanceShots >:balaceshots')
                ->setParameter('uid', $user_id)
                ->setParameter('shopstatus', 1)
                ->setParameter('isactive', 1)
                ->setParameter('balaceshots', 0)
                ->getQuery();

        $result_res = $result->getResult();
        
        return count($result_res);
    }
    
    /**
     * Get Total record count
     * @param int $user_id
     * $return int
     */
    public function citizenPurchaseCardsCount($user_id)
    {
        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select()
                ->innerJoin('StoreManagerStoreBundle:Store', 'co', 'WITH', 'c.shopId = co.id')
                ->where('c.userId =:uid')
                ->andWhere('co.shopStatus =:shopstatus')
                ->andWhere('co.isActive =:isactive')
                ->andWhere('c.balanceGiftCard >:balacegiftcard')
                ->setParameter('uid', $user_id)
                ->setParameter('shopstatus', 1)
                ->setParameter('isactive', 1)
                ->setParameter('balacegiftcard', 0)
                ->getQuery();

        $result_res = $result->getResult();
        
        return count($result_res);
    }

     /**
     * Get Total record count
     * @param int $user_id
     * $return int
     */
    public function citizenMomosyCardsCount($user_id)
    {
        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select()
                ->innerJoin('StoreManagerStoreBundle:Store', 'co', 'WITH', 'c.shopId = co.id')
                ->where('c.userId =:uid')
                ->andWhere('co.shopStatus =:shopstatus')
                ->andWhere('co.isActive =:isactive')
                ->andWhere('c.balanceMomosyCard >:balacemomosycard')
                ->setParameter('uid', $user_id)
                ->setParameter('shopstatus', 1)
                ->setParameter('isactive', 1)
                ->setParameter('balacemomosycard', 0)
                ->getQuery();

        $result_res = $result->getResult();
        
        return count($result_res);
    }
    
    /**
     * finding the shop wallet purchased card
     * @param int $shop_id
     * @param int $purchase_card_limit_start
     * @param int $purchase_card_limit_size
     */
    public function getShopWalletPurchasedCard($shop_id, $purchase_card_limit_start, $purchase_card_limit_size) {
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.totalGiftCard as total_gift_card, c.balanceGiftCard as balance_gift_card, c.userId as user_id')
                ->innerJoin('UserManagerSonataUserBundle:User', 'u', 'WITH', 'c.userId = u.id')
                ->where('c.shopId=:shop_id', 'u.enabled=:is_active', 'c.balanceGiftCard>:bal_card')
                ->setFirstResult($purchase_card_limit_start)
                ->setMaxResults($purchase_card_limit_size)
                ->setParameter('shop_id', $shop_id)
                ->setParameter('is_active', 1)
                ->setParameter('bal_card', 0);
        $query = $qb->getQuery(); 
        $response = $query->getResult();
        return $response;
    }

    /**
     * finding the shop wallet purchased card count
     * @param int $shop_id
     */
    public function getShopWalletPurchasedCardCount($shop_id) {
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $qb->select()
                ->innerJoin('UserManagerSonataUserBundle:User', 'u', 'WITH', 'c.userId = u.id')
                ->where('c.shopId=:shop_id', 'u.enabled=:is_active', 'c.balanceGiftCard>:bal_card')
                ->setParameter('shop_id', $shop_id)
                ->setParameter('is_active', 1)
                ->setParameter('bal_card', 0);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return count($response);
    }
    
    /**
     * finding the shop waller shots
     * @param int $shop_id
     * @param int $shots_card_limit_start
     * @param int $shots_card_limit_size
     * @return array
     */
    public function getShopWalletShots($shop_id, $shots_card_limit_start, $shots_card_limit_size) {
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.totalShots as total_shots, c.balanceShots as balance_shots, c.userId as user_id')
                ->innerJoin('UserManagerSonataUserBundle:User', 'u', 'WITH', 'c.userId = u.id')
                ->where('c.shopId=:shop_id', 'u.enabled=:is_active', 'c.balanceShots>:bal_shots')
                ->setFirstResult($shots_card_limit_start)
                ->setMaxResults($shots_card_limit_size)
                ->setParameter('shop_id', $shop_id)
                ->setParameter('is_active', 1)
                ->setParameter('bal_shots', 0);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
    }

    /**
     * finding the shop waller shots count
     * @param int $shop_id
     * @return int
     */
    public function getShopWalletShotsCount($shop_id) {
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $qb->select()
                ->innerJoin('UserManagerSonataUserBundle:User', 'u', 'WITH', 'c.userId = u.id')
                ->where('c.shopId=:shop_id', 'u.enabled=:is_active', 'c.balanceShots>:bal_shots')
                ->setParameter('shop_id', $shop_id)
                ->setParameter('is_active', 1)
                ->setParameter('bal_shots', 0);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return count($response);
    }
    
    /**
     * finding the momosy card for a shop
     * @param int $shop_id
     * @param int $momosy_card_limit_start
     * @param int $momosy_card_limit_size
     * @return array
     */
    public function getShopWalletMomosycard($shop_id, $momosy_card_limit_start, $momosy_card_limit_size) {
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.totalMomosyCard as total_momosy_card, c.balanceMomosyCard as balance_momosy_card, c.userId as user_id')
                ->innerJoin('UserManagerSonataUserBundle:User', 'u', 'WITH', 'c.userId = u.id')
                ->where('c.shopId=:shop_id', 'u.enabled=:is_active', 'c.balanceMomosyCard>:bal_momosy_card')
                ->setFirstResult($momosy_card_limit_start)
                ->setMaxResults($momosy_card_limit_size)
                ->setParameter('shop_id', $shop_id)
                ->setParameter('is_active', 1)
                ->setParameter('bal_momosy_card', 0);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
    }
    
    /**
     * finding the count of shop wallet momosy card
     * @param int $shop_id
     * @return int
     */
    public function getShopWalletMomosycardCount($shop_id) {
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.totalMomosyCard as total_momosy_card, c.balanceMomosyCard as balance_momosy_card, c.userId as user_id')
                ->innerJoin('UserManagerSonataUserBundle:User', 'u', 'WITH', 'c.userId = u.id')
                ->where('c.shopId=:shop_id', 'u.enabled=:is_active', 'c.balanceMomosyCard>:bal_momosy_card')
                ->setParameter('shop_id', $shop_id)
                ->setParameter('is_active', 1)
                ->setParameter('bal_momosy_card', 0);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return count($response);
    }
}
