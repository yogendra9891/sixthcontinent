<?php

namespace UserManager\Sonata\UserBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use UserManager\Sonata\UserBundle\Document\GroupMedia;

/**
 * GroupMongoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GroupMongoRepository extends DocumentRepository {

    public function getGroupSearchList($group_list, $txt_search, $limit_start, $limit_length) {
        $results = array();
        //get all groups assigned to user
        $qb = $this->createQueryBuilder();
        $results = $qb->field('title')->equals(new \MongoRegex('/.*' . $txt_search . '.*/i'))
                ->field('is_delete')->notEqual(1)
                ->addOr($qb->expr()->field('id')->in($group_list))
                ->addOr($qb->expr()->field('group_status')->equals(1)) //get public record
                ->sort('id', 'desc')
                ->limit($limit_length)
                ->skip($limit_start)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $results;
    }

    /**
     * Get user created grops list
     * @param int $owner_id
     * @param int $limit_size
     * @param int $limit_start
     * @return array
     */
    public function getUserCreatedGroup($owner_id, $limit_size, $limit_start) {
        $results = array();
        //get all groups assigned to user
        $qb = $this->createQueryBuilder();
        $results = $qb->field('owner_id')->equals($owner_id)
                ->field('is_delete')->notEqual(1)
                ->sort('id', 'desc')
                ->limit($limit_size)
                ->skip($limit_start)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $results;
    }

    /**
     * Get user created grops list count
     * @param unknown_type $owner_id
     * @return int
     */
    public function getUserCreatedGroupCount($owner_id) {
        $results = array();
        //get all groups assigned to user
        $qb = $this->createQueryBuilder();
        $results = $qb->field('owner_id')->equals($owner_id)
                ->field('is_delete')->notEqual(1)
                ->getQuery()
                ->execute()
                ->toArray(false);

        return count($results);
    }

    public function getGroupSearchListCount($group_list, $txt_search) {
        $results = array();
        //get all groups assigned to user
        $qb = $this->createQueryBuilder();
        $results = $qb->count()->field('title')->equals(new \MongoRegex('/.*' . $txt_search . '.*/i'))
                ->field('is_delete')->notEqual(1)
                ->addOr($qb->expr()->field('id')->in($group_list))
                ->addOr($qb->expr()->field('group_status')->equals(1)) //get public record
                ->getQuery()
                ->execute();
        return $results;
    }

    /**
     * Get group owner id.
     * @param unknown_type $group_id
     */
    public function getGroupOwnerId($group_id) {
        $results = array();
        //get all groups assigned to user
        $qb = $this->createQueryBuilder();
        $results = $qb->field('id')->equals($group_id)
                ->getQuery()
                ->execute()
                ->toArray(false);

        return $results[0]->getOwnerId();
    }

    public function getGroupJoinNotificationsDetail($group_notification_id) {
        $resp_data = array();

        //get group id
        foreach ($group_notification_id as $group_notification_single_id) {
            $groups[] = $group_notification_single_id['group_id'];
        }



        foreach ($group_notification_id as $group_notification) {
            $sender_id = $group_notification['sender_id'];
            $request_id = $group_notification['request_id'];
            $group_id = $group_notification['group_id'];
            $group_info = $this->getGroupDetail($group_notification['group_id']);
            $group_name = $group_info->getTitle();
            $group_type = $group_info->getGroupStatus();
            $resp_data[] = array('sender_id' => $sender_id, 'request_id' => $request_id, 'group_id' => $group_id, 'group_name' => $group_name, 'group_type' => $group_type);
        }


        return $resp_data;
    }

    /**
     * 
     * @param type $group_notification_id
     * @return type
     */
    public function getAllGroupJoinNotificationsDetail($group_notification_id) {
        $resp_data = array();

        //get group id
        foreach ($group_notification_id as $group_notification_single_id) {
            $groups[] = $group_notification_single_id['group_id'];
        }
        foreach ($group_notification_id as $group_notification) {
            $sender_id = $group_notification['sender_id'];
            $receiver_id = $group_notification['receiver_id'];
            $request_id = $group_notification['request_id'];
            $group_id = $group_notification['group_id'];
            //$group_info = $this->getGroupDetail($group_notification['group_id']);
            $resp_data[] = array('sender_id' => $sender_id, 'receiver_id' => $receiver_id, 'request_id' => $request_id);
        }


        return $resp_data;
    }

    /**
     * Get group detail
     * @param int $group_id
     */
    public function getGroupDetail($group_id) {
        $results = array();
        //get all groups assigned to user
        $qb = $this->createQueryBuilder();
        $results = $qb->field('id')->equals($group_id)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $results[0];
    }

  /**
     * Get group owner id.
     * @param unknown_type $group_id
     */
    public function getSearchGroupAll($searchstring, $offset, $limit) {
        $results = array();

        //get all groups assigned to user
        $qb = $this->createQueryBuilder();
        $results = $qb
                ->field('title')->equals(new \MongoRegex('/.*' . $searchstring . '.*/i'))
                ->field('is_delete')->notEqual(1)
                ->field('group_status')->equals(1)
                ->sort('id', 'desc')
                ->limit($limit)
                ->skip($offset)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $results;
    }
    
     /**
     * Get group owner id.
     * @param unknown_type $group_id
     */
    public function getSearchGroupAllcount($searchstring) {
        $results = array();

        //get all groups assigned to user
        $qb = $this->createQueryBuilder();
        $results = $qb
                ->field('title')->equals(new \MongoRegex('/.*' . $searchstring . '.*/i'))
                ->field('is_delete')->notEqual(1)
                ->field('group_status')->equals(1)
                ->sort('id', 'desc')
                ->getQuery()
                ->execute()
                ->toArray(false);
        $res=count($results);
        return $res;
    }

    
    /**
     * Get group details
     * @param type $group_ids
     * @return type
     */
    public function getNotificationGroupDetail($group_ids) {
        $results = array();
        //get all groups assigned to user
        $qb = $this->createQueryBuilder();
        $results = $qb->field('id')->in($group_ids)
                ->field('is_delete')->notEqual(1)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $results;
    }

    /**
     * Check Active groups
     * @param type $group_ids
     * @return type
     */
    public function checkActiveGroup($group_id) {
        $results = array();
        //get all groups assigned to user
        $qb = $this->createQueryBuilder();
        $results = $qb->field('id')->equals($group_id)
                ->field('is_delete')->notEqual(1)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $results;
    }

    /**
     * finding the group info..
     * @param array $group_ids
     * @return array object.
     */
    public function getGroupInfo($group_ids) {
        $final_result = array();
        //get all groups info by ids
        $qb = $this->createQueryBuilder();
        $results = $qb->field('id')->in($group_ids)
                ->getQuery()
                ->execute()
                ->toArray(false);

        //making the key value array.
        foreach ($results as $result) {
            $final_result[$result->getId()] = $result;
        }
        return $final_result;
    }
    /**
     * finding the group info..
     * @param array $group_ids
     * @return array object.
     */
    public function getAllGroupInfo($group_ids) {
        
        $final_result = array();
        //get all groups info by ids
        if(count($group_ids)>0) {
            $qb = $this->createQueryBuilder();
            $results = $qb->field('id')->in($group_ids)
                    ->getQuery()
                    ->execute()
                    ->toArray(false);
            return $results;
        }
        
        return $final_result;
    }

    /**
     * Get friend group list
     * @param unknown_type $user_id
     * @return array
     */
    public function getFriendGroupList($user_id, $friend_id) {
        $groups = array();
        $results = array();
        $friend_id = (int) $friend_id;
        //get all groups assigned to user
        $qb = $this->createQueryBuilder();
        $results = $qb->field('owner_id')->equals($friend_id)
                ->field('group_status')->equals(1)
                ->getQuery()
                ->execute()
                ->toArray(false);
        //store group id in array
        foreach ($results as $result) {
            $groups[] = array('id' => $result->getId());
        }

        return $groups;
    }
    /*********************************/
    /**
        * Edit the post rate
        * @param type $rate_id
        * @return boolean
        */
        public function editPostRate($rate_id, $arrayPostRate, $post_id) {
            $result = $this->createQueryBuilder('post')
                    ->update()
                    ->field('id')->equals($post_id)
                    ->field('rate.id')->equals($rate_id)
                    ->field("rate.$")->set($arrayPostRate)
                    ->getQuery()
                    ->execute();
            return true;
        }
    /*********************************/
    
        
     /**
     * Get get active group for particular user array
     * @param unknown_type $group_ids
     * @return array
     */
    public function getActiveGroups($group_ids) {
                
                $active_groups = array();
                //get all groups assigned to user
		$qb     = $this->createQueryBuilder();
		$ActiveGroupResults = $qb->field('id')->in($group_ids)
                                        ->field('is_delete')->notEqual(1)
                                        ->getQuery()
                                        ->execute()
                                        ->toArray(false);
		
		//store group id in array
		foreach($ActiveGroupResults as $ActiveGroup){
			$active_groups[] = $ActiveGroup->getId();
		}
                               
                return $active_groups;
    }    
        
}
