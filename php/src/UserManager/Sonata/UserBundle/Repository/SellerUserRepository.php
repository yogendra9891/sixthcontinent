<?php

namespace UserManager\Sonata\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Utility\UtilityBundle\Utils\Utility;
use Utility\UtilityBundle\Utils\Response as Resp;

/**
 * SellerUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SellerUserRepository extends EntityRepository implements ContainerAwareInterface
{
    
    
    /**
     * @var ContainerInterface
     */
    private $container;

    public function setContainer(ContainerInterface $container = null)
    {
        $this->container = $container;
    }
    
    /**
     * Search seller user
     * @param string $searchstring
     * @param int $offset
     * @param int $limit
     * @return object array
     */
    public function searchSellerByEmailId($user_id, $shop_id, $search_text, $limit_start, $limit_size) {
        //get bucket path
        $searchstring = addslashes(Utility::getTrimmedString($search_text));
        $seller_table = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:SellerUser')->getTableName();
        $condition = "where t1.enabled=1 and t1.seller_profile =1";
        //check for search text
        if($search_text != '') {
            $condition = $condition." and ((st.owner_id = $user_id) OR (t1.id not in ((select seller_id from $seller_table))))";
            $condition = $condition. " and t1.username like :searchstring";
        }
        
        //check for store and owner id
        if($shop_id != false) {
            $condition = $condition." and st.owner_id = $user_id";
            $condition = $condition." and st.shop_id = $shop_id";
        }      
        $condition = $condition. " GROUP BY id";
        $limit_condition = " limit $limit_size offset $limit_start";

        $sql = "SELECT @user_id := t1.id as id, "
                . "t1.firstname as firstname,"
                . "t1.lastname as lastname,"
                . "t1.email as email,"
                . "if(t1.phone is NULL, '',t1.phone) as phone "
                . "from fos_user_user as t1 "
                . " left join $seller_table as st on t1.id = st.seller_id "
                . " $condition $limit_condition";
        $param['searchstring'] = "%$searchstring%";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute($param);
        $result = $stmt->fetchAll();
        return $result;
    }
    
    
     /**
     * count Search seller user
     * @param string $searchstring
     * @param int $offset
     * @param int $limit
     * @return object array
     */
    public function searchSellerByEmailIdCount($user_id, $shop_id, $search_text, $limit_start, $limit_size) {
        $result_count = 0;
        $searchstring = addslashes(Utility::getTrimmedString($search_text));
        $seller_table = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:SellerUser')->getTableName();
        $condition = "where t1.enabled=1 and t1.seller_profile =1";
        //check for search text
        if($search_text != '') {
            $condition = $condition." and ((st.owner_id = $user_id) OR (t1.id not in ((select seller_id from $seller_table))))";
            $condition = $condition. " and t1.username like :searchstring";
        }
        
        //check for store and owner id
        if($shop_id != false) {
            $condition = $condition." and st.owner_id = $user_id";
            $condition = $condition." and st.shop_id = $shop_id";
        }      
        $condition = $condition. " GROUP BY id";

        $sql = "SELECT @user_id := t1.id as id "
                . "from fos_user_user as t1 "
                . " left join $seller_table as st on t1.id = st.seller_id "
                . " $condition ";
        
        $param['searchstring'] = "%$searchstring%";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute($param);
        $result = $stmt->fetchAll();
        if(count($result) > 0) {
            $result_count = count($result);
        }
        return $result_count;
    }
    
    /**
     * Search seller user
     * @param string $searchstring
     * @param int $offset
     * @param int $limit
     * @return object array
     */
    public function searchSellerByEmailId_old($user_id, $shop_id, $search_text, $limit_start, $limit_size) {
        //get bucket path
        $searchstring = addslashes(Utility::getTrimmedString($search_text));
        $condition = "where t1.enabled=1 and t1.seller_profile =1 and st.owner_id = $user_id";
        //check for search text
        if($search_text != '') {
             $condition = $condition. " and t1.username like :searchstring";
        }
        
        //check for store id
        if($shop_id != false) {
            $condition = $condition." and st.shop_id = $shop_id";
        }      
        $condition = $condition. " GROUP BY id";
        $limit_condition = " limit $limit_size offset $limit_start";
        
        $seller_table = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:SellerUser')->getTableName();
        
        $sql = "SELECT @user_id := t1.id as id,"
                . "t1.firstname as firstname,"
                . "t1.lastname as lastname,"
                . "t1.email as email,"
                . "if(t1.phone is NULL, '',t1.phone) as phone "
                . "from fos_user_user as t1 "
                . " inner join $seller_table as st on t1.id = st.seller_id "
                . " $condition $limit_condition";
        $param['searchstring'] = "%$searchstring%";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute($param);
        $result = $stmt->fetchAll();
        return $result;
    }
    
    /**
     * count Search seller user
     * @param string $searchstring
     * @param int $offset
     * @param int $limit
     * @return object array
     */
    public function searchSellerByEmailIdCount_old($user_id, $shop_id, $search_text, $limit_start, $limit_size) {
        //get bucket path
        $result_count = 0;
        $searchstring = addslashes(Utility::getTrimmedString($search_text));
        $condition = "where t1.enabled=1 and t1.seller_profile =1 and st.owner_id = $user_id";
        //check for search text
        if($search_text != '') {
             $condition = $condition. " and t1.username like :searchstring";
        }
        //check for store id
        if($shop_id != false) {
            $condition = $condition." and st.shop_id = $shop_id";
        }    
        
        $seller_table = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:SellerUser')->getTableName();       
        $sql = "SELECT count(distinct st.seller_id) as total_record "
                . "from fos_user_user as t1 "
                . " inner join $seller_table as st on t1.id = st.seller_id "
                . "$condition";
        $param['searchstring'] = "%$searchstring%";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute($param);
        $result = $stmt->fetchAll();
        
        if(count($result) > 0) {
            $result_count = $result[0]['total_record'];
        }
        return $result_count;
    }
    
    /**
     *  function for getting the list of all the stores for a seller 
     * @param type $user_id
     * @param type $limit_start
     * @param type $limit_size
     */
    public function searchSellerStores($user_id,$language_code,$limit_start, $limit_size) {
        //finding the base path of aws and bucket name
        $aws_link = $this->container->getParameter('aws_base_path');
        $aws_bucket= $this->container->getParameter('aws_bucket');
        $aws_path  = $aws_link.'/'.$aws_bucket;
        $image_path = $aws_path . $this->container->getParameter('store_album_media_path');
        
        $condition = "where s.is_active = 1 and (su.seller_id = $user_id OR co.user_id = $user_id ) ";
        $condition = $condition." limit $limit_size offset $limit_start";
        
           $sql = "SELECT distinct((@store_id := s.id)) as id, 
                s.email as email, 
                s.description as description, 
                s.parent_store_id as parentStoreId, 
                s.phone as phone, 
                s.business_name as businessName, 
                s.legal_status as legalStatus, 
                s.business_type as businessType, 
                s.business_country as businessCountry, 
                s.business_region as businessRegion, 
                s.business_city as businessCity, 
                s.business_address as businessAddress, 
                s.zip as zip, 
                s.province as province, 
                s.vat_number as vatNumber, 
                s.iban as iban, 
                s.map_place as mapPlace, 
                s.latitude as latitude, 
                s.longitude as longitude, 
                s.store_image as storeImage, 
                s.is_allowed as isAllowed, 
                s.is_active as isActive, 
                s.created_at as createdAt, 
                s.payment_status as paymentStatus, 
                s.name as name,
                s.shop_status as shopStatus, 
                s.avg_rate as shopRating,
                s.vote_count as vote_count,
                s.sale_catid as catogory_id,
                s.sale_subcatid as sub_category_id,
                s.credit_card_status as creditCardStatus, 
                0 as citizen_income,
                s.new_contract_status as new_contract_status,   
                (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_catid and bcc.lang_code = '" . $language_code . "') as shop_category,
                (select bcc.category_name from BusinessCategory as bc left join BusinessCategoryCode bcc on bcc.category_code = bc.name where bc.id = s.sale_subcatid and bcc.lang_code = '" . $language_code . "') as shop_sub_category,         
                @image_name := sm.image_name as image_name, 
                @album_id := sm.album_id as album_id,
                if(@album_id IS NULL,if(bc.image_thumb is NULL ,'',bc.image_thumb),if(@album_id > 0, 
                concat(concat(concat(concat(concat('".$image_path."', @store_id),'/thumb/'),@album_id),'/'),@image_name),
                concat(concat(concat('".$image_path."', @store_id),'/thumb/'),@image_name))) as profile_image_thumb,

                if(@album_id IS NULL,if(bc.image is NULL ,'',bc.image),if(@album_id > 0, 
                concat(concat(concat(concat(concat('".$image_path."', @store_id),'/original/'),@album_id),'/'),@image_name),
                concat(concat(concat('".$image_path."', @store_id),'/original/'),@image_name))) as profile_image_original, 
                if($user_id = fav.user_id, 1, 0) as is_fav 
                FROM Store s
                left JOIN SellerUser as su on su.shop_id = s.id
                LEFT JOIN StoreMedia sm ON s.store_image = sm.id 
                left join  BusinessCategory as bc on s.sale_catid = bc.id
                INNER JOIN UserToStore co ON s.id = co.store_id and co.role = 15
                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
                $condition";
       $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;
    }
    
    
    /**
     *  function for getting the list of all the stores for a seller 
     * @param type $user_id
     * @param type $limit_start
     * @param type $limit_size
     */
    public function searchSellerStoresCount($user_id,$language_code) {       
        $result_count = 0;       
        $condition = "where s.is_active = 1 and (su.seller_id = $user_id OR co.user_id = $user_id ) ";
        
           $sql = "SELECT count(distinct s.id) as total_count 
                FROM Store s
                left JOIN SellerUser as su on su.shop_id = s.id
                LEFT JOIN StoreMedia sm ON s.store_image = sm.id 
                left join  BusinessCategory as bc on s.sale_catid = bc.id
                INNER JOIN UserToStore co ON s.id = co.store_id and co.role = 15
                LEFT JOIN Favourite as fav on (s.id = fav.store_id and fav.user_id = $user_id )
                $condition";
       $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        if(count($result) > 0) {
           $result_count = $result[0]['total_count'];
        }
        return $result_count;
    }

}
