<?php
namespace UserManager\Sonata\UserBundle\Repository;
use Doctrine\ORM\EntityRepository;
/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class User extends EntityRepository
{
    
    private  $image_path = '/uploads/users/media/thumb/'; 
    
        /**
	 * Search user
	 * @param string $username
	 * @param int $offset
	 * @param int $limit
	 * @return object array
	 */
	public function searchByUsername($userName, $offset, $limit,$user_id=0)
	{ 
                $trimuserName = str_replace(' ', '', $userName);
		$qb = $this->createQueryBuilder('u');
  
                $searchLike = $qb->expr()->concat($qb->expr()->concat('u.firstname',$qb->expr()->literal(' ')), 'u.lastname');
                $searchIn = $qb->expr()->concat('u.firstname', 'u.lastname');
		$qb->where('u.enabled =:isactive')
                    ->andWhere( 
                      $qb->expr()->orX(
                        $qb->expr()->like('u.username', ':user'),
                        $qb->expr()->like('u.firstname', ':user'),
                        $qb->expr()->like('u.lastname', ':user'),
                        $qb->expr()->like($searchIn, ':trimuser'),
                        $qb->expr()->like($searchLike, ':user')
                    ),
                    'u.id != :userId'        
                )
		->setParameter('user', $userName.'%')
                ->setParameter('trimuser', $trimuserName.'%')
		->setParameter('isactive','1')
		->setFirstResult( $offset )
                ->setParameter('userId',$user_id)
		->setMaxResults( $limit );
		 $query = $qb->getQuery();
		 $result = $query->getResult();                 
		 return $result;
                 
	}
        
        /**
	 * Search user and stores
	 * @param string $searchstring
	 * @param int $offset
	 * @param int $limit
	 * @return object array
	 */
	public function searchByAllProfiles($searchstring, $offset, $limit, $aws_bucket)
	{
            $image_path = $aws_bucket.$this->image_path;
            $searchstring = addslashes($searchstring);
            //die;
            $store_table = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();
            $trimsearchName = str_replace(' ', '', $searchstring);
            $sql = "(SELECT @user_id := t1.id as id,"
                    . "t1.username as name,"
                    . "' ' as business_name,"
                    . "t1.firstname as firstname,"
                    . "t1.lastname as last_name,"
                    . "t1.email as  email,"
                    . "t1.enabled as status,"
                    . "@album_id := cast(t1.album_id as CHAR CHARACTER SET utf8)  as album_id,"
                    . "@user_image := t1.profile_image_name as profile_image,"
                    . " if(@album_id IS NULL, cast('' as CHAR CHARACTER SET utf8) , if(@album_id = '0',concat(cast('https://s3.amazonaws.com/sixthcontinent/uploads/users/media/thumb' as CHAR CHARACTER SET utf8),'/',cast(@user_id as CHAR CHARACTER SET utf8),'/',cast(@user_image as CHAR CHARACTER SET utf8)),concat(cast('https://s3.amazonaws.com/sixthcontinent/uploads/users/media/thumb' as CHAR CHARACTER SET utf8),'/',cast(@user_id as CHAR CHARACTER SET utf8),'/',cast(@album_id as CHAR CHARACTER SET utf8),'/',cast(@user_image as CHAR CHARACTER SET utf8))))  as thumb_path,"
                    . "t1.country as country,"
                    . "cu.city as city,"
                    . "'U' as type "
                    . "from fos_user_user as t1 
                       left join CitizenUser as cu on t1.id = cu.user_id where (t1.firstname like :searchstring OR t1.lastname like :searchstring OR t1.username like :searchstring OR concat(concat(t1.firstname,' '),t1.lastname) like :searchstring OR concat(TRIM(t1.firstname),TRIM(t1.lastname)) like :trimsearchName) AND enabled=1) 
                         UNION
                   (SELECT @store_id := t2.id as id,
                   t2.name,
                   t2.business_name,
                   ' ' as firstname,
                   ' ' as last_name,
                   ' ' as email,
                   t2.shop_status as status,
                   @store_album_id := sm.album_id as album_id,
                   @image_name := sm.image_name as profile_image,
                   if(@store_album_id IS NULL, if(bc.image_thumb is NULL ,cast('' as CHAR CHARACTER SET utf8),cast(bc.image_thumb as CHAR CHARACTER SET utf8)) ,if(@store_album_id > 0, 
                   concat(cast('https://s3.amazonaws.com/sixthcontinent/uploads/documents/stores/gallery/' as CHAR CHARACTER SET utf8), cast(@store_id as CHAR CHARACTER SET utf8),'/thumb/',cast(@store_album_id as CHAR CHARACTER SET utf8),'/',cast(@image_name as CHAR CHARACTER SET utf8)),
                   concat(cast('https://s3.amazonaws.com/sixthcontinent/uploads/documents/stores/gallery/' as CHAR CHARACTER SET utf8), cast(@store_id as CHAR CHARACTER SET utf8),'/thumb/',cast(@image_name as CHAR CHARACTER SET utf8)))) as thumb_path,
                   '',
                   '',
                   'S' 
                   from ".$store_table." as t2 "
                    . " LEFT JOIN StoreMedia as sm on sm.id = t2.store_image"
                    . " left join  BusinessCategory as bc on t2.sale_catid = bc.id"
                    . " where (t2.name like :searchstring_store or t2.business_name like :searchstring_store) and t2.shop_status = 1 and t2.is_active = 1) limit $offset,$limit";
            $param['trimsearchName'] = "$trimsearchName%";
            $param['searchstring'] = "$searchstring%";
            $param['searchstring_store'] = "%$searchstring%";
            $stmt = $this->getEntityManager()
                    ->getConnection()
                    ->prepare($sql);
            $stmt->execute($param);
            $result = $stmt->fetchAll();
            
            
            //$result = json_encode($result);
            return $result;
        }
       
         /**
	 * Search all  users 
	 * @param string $searchstring
	 * @param int $offset
	 * @param int $limit
	 * @return object array
	 */
	public function searchAllUserProfiles($searchstring, $offset, $limit, $aws_bucket)
	{
            $image_path = $aws_bucket.$this->image_path;
            //die;
            //$store_table = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();
            $trimsearchName = str_replace(' ', '', $searchstring);
            $sql = "(SELECT @user_id := t1.id as id,"
                    . "t1.username as name,"
                    . "' ' as business_name,"
                    . "t1.firstname as firstname,"
                    . "t1.lastname as last_name,"
                    . "t1.email as  email,"
                    . "t1.enabled as status,"
                    . "@album_id := cast(t1.album_id as CHAR CHARACTER SET utf8)  as album_id,"
                    . "@user_image := t1.profile_image_name as profile_image,"
                    . " if(@album_id IS NULL, cast('' as CHAR CHARACTER SET utf8) , if(@album_id = '0',concat(cast('https://s3.amazonaws.com/sixthcontinent/uploads/users/media/thumb' as CHAR CHARACTER SET utf8),'/',cast(@user_id as CHAR CHARACTER SET utf8),'/',cast(@user_image as CHAR CHARACTER SET utf8)),concat(cast('https://s3.amazonaws.com/sixthcontinent/uploads/users/media/thumb' as CHAR CHARACTER SET utf8),'/',cast(@user_id as CHAR CHARACTER SET utf8),'/',cast(@album_id as CHAR CHARACTER SET utf8),'/',cast(@user_image as CHAR CHARACTER SET utf8))))  as thumb_path,"
                    . "'U' as type "
                    . "from fos_user_user as t1 where (t1.firstname like '$searchstring%' OR t1.lastname like '$searchstring%' OR t1.username like '$searchstring%' OR concat(concat(t1.firstname,' '),t1.lastname) like '$searchstring%' OR concat(t1.firstname,t1.lastname) like '$trimsearchName%') AND enabled=1) 
                         limit $offset,$limit";
            $stmt = $this->getEntityManager()
                    ->getConnection()
                    ->prepare($sql);
            $stmt->execute();
            $result = $stmt->fetchAll();
            
            
            //$result = json_encode($result);
            return $result;
        }
        /**
	 * get count of  all  users searched
	 * @param string $searchstring
	 * @param int $offset
	 * @param int $limit
	 * @return count object array
	 */
        public function countsearchUserProfiles($searchstring, $aws_bucket)
	{
            $image_path = $aws_bucket.$this->image_path;
            //die;
            //$store_table = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();
            $trimsearchName = str_replace(' ', '', $searchstring);
            $sql = "(SELECT @user_id := t1.id as id,"
                    . "t1.username as name,"
                    . "' ' as business_name,"
                    . "t1.firstname as firstname,"
                    . "t1.lastname as last_name,"
                    . "t1.email as  email,"
                    . "t1.enabled as status,"
                    . "@album_id := cast(t1.album_id as CHAR CHARACTER SET utf8)  as album_id,"
                    . "@user_image := t1.profile_image_name as profile_image,"
                    . " if(@album_id IS NULL, cast('' as CHAR CHARACTER SET utf8) , if(@album_id = '0',concat(cast('https://s3.amazonaws.com/sixthcontinent/uploads/users/media/thumb' as CHAR CHARACTER SET utf8),'/',cast(@user_id as CHAR CHARACTER SET utf8),'/',cast(@user_image as CHAR CHARACTER SET utf8)),concat(cast('https://s3.amazonaws.com/sixthcontinent/uploads/users/media/thumb' as CHAR CHARACTER SET utf8),'/',cast(@user_id as CHAR CHARACTER SET utf8),'/',cast(@album_id as CHAR CHARACTER SET utf8),'/',cast(@user_image as CHAR CHARACTER SET utf8))))  as thumb_path,"
                    . "'U' as type "
                    . "from fos_user_user as t1 where (t1.firstname like '$searchstring%' OR t1.lastname like '$searchstring%' OR t1.username like '$searchstring%' OR concat(concat(t1.firstname,' '),t1.lastname) like '$searchstring%' OR concat(t1.firstname,t1.lastname) like '$trimsearchName%') AND enabled=1) 
                        ";
            $stmt = $this->getEntityManager()
                    ->getConnection()
                    ->prepare($sql);
            $stmt->execute();
            $result = $stmt->fetchAll();
            $res=count($result);
            
            
            //$result = json_encode($result);
            return $res;
        }
       
        
        /**
         * Function to retrieve s3 server base
         */
        public function getS3BaseUri() {
       //finding the base path of aws and bucket name
       $aws_base_path = $this->container->getParameter('aws_base_path');
       $aws_bucket    = $this->container->getParameter('aws_bucket');
       $full_path     = $aws_base_path.'/'.$aws_bucket;
       return $full_path;
       }
	
	/**
	 * 
	 * @param string $userName
	 */
	public function searchByUsernameCount($userName)
	{
		$trimuserName = str_replace(' ', '', $userName);
		$qb = $this->createQueryBuilder('u');
  
                $searchLike = $qb->expr()->concat($qb->expr()->concat('u.firstname',$qb->expr()->literal(' ')), 'u.lastname');
                $searchIn = $qb->expr()->concat('u.firstname', 'u.lastname');
		$qb->where('u.enabled =:isactive')
                    ->andWhere( 
                      $qb->expr()->orX(
                        $qb->expr()->like('u.username', ':user'),
                        $qb->expr()->like('u.firstname', ':user'),
                        $qb->expr()->like('u.lastname', ':user'),
                        $qb->expr()->like($searchIn, ':trimuser'),
                        $qb->expr()->like($searchLike, ':user')
                    )
                )

		->setParameter('user', $userName.'%')
                ->setParameter('trimuser', $trimuserName.'%')
		->setParameter('isactive','1');
		 $query = $qb->getQuery();
                
		 $result = $query->getResult();
		return count($result);
	}
        
        /**
         * 
         * @param type $user_id
         * @param type $profile_type
         * @return type
         */
        public function getMultiProfile1($user_id, $profile_type)
        {
            echo $user_id.$profile_type;
            die;
           //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
            $query->select('c.id, c.username, c.email, co.firstName, co.lastName, co.gender, co.birthDate, co.phone, co.country, co.street, co.profileType, co.createdAt')
                ->innerJoin('UserManagerSonataUserBundle:UserMultiProfile', 'co', 'WITH', 'c.id = co.userId')
                ->where('co.profileType =:profile_type')
                ->andWhere('c.id =:userid')
                ->setParameter('userid', $user_id)
                ->setParameter('profile_type', $profile_type);

        $result = $query ->getQuery();

        $result_res = $result->getResult();
        if(count($result_res)>0){
        return $result_res[0];
        }
        
           //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
            $query->select('c.id, c.username, c.email')
                  ->where('c.id =:userid')
                  ->setParameter('userid', $user_id);
        $result = $query ->getQuery();

        $result_res = $result->getResult();
        return $result_res[0];
        }
        
        /**
         * 
         * @param type $user_id
         * @param type $profile_type
         * @return type
         */
        public function getMultiProfile($user_id, $profile_type)
        {
            if($profile_type == 1)
            {
                $base_profile = $this->getBaseProfile($user_id);
            }
        }
        
        public function getBaseProfile($user_id)
        {
           
        //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
            $query->select('c.id, c.username, c.email, c.dateOfBirth, c.firstname, c.lastname, c.gender, c.country')
                  ->where('c.id =:userid')
                  ->setParameter('userid', $user_id);
        $result = $query ->getQuery();
        $result_res = $result->getResult();
        
        $result_res = $result->getResult();
        }
        
        /**
         * 
         * @return array
         */
        public function getUserForTemp($limit)
        {
           
            $qb = $this->createQueryBuilder('u');
                $qb->select('u.id,u.email,u.firstname,u.lastname')->where($qb->expr()->gt('u.id', $limit));
                $query = $qb->getQuery();
		$result = $query->getResult();
		return $result;
        }
        
      /**
       * 
       * @param type $id
       * @param type $image_name
       * @param type $album_id
       * @return boolean
       */
        public function updateFieldsInFos($id,$image_name,$album_id) {

            $sql = "UPDATE fos_user_user set profile_image_name = '$image_name',album_id ='$album_id' WHERE id = $id";
            $stmt = $this->getEntityManager()
                          ->getConnection()
                          ->prepare($sql);
                  $stmt->execute();
                  return true;
                    
        }
        
        /**
         * Get multiple users object
         * @param array $users
         * @return array
         */
        public function getMultiUserObject($users){
            $qb = $this->createQueryBuilder('c');
            $query = $qb->select()
               ->where(
                        $qb->expr()->In('c.id', ':users')
                    )
                ->setParameter('users', $users);

        $result = $query ->getQuery();

        $result_res = $result->getResult();
        return $result_res;
        }
        
         /**
         * disable accounts after 48 hours of registration 
         */
        public function disableexpiredaccounts($verify_time_param){
          
            $sql = "UPDATE fos_user_user set enabled = 0 WHERE verification_token != '' and created_at <= DATE_SUB(NOW(),INTERVAL $verify_time_param HOUR)";
            $stmt = $this->getEntityManager()
                          ->getConnection()
                          ->prepare($sql);
            $stmt->execute();
            return true;   
        }
        
    /**
     * set current language
     * @param array $user_id
     * @param array $current_lang
     * @return boolean
     */
    public function updateCurrentLanguage($user_id, $current_lang){
        
        $updated_at = new \DateTime('now');
        //create the query        
        $query = $this->createQueryBuilder('user')
                  ->update()
                  ->set('user.currentLanguage', ':lang')
                  ->set('user.updatedAt', ':date')
                  ->where('user.id =:id')
                  ->setParameter('lang',$current_lang)
                  ->setParameter('date',$updated_at)
                  ->setParameter('id', (int)$user_id)
                  ->getQuery();
        $response = $query->getResult();
        return true;
       
    }
    
    public function getUsersByIdsAndKeyword($users, $searchKeyword='', $offset=null, $limit=null){
            $trimSearchKeyword = str_replace(' ', '', $searchKeyword);
            $qb = $this->createQueryBuilder('c');
            $query = $qb->select()
               ->where(
                        $qb->expr()->In('c.id', ':users'),
                       $qb->expr()->orX(
                            $qb->expr()->like('c.firstname', ':searchKeyword'),
                            $qb->expr()->like('c.lastname', ':searchKeyword'),
                            $qb->expr()->like('c.username', ':searchKeyword'),
                            $qb->expr()->like("concat(concat(c.firstname,' '),c.lastname)", ':searchKeyword'),
                            $qb->expr()->like("concat(c.firstname,c.lastname)", ':trimSearchKeyword')
                        )   
                    );
            
            if(!is_null($offset)){
                $offset = (int)$offset;
                $query = $query->setFirstResult($offset);
            }
            if(!is_null($limit)){
                $limit = (int)$limit;
                $query = $query->setMaxResults($limit);
            }
                
            $result = $query->setParameter('users', $users)
                    ->setParameter('searchKeyword', '%'.$searchKeyword.'%')
                    ->setParameter('trimSearchKeyword', $trimSearchKeyword.'%')
                    ->getQuery();
        $result_res = $result->getResult();
        return $result_res;
    }
    
    public function getUsersByIdsAndKeywordCount($users, $searchKeyword=''){
            $trimSearchKeyword = str_replace(' ', '', $searchKeyword);
            $qb = $this->createQueryBuilder('c');
            $query = $qb->select('c.id')
               ->where(
                        $qb->expr()->In('c.id', ':users'),
                       $qb->expr()->orX(
                            $qb->expr()->like('c.firstname', ':searchKeyword'),
                            $qb->expr()->like('c.lastname', ':searchKeyword'),
                            $qb->expr()->like('c.username', ':searchKeyword'),
                            $qb->expr()->like("concat(concat(c.firstname,' '),c.lastname)", ':searchKeyword'),
                            $qb->expr()->like("concat(c.firstname,c.lastname)", ':trimSearchKeyword')
                        )   
                    );
            
              
            $result = $query->setParameter('users', $users)
                    ->setParameter('searchKeyword', '%'.$searchKeyword.'%')
                    ->setParameter('trimSearchKeyword', $trimSearchKeyword.'%')
                    ->getQuery();
        $result_res = $result->getResult();
        return count($result_res);
    }
    
    public function getRandomUsers($count){
        $query_builder = $this->_em->createQueryBuilder('u');
        $result = $query_builder->select('u.id')
                ->from('UserManagerSonataUserBundle:User', 'u')
                ->addSelect('RAND() as HIDDEN rand')
                ->orderBy('rand')
                ->setMaxResults($count)
                ->getQuery()
                ->getResult();
        return $result;
    }
    
    /**
     * Get all registerd emails
     * @param array $emails
     * @return array
     */
    public function getRegistredUserEmails($emails)
    {
        $result_res = array();
         $qb = $this->createQueryBuilder('c');
            $query = $qb->select('c.email,c.id')
               ->where(
                        $qb->expr()->In('c.email', ':emails')
                    );
            $result = $query->setParameter('emails', $emails)
                    ->getQuery();
        $result_res = $result->getResult();
        if($result_res){
            return $result_res;
        }
         return $result_res;
    }
    
   /**
     * Get registered emails
     * @param int $filter
     */
    public function getRegistredUsers($offset, $limit)
    {
         $result_res = array();
         $qb = $this->createQueryBuilder('c');
         $query = $qb->select('c.id,c.username,c.email,c.createdAt')
                     ->where('c.citizenProfile =:citizen')
                     ->setParameter('citizen',1)
                     ->setFirstResult($offset)
                     ->setMaxResults($limit)
                    ->getQuery();
        $result_res = $query->getResult();
        if($result_res){
            return $result_res;
        }
         return $result_res;
    }
    
        /**
         * Get multiple users object
         * @param array $users
         * @return array
         */
        public function getMultiUserObjectFromEmail($users){
            $qb = $this->createQueryBuilder('c');
            $query = $qb->select()
               ->where(
                        $qb->expr()->In('c.email', ':users')
                    )
                ->setParameter('users', $users);

        $result = $query ->getQuery();

        $result_res = $result->getResult();
        return $result_res;
        }
        
    /**
     * Get registered emails
     * @param int $filter
     */
    public function getRegistredUsersProfile($offset, $limit)
    {
         $result_res = array();
         $qb = $this->createQueryBuilder('c');
         $query = $qb->select("c.id, CONCAT(c.firstname,c.lastname) as name, c.email as email_id, c.gender as sex, c.country as country, co.address as address_l1, co.mapPlace as address_l2, co.latitude, co.longitude, co.city")
                     ->leftJoin('UserManagerSonataUserBundle:CitizenUser', 'co', 'WITH', 'c.id = co.userId')
                     ->where('c.citizenProfile =:citizen')
                     ->setParameter('citizen',1)
                     ->setFirstResult($offset)
                     ->setMaxResults($limit)
                    ->getQuery();
        $result_res = $query->getResult();
        if($result_res){
            return $result_res;
        }
         return $result_res;
    }
    
    
}
