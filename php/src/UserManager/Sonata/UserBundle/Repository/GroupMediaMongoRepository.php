<?php

namespace UserManager\Sonata\UserBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * GroupMediaMongoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GroupMediaMongoRepository extends DocumentRepository
{
        public function removeGroupMedia($group_id)
        {
            $qb = $this->createQueryBuilder();
            $qb->remove()
            ->field('group_id')->equals($group_id)
            ->getQuery()
            ->execute();
            return true;
        }
        
       /**
     * removing the album media data
     * @param type $album_id
     * @return boolean
     */
    public function removeAlbumMedia($album_id)
    {
            $qb = $this->createQueryBuilder();
            $qb->remove()
                ->field('albumid')->equals($album_id)
                ->getQuery()
                ->execute();
            return true;
    }
    
    /**
     * removing the feature image
     * @param int $group_id
     * @return boolean
     */
    public function removeFeaturedImage($group_id){
            $this->createQueryBuilder('GroupMedia')
                    ->update()
                    ->multiple(true)
                    ->field('profile_image')->set(0)
                    ->field('group_id')->equals($group_id)
                    ->getQuery()
                    ->execute();
            
          return true;
    }
    
     /**
    * Publish the store post
    * @param array $media_array
    * @return boolean
    */
       public function publishClubAlbumImage($media_array,$tagged_friends = array()){
           $qb = $this->createQueryBuilder()
               ->update()
               ->multiple(true)
               ->field('media_status')->set(1)
               ->field('tagged_friends')->set($tagged_friends)
               ->field('id')->in($media_array)
               ->getQuery()
               ->execute();
           return true;
   }
   
   public function getGroupMedia($groupIds) {
      $results = array();
        //get all groups assigned to user
        $qb = $this->createQueryBuilder();
        $results = $qb->select('group_id','media_name','albumid')->field('group_id')->in($groupIds)
                   ->field('profile_image')->equals(1)
                   ->getQuery()
                   ->execute()
                   ->toArray(false);
        return $results;
   }
   
    /**
     * finding the group profile medias
     * @param array $group_ids
     * @return array object
     */
    public function getGroupProfileMediasInfo($group_ids) {
        $final_result = array();
        //get all groups info by ids
        $qb = $this->createQueryBuilder();
        $results = $qb->field('group_id')->in($group_ids)
                ->field('profile_image')->equals(1)
                ->getQuery()
                ->execute()
                ->toArray(false);

        //making the key value array.
        foreach ($results as $result) {
            $final_result[$result->getGroupId()] = $result;
        }
        return $final_result;
    }
    
    /**
     * finding the group media information
     * @param array $group_ids
     * @return array object
     */
    public function getGroupMediaInfo($group_ids) {
        $final_result = array();
        //get all groups info by ids
        $qb = $this->createQueryBuilder();
        $results = $qb->field('group_id')->in($group_ids)
                ->getQuery()
                ->execute()
                ->toArray(false);

        //making the key value array.
        foreach ($results as $result) {
            $final_result[$result->getGroupId()][] = $result;
        }
        return $final_result;        
    }
    
    /**
     * find the group media info
     * @param array $group_album_ids
     */
    public function getAlbumsMedia($group_album_ids) {
        $final_result = array();
        //get all groups info by ids
        $qb = $this->createQueryBuilder();
        $results = $qb->field('albumid')->in($group_album_ids)
                      ->field('media_status')->equals(1)
                      ->getQuery()
                      ->execute()
                      ->toArray(false);

        //making the key value array.
        foreach ($results as $result) {
            $final_result[$result->getAlbumid()][] = $result;
        }
        return $final_result;        
    }
    
     /**
     * Edit the club album image rate
     * @param type $rate_id
     * @return boolean
     */
    public function editMediaRate($rate_id, $arrayMediaRate, $media_id) {
        $result = $this->createQueryBuilder('media')
                ->update()
                ->field('id')->equals($media_id)
                ->field('rate.id')->equals($rate_id)
                ->field("rate.$")->set($arrayMediaRate)
                ->getQuery()
                ->execute();
        return true;
    }
    
    /**
    * Find multiple groups profile media info
    * @param array $media_ids
    * @return document object
    */
   public function findGroupProfileMediaInfo($media_ids) {
        $qb = $this->createQueryBuilder();
        $results = $qb->field('id')->in($media_ids)
                       ->getQuery()
                       ->execute()
                       ->toArray(false);
        return $results;       
   }
   /**
    * 
    * @param type $media_id
    * @return type
    */
    public function getCommentsOfClubAlbumMedia($media_id, $limit= 5, $resultWithCount=false){
        $commentCount=0;
        if($resultWithCount){
            $qb = $this->createQueryBuilder('m')
                ->field('media_status')->equals(1)
                ->field('id')->equals($media_id)
                ->map('function() { var _length = this.comment ? this.comment.length : 0; emit("totalComment", _length); }')
                ->reduce('function(k, vals) {
                     var sum = 0;
                    vals.forEach(function(value) {
                        sum += value;
                    });
                    return sum;
                }');
            $comments = $qb->getQuery()->getSingleResult();
            $commentCount = $comments ? $comments['value'] : 0;
        }
        
        $result = $this->createQueryBuilder('mediacomments')
                  ->selectSlice('comment', -$limit)
                  ->field('media_status')->equals(1)
                  ->field('id')->equals($media_id)
                  ->getQuery()
                  ->getSingleResult();
            
        return $resultWithCount==true ? array('result'=>$result, 'size'=>$commentCount) : array('result'=>$result);
    }
    
    public function getCommentedUserIds($media_id){
        $qb = $this->createQueryBuilder('m')
                ->field('media_status')->equals(1)
                ->field('id')->equals($media_id)
                ->map('function() { 
                    var authors=[]; 
                    for(var i=0; i<this.comment.length; i++){
                        authors[i] = this.comment[i]["comment_author"];
                    }
                    emit(this._id, authors); }')
                ->reduce('function(k, vals) {
                    return vals;
                }');
            $comments = $qb->getQuery()->getSingleResult();
            return isset($comments['value']) ? $comments['value'] : array();
    }
    
    public function getTotalCommentsOfClubAlbumMedia($media_id, $limit= 5, $resultWithCount=false,$start=null){
        $commentCount=0;
	$qb = $this->createQueryBuilder('m')
		->field('media_status')->equals(1)
		->field('id')->equals($media_id)
		->map('function() { var _length = this.comment ? this.comment.length : 0; emit("totalComment", _length); }')
		->reduce('function(k, vals) {
			 var sum = 0;
			vals.forEach(function(value) {
				sum += value;
			});
			return sum;
		}');
	$comments = $qb->getQuery()->getSingleResult();
	$commentCount = $comments ? $comments['value'] : 0;
        
        $query = $this->createQueryBuilder('mediacomments');
        if($commentCount > 0) {
            if(!is_null($start)){
                $offset = $commentCount - ($start+$limit);
                if($offset<0){
                    $offset = 0;
                    $limit = ($commentCount-$start)>0 ? ($commentCount-$start) : 0;
                }
                $query =  $query->selectSlice('comment', $offset, $limit);
            }else{
                    $query =  $query->selectSlice('comment', -$limit);
            }  
        }
        
        $result = $query->field('media_status')->equals(1)
                        ->field('id')->equals($media_id)
                        ->getQuery()
                        ->getSingleResult();

          return $resultWithCount==true ? array('result'=>$result, 'size'=>$commentCount) : array('result'=>$result);
    }
    
    /**
     * 
     * @param type $media_id
     * @param type $comment_id
     * @return type
     */
    public function getCommentedMedias($media_id, $comment_id){
        $qb = $this->createQueryBuilder('m')
                ->field('media_status')->equals(1)
                ->field('id')->equals($media_id)
                ->field('comment.id')->equals($comment_id)
                ->map('function() { 
                    var medias=[]; 
                    var commentId = ObjectId("'.$comment_id.'");
                    for(var i=0; i<this.comment.length; i++){
                        var id = this.comment[i]._id;
                        if(commentId.toString()==id.toString()){
                            medias = this.comment[i]["medias"];
                        }
                    }
                    emit(this._id, medias); }')
                ->reduce('function(k, vals) {
                    return vals;
                }');
               
            $comments = $qb->getQuery()->getSingleResult();
            return isset($comments['value']) ? $comments['value'] : array();
    }
    
}