<?php

namespace UserManager\Sonata\UserBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * UserToGroupMongoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserToGroupMongoRepository extends DocumentRepository
{
	/**
	 * Get group list
	 * @param unknown_type $user_id
	 * @return array
	 */
	public function getGroupList($user_id)
	{
            $groups = array();
		//get all groups assigned to user
		$qb     = $this->createQueryBuilder();
		$results = $qb->field('user_id')->equals($user_id)
                        ->field('is_blocked')->notEqual(1)
		->getQuery()
		->execute()
		->toArray(false);
		
		//store group id in array
		foreach($results as $result){
			$groups[] = $result->getGroupId();
		}
		
		return $groups;
	}
        
        /**
	 * Get group list
	 * @param unknown_type $user_id
	 * @return array
	 */
	public function getMemberGroupList($user_id)
	{
            $groups = array();
		//get all groups assigned to user
		$qb     = $this->createQueryBuilder();
		$results = $qb->field('user_id')->equals($user_id)
                        ->field('is_blocked')->notEqual(1)
                ->getQuery()
		->execute()
		->toArray(false);
		
		//store group id in array
		foreach($results as $result){
			$groups[] = array('id'=>$result->getGroupId());
		}
		
		return $groups;
	}
        
        /**
	 * Get group list
	 * @param unknown_type $user_id
	 * @return array
	 */
	public function getCountMemberGroupList($user_id)
	{
            $groups = array();
		//get all groups assigned to user
		$qb     = $this->createQueryBuilder();
		$results = $qb->field('user_id')->equals($user_id)
                        ->field('is_blocked')->notEqual(1)
		->getQuery()
		->execute()
		->toArray(false);
		
		
		return count($results);
	}
	
	/**
	 * Method to check, if user is already the member of the group
	 * @param int $user_id
	 * @param int $group_id
	 */
	public function joinPublicGroup($user_id, $group_id)
	{
		//check if user is the member of the group
		//get all groups assigned to user
		$qb     = $this->createQueryBuilder();
		$results = $qb->count()
                        ->field('user_id')->equals($user_id)
		->field('group_id')->equals($group_id)
		->getQuery()
		->execute();
		
		//already member
		return $results>0 ? 1 : 0;
	}
        
        /**
	 * Method to check, if user is already the member of the group
	 * @param int $user_id
	 * @param int $group_id
	 */
        public function joinPrivateGroup($user_id, $group_id)
        {
		//check if user is the member of the group
		//get all groups assigned to user
		$qb     = $this->createQueryBuilder();
		$results = $qb->count()
                        ->field('user_id')->equals($user_id)
		->field('group_id')->equals($group_id)
		->getQuery()
		->execute();

              
		//already member
		return $results>0 ? 1 : 0;
        }
        
        /**
         * Get Group Member count
         * @param array
         * @return int
         */
        public function getGroupMemberCount($group_ids)
        {
        $results = array();
        //get all groups assigned to user
        $qb = $this->createQueryBuilder();
        $results = $qb->field('group_id')->in($group_ids)
                ->field('is_blocked')->notEqual(1)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $results;
            
        }
        
        /**
         * finding the users of group ids.
         * @param array $group_ids
         * @return array object
         */
        public function findGroupMemberUser($group_ids) {
            $final_result = array();
            //get all groups info by ids
            $qb = $this->createQueryBuilder();
            $results = $qb->field('group_id')->in($group_ids)
                    ->field('is_blocked')->notEqual(1)
                    ->getQuery()
                    ->execute()
                    ->toArray(false);

            //making the key value array.
            foreach ($results as $result) {
                $final_result[$result->getGroupId()][] = $result;
            }
            return $final_result;              
        }
        
        public function findClubMembers($clubId){
            $qb = $this->createQueryBuilder();
            $results = $qb->field('group_id')->equals($clubId)
                    ->field('is_blocked')->notEqual(1)
                    ->getQuery()
                    ->execute()
                    ->toArray(false);
            return $results;
        }
        
        public function findClubMembersCount($clubId){
            $qb = $this->createQueryBuilder();
            $results = $qb
                    ->count()
                    ->field('group_id')->equals($clubId)
                    ->field('is_blocked')->notEqual(1)
                    ->getQuery()
                    ->execute();
            return $results;
        }
        
        public function isActiveMember($user_id, $clubId){
            $qb = $this->createQueryBuilder();
            $results = $qb
                    ->count()
                    ->field('group_id')->equals($clubId)
                    ->field('user_id')->equals($user_id)
                    ->field('is_blocked')->notEqual(1)
                    ->getQuery()
                    ->execute();
            
            return $results>0?1:0;
        }
        
        public function isBlockedMember($user_id, $clubId){
            $qb = $this->createQueryBuilder();
            $results = $qb
                    ->count()
                    ->field('group_id')->equals($clubId)
                    ->field('user_id')->equals($user_id)
                    ->field('is_blocked')->equals(1)
                    ->getQuery()
                    ->execute();
            
            return $results>0?1:0;
        }
        
        public function getBlockedMembers(array $clubIds){
            $qb = $this->createQueryBuilder();
            $results = $qb
                    ->field('group_id')->in($clubIds)
                    ->field('is_blocked')->equals(1)
                    ->getQuery()
                    ->execute()
                    ->toArray(false);

            $final_result=array();
            if($results){
                foreach ($results as $result) {
                    $final_result[$result->getGroupId()][] = $result->getUserId();
                }
            }
            return $final_result;
        }
        
        /**
         * Get status of a member, if he is blocked/active
         * @param array $clubIds
         * @param int $userId
         * @return array
         */
        public function getMemberStatus(array $clubIds, $userId){
            $qb = $this->createQueryBuilder();
            $results = $qb
                    ->field('group_id')->in($clubIds)
                    ->field('user_id')->equals((int)$userId)
                    ->getQuery()
                    ->execute()
                    ->toArray(false);

            $final_result=array();
            if($results){
                foreach ($results as $result) {
                    $isBlocked = $result->getIsBlocked();
                    $final_result[$result->getGroupId()]['is_member'] = $isBlocked ? 2 : 1;
                }
            }
            if(!empty($clubIds)){
                foreach($clubIds as $cId){
                    if(!key_exists($cId, $final_result)){
                        $final_result[$cId]['is_member'] = 0;
                    }
                }
            }
            return $final_result;
        }
        
}