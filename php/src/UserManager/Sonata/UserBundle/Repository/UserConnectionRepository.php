<?php
namespace UserManager\Sonata\UserBundle\Repository;
use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserConnectionRepository extends EntityRepository
{

	/**
	 * Check for the duplicate friend request. If friend request
	 * is sent already, then it will not send again.
	 * @param int $connectFrom
	 * @param int $connectTo
	 * @return int
	 */
	public function checkFriendRequest($connectFrom, $connectTo, $reqTypeArr=array())
	{
		//initialise the array
		$friend_req = array();

		//create the query
		$query = $this->createQueryBuilder('c')
		->where('c.connectFrom =:fid', 'c.connectTo =:sid', 'c.professionalRequest =:profReq','c.personalRequest =:perfReq')
                ->setMaxResults(1)
                ->orderBy('c.id', 'DESC')
		->setParameter('fid', $connectFrom)
		->setParameter('sid', $connectTo)
                ->setParameter('profReq', $reqTypeArr['professionalRequest'])
                ->setParameter('perfReq', $reqTypeArr['personalRequest'])
		->getQuery();

		$friend_req = $query->getResult();
                
		$result_count = count($friend_req);
		return $result_count;
	}

	/**
	 * Check for the received friend request
	 * @param int $connectFrom
	 * @param int $connectTo
	 * @return int
	 */
	public function checkReceivedFriendRequest($connectFrom, $connectTo, $reqTypeArr)
	{
		//initialise the array
		$friend_req = array();

		//create the query
		$query = $this->createQueryBuilder('c')
		->where('c.connectFrom =:sid', 'c.connectTo =:fid', 'c.professionalRequest =:profReq','c.personalRequest =:perfReq')
		->setParameter('fid', $connectFrom)
		->setParameter('sid', $connectTo)
                ->setParameter('profReq', $reqTypeArr['professionalRequest'])
                ->setParameter('perfReq', $reqTypeArr['personalRequest'])
		->getQuery();

		$friend_req = $query->getResult();

		$result_count = count($friend_req);
		return $result_count;
	}
        
        /**
	 * Check for the personal/professional status
	 * @param int $connectFrom
	 * @param int $connectTo
	 * @return int
	 */
	public function checkFriendShipStatusAll($connectFrom, $connectTo){
		//initialise the array
		$friend_req = array();
		//create the query
		$query = $this->createQueryBuilder('c')
		->where('c.connectFrom =:fid', 
                        'c.connectTo =:sid', 
                        'c.personalRequest =:perfreq', 
                        'c.professionalRequest =:profReq', 
                        'c.personalStatus =:perSt', 
                        'c.professionalStatus =:profSt')
		->setParameter('fid', $connectFrom)
		->setParameter('sid', $connectTo)
                ->setParameter('perfreq', 0)
		->setParameter('profReq', 0)
                ->setParameter('perSt', 0)
		->setParameter('profSt', 0)
                ->setMaxResults(1)
		->getQuery();
		$friend_req = $query->getResult();
		$result_count = count($friend_req);
		return $result_count;
	}


	/**
	 * Response the friend request. personal/professional
	 * 1 for accept. 0 for deny.
	 * @param int $user_id
	 * @param int $fid
	 * @param int $action
	 */
	public function responseFriendRequest($user_id, $fid, $action, $reqTypeArr)
	{ 
		//accept request
		if($action == 1){
			//initialise the array
			$friend_req = array();
			//create the query
			$query = $this->createQueryBuilder('c')
			->update()
                        ->set('c.professionalStatus', $reqTypeArr['professionalStatus'])
                        ->set('c.personalStatus', $reqTypeArr['personalStatus'])
                        ->set('c.professionalRequest', $reqTypeArr['professionalRequest'])
                        ->set('c.personalRequest', $reqTypeArr['personalRequest']) 
                        ->set('c.status', '1')
			->where('c.connectFrom =:fid', 'c.connectTo =:sid')
			->setParameter('fid', $fid)
			->setParameter('sid', $user_id)
			->getQuery();
			$reponse = $query->getResult();
                        
			if($reponse){
				return true;
			}
			return false;
		}

		//reject request
		if($action == 0){
                    //initialise the array
                    $friend_req = array();
                    //create the query
                    $qb = $this->createQueryBuilder('c');
                    $query = $qb->update()
                    ->set('c.professionalStatus', $reqTypeArr['professionalStatus'])
                    ->set('c.personalStatus', $reqTypeArr['personalStatus'])
                    ->set('c.professionalRequest', $reqTypeArr['professionalRequest'])
                    ->set('c.personalRequest', $reqTypeArr['personalRequest']) 
                    ->set('c.status', '0')
                    ->where(
                            $qb->expr()->orX(
                                    $qb->expr()->andX(
                                        'c.id =:rid', 'c.connectFrom =:fid', 'c.connectTo =:sid'
                                            ),
                                    $qb->expr()->andX(
                                        'c.id =:rid', 'c.connectFrom =:sid', 'c.connectTo =:fid'
                                            )
                                    )
                            )
                    ->setParameter('fid', $fid)
                    ->setParameter('sid', $user_id)
                    ->setParameter('rid', $reqTypeArr['id'])
                    ->getQuery();
                    $reponse = $query->getResult();
                        
                    //check if friend
//                    $is_friend = $this->checkFriendShipStatus($user_id, $fid);
//                    if($is_friend == 1){
//                        //create the query
//			$query = $this->createQueryBuilder('c')
//                        ->update()
//                        ->set('c.professionalStatus', $reqTypeArr['professionalStatus'])
//                        ->set('c.personalStatus', $reqTypeArr['personalStatus'])
//                        ->set('c.professionalRequest', $reqTypeArr['professionalRequest'])
//                        ->set('c.personalRequest', $reqTypeArr['personalRequest'])        
//                        ->where('c.connectFrom =:fid', 'c.connectTo =:sid')
//                        ->setParameter('fid', $user_id)
//                        ->setParameter('sid', $fid)
//                        ->getQuery();
//                        $reponse = $query->getResult();
//                    }
                    
                    // Check both friendship type rejected personal/professional
                    //delete row when all request rejected with a->b
                    $query = $this->createQueryBuilder('c')
                        ->delete()            
                        ->where('c.connectFrom =:fid', 
                                'c.connectTo =:sid', 
                                'c.personalRequest =:perfreq', 
                                'c.professionalRequest =:profReq', 
                                'c.personalStatus =:perSt', 
                                'c.professionalStatus =:profSt')
                        ->setParameter('fid', $fid)
                        ->setParameter('sid', $user_id)
                        ->setParameter('perfreq', 0)
                        ->setParameter('profReq', 0)
                        ->setParameter('perSt', 0)
                        ->setParameter('profSt', 0)
                        ->getQuery();
                        $_reponse = $query->getResult();
                    
                    //delete row when all request rejected with b->a
                    $query = $this->createQueryBuilder('c')
                        ->delete()            
                        ->where('c.connectFrom =:sid', 
                                'c.connectTo =:fid', 
                                'c.personalRequest =:perfreq', 
                                'c.professionalRequest =:profReq', 
                                'c.personalStatus =:perSt', 
                                'c.professionalStatus =:profSt')
                        ->setParameter('fid', $user_id)
                        ->setParameter('sid', $fid)
                        ->setParameter('perfreq', 0)
                        ->setParameter('profReq', 0)
                        ->setParameter('perSt', 0)
                        ->setParameter('profSt', 0)
                        ->getQuery();
                        $_reponse = $query->getResult();
                        
                   /* $is_friend_all = $this->checkFriendShipStatusAll($fid, $user_id);
                    if($is_friend_all == 1){
                        // 
                        $query = $this->createQueryBuilder('c')
                        ->delete()
                        ->Where('c.connectFrom =:fid', 'c.connectTo =:sid')
                        ->setParameter('fid', $fid)
                        ->setParameter('sid', $user_id)
                        ->getQuery();
                        $reponse = $query->getResult();
                    }
                    
                    // Check both friendship type rejected personal/professional
                    $is_friend_all2 = $this->checkFriendShipStatusAll($user_id, $fid);
                    if($is_friend_all2 == 1){
                        // 
                        $query = $this->createQueryBuilder('c')
                        ->delete()
                        ->Where('c.connectFrom =:fid', 'c.connectTo =:sid')
                        ->setParameter('fid', $fid)
                        ->setParameter('sid', $user_id)
                        ->getQuery();
                        $reponse = $query->getResult();
                    }
                    
                   // delete both request
                    if($is_friend_all == 1 && $is_friend_all2 == 1){
                        // 
                        $query = $this->createQueryBuilder('c')
                        ->delete()
                        ->Where('c.connectFrom =:fid', 'c.connectTo =:sid')
                        ->setParameter('fid', $fid)
                        ->setParameter('sid', $user_id)
                        ->getQuery();
                        $reponse = $query->getResult();
                 
                        //
                        $query2 = $this->createQueryBuilder('c')
                        ->delete()
                        ->Where('c.connectFrom =:fid', 'c.connectTo =:sid')
                        ->setParameter('sid', $fid)
                        ->setParameter('fid', $user_id)
                        ->getQuery();
                        $reponse = $query2->getResult();
                    }*/
                    
                    if($reponse){
                            return true;
                    }
                    return false;
		}
	}
	
	
	/**
	 * Search friends
	 * @param string $username
	 * @param int $offset
	 * @param int $limit
	 * @return object array
	 */
	public function searchFriendByUsername_old($userId, $userName, $offset, $limit)
	{
		$response = array();
		$qb = $this->createQueryBuilder('c');
		$query = $qb
		->select('co')
		->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.connectTo = co.id')
        ->where('c.connectFrom =:sfrom','c.status =:status','co.enabled =:isactive')
        ->andWhere(
        		$qb->expr()->like('co.username', ':user')
        		)
		->setParameter('user','%'.$userName.'%')
		->setParameter('sfrom', $userId)
		->setParameter('status', '1')
		->setParameter('isactive','1')
		->setFirstResult( $offset )
		->setMaxResults( $limit )
		->getQuery();
		
		$response = $query->getResult();

		return $response;
	}
        
        /**
     * Search friends
     * @param string $username
     * @param int $offset
     * @param int $limit
     * @return object array
     */
    public function searchFriendByUsername($userId, $userName, $offset, $limit) {
        $response = array();
        $qb = $this->createQueryBuilder('c');
        $trimuserName = str_replace(' ', '', $userName);
        $searchLike = $qb->expr()->concat($qb->expr()->concat('co.firstname', $qb->expr()->literal(' ')), 'co.lastname');
        $searchIn = $qb->expr()->concat('co.firstname', 'co.lastname');
        $query = $qb
                ->select('co')
                ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.connectTo = co.id')
                ->where('c.connectFrom =:sfrom', 
                        $qb->expr()->orX(
                                'c.professionalStatus =:status',
                                'c.personalStatus =:status'
                                )
                        , 'co.enabled =:isactive')
//                ->andWhere(
//                        $qb->expr()->orX(
//                                $qb->expr()->eq('c.connectFrom', ':sfrom'), $qb->expr()->eq('c.connectTo', ':sfrom')
//                            )
//                        )
                ->andWhere(
                        $qb->expr()->orX(
                                $qb->expr()->like('co.username', ':user'), $qb->expr()->like('co.firstname', ':user'), $qb->expr()->like('co.lastname', ':user'), $qb->expr()->like($searchIn, ':trimuser'), $qb->expr()->like($searchLike, ':user')
                        )
                )
                //->setParameter('user','%'.$trimuserName.'%')
                ->setParameter('user', $userName . '%')
                ->setParameter('trimuser', $trimuserName . '%')
                ->setParameter('sfrom', $userId)
                ->setParameter('status', '1')
                ->setParameter('isactive', '1')
                ->setFirstResult($offset)
                ->setMaxResults($limit)
                ->getQuery();

        $response = $query->getResult();
        return $response;
    }
    
    public function getAllUserFriends($userId, $searchKeyword, $offset, $limit){
        $searchKeyword = addslashes($searchKeyword);
        $trimSearchKeyword = str_replace(' ', '', $searchKeyword);
        $userConnectionTable = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:UserConnection')->getTableName();
            $sql = "( ";
            $sql .= "SELECT t1.id as user_id "
                    . "from fos_user_user as t1 "
                    ." inner join $userConnectionTable as t2 on(t2.connect_to=t1.id) "
                    ."where (t1.firstname like '$searchKeyword%' OR t1.lastname like '$searchKeyword%' OR t1.username like '$searchKeyword%' OR concat(concat(t1.firstname,' '),t1.lastname) like '$searchKeyword%' OR concat(t1.firstname,t1.lastname) like '$trimSearchKeyword%') AND t1.enabled=1"
                    ." AND (t2.personal_status=1 OR t2.professional_status=1) AND t2.connect_from='$userId'"; 
            $sql .= " ) ";
            $sql .= " UNION ";
            $sql .= " ( ";
            $sql .= "SELECT t1.id as user_id "
                    . "from fos_user_user as t1 "
                    ." inner join $userConnectionTable as t2 on(t2.connect_from=t1.id) "
                    ."where (t1.firstname like '$searchKeyword%' OR t1.lastname like '$searchKeyword%' OR t1.username like '$searchKeyword%' OR concat(concat(t1.firstname,' '),t1.lastname) like '$searchKeyword%' OR concat(t1.firstname,t1.lastname) like '$trimSearchKeyword%') AND t1.enabled=1"
                    ." AND (t2.personal_status=1 OR t2.professional_status=1) AND t2.connect_to='$userId'"; 
            $sql .= " ) ";
            $sql .= " limit $offset,$limit";

            $stmt = $this->getEntityManager()
                    ->getConnection()
                    ->prepare($sql);
            $stmt->execute();
            $response = $stmt->fetchAll();
            
            $userIds = array();
            try{
                foreach($response as $_result){
                    array_push($userIds, $_result['user_id']);
                }
            } catch (Exception $ex) {

            }
            $userIds = array_unique($userIds);
            return $userIds;
    }
    
    public function getAllFriendsType($userId, $searchKeyword, $offset, $limit,$type = 0){
        $limit_condition = '';
        //check based on the type for the limit condition
        if($type == 0 ) {
            $limit_condition = "limit $offset,$limit";
        }
        $searchKeyword = addslashes($searchKeyword);
        $trimSearchKeyword = str_replace(' ', '', $searchKeyword);
        $userConnectionTable = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:UserConnection')->getTableName();
            $sql = "( ";
            $sql .= "SELECT t1.id as user_id ,t2.personal_status as personal_status,t2.professional_status as professional_status "
                    . "from fos_user_user as t1 "
                    ." inner join $userConnectionTable as t2 on(t2.connect_to=t1.id) "
                    ."where (t1.firstname like '$searchKeyword%' OR t1.lastname like '$searchKeyword%' OR t1.username like '$searchKeyword%' OR concat(concat(t1.firstname,' '),t1.lastname) like '$searchKeyword%' OR concat(t1.firstname,t1.lastname) like '$trimSearchKeyword%') AND t1.enabled=1"
                    ." AND (t2.personal_status=1 OR t2.professional_status=1) AND t2.connect_from='$userId'"; 
            $sql .= " ) ";
            $sql .= " UNION ";
            $sql .= " ( ";
            $sql .= "SELECT t1.id as user_id,t2.personal_status as personal_status,t2.professional_status as professional_status "
                    . "from fos_user_user as t1 "
                    ." inner join $userConnectionTable as t2 on(t2.connect_from=t1.id) "
                    ."where (t1.firstname like '$searchKeyword%' OR t1.lastname like '$searchKeyword%' OR t1.username like '$searchKeyword%' OR concat(concat(t1.firstname,' '),t1.lastname) like '$searchKeyword%' OR concat(t1.firstname,t1.lastname) like '$trimSearchKeyword%') AND t1.enabled=1"
                    ." AND (t2.personal_status=1 OR t2.professional_status=1) AND t2.connect_to='$userId'"; 
            $sql .= " ) ";
            $sql .= " $limit_condition";

            $stmt = $this->getEntityManager()
                    ->getConnection()
                    ->prepare($sql);
            $stmt->execute();
            $response = $stmt->fetchAll();
                        
            return $response;
    }
    
    public function getAllUserFriendsCount($userId, $searchKeyword){
        $searchKeyword = addslashes($searchKeyword);
        $trimSearchKeyword = str_replace(' ', '', $searchKeyword);
        $userConnectionTable = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:UserConnection')->getTableName();
           
        $sql = "( ";
            $sql .= "SELECT t1.id as user_id "
                    . "from fos_user_user as t1 "
                    ." inner join $userConnectionTable as t2 on(t2.connect_to=t1.id) "
                    ."where (t1.firstname like '$searchKeyword%' OR t1.lastname like '$searchKeyword%' OR t1.username like '$searchKeyword%' OR concat(concat(t1.firstname,' '),t1.lastname) like '$searchKeyword%' OR concat(t1.firstname,t1.lastname) like '$trimSearchKeyword%') AND t1.enabled=1"
                    ." AND (t2.personal_status=1 OR t2.professional_status=1) AND t2.connect_from='$userId'"; 
            $sql .= " ) ";
            $sql .= " UNION ";
            $sql .= " ( ";
            $sql .= "SELECT t1.id as user_id "
                    . "from fos_user_user as t1 "
                    ." inner join $userConnectionTable as t2 on(t2.connect_from=t1.id) "
                    ."where (t1.firstname like '$searchKeyword%' OR t1.lastname like '$searchKeyword%' OR t1.username like '$searchKeyword%' OR concat(concat(t1.firstname,' '),t1.lastname) like '$searchKeyword%' OR concat(t1.firstname,t1.lastname) like '$trimSearchKeyword%') AND t1.enabled=1"
                    ." AND (t2.personal_status=1 OR t2.professional_status=1) AND t2.connect_to='$userId'"; 
            $sql .= " ) ";

            $stmt = $this->getEntityManager()
                    ->getConnection()
                    ->prepare($sql);
            $stmt->execute();
            $response = $stmt->fetchAll();
            
            $userIds = array();
            try{
                foreach($response as $_result){
                    array_push($userIds, $_result['user_id']);
                }
            } catch (Exception $ex) {

            }
            //$userIds = array_unique($userIds);
            return count($userIds);
    }

    /**
	 * Search Non realtional user
	 * @param string $username
	 * @param int $offset
	 * @param int $limit
	 * @return object array
	 */
	public function searchNonRelationalUser($userId, $userName, $offset, $limit){
            // Get Relative Ids Using Native Query
            $userName = addslashes($userName);
            $relativesId = array();
            $sql = "SELECT GROUP_CONCAT(re.relative_id) AS relative_id FROM Relatives re WHERE user_id=".$userId;
            $stmt = $this->getEntityManager()
               ->getConnection()
               ->prepare($sql);
            $stmt->execute();
            $relativesId = $stmt->fetchAll();
            
            if(!empty($relativesId[0]['relative_id']))
                $arrImplode = $relativesId[0]['relative_id'];
             else 
                $arrImplode = 0;

            // Get Non Relative Users
            $response = array();
            
            
            $userConnectionTable = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:UserConnection')->getTableName();
            $sql = "( ";
            $sql .= "SELECT t1.id, t1.firstname, t1.lastname, t1.email "
                    . "from fos_user_user as t1 "
                    ." inner join $userConnectionTable as t2 on(t2.connect_to=t1.id) "
                    ."where (t1.firstname like '%$userName%' OR t1.lastname like '%$userName%' OR t1.username like '%$userName%') AND t1.enabled=1"
                    ." AND (t2.personal_status=1 OR t2.professional_status=1) AND t2.connect_from='$userId'"
                    ." AND  t1.id NOT IN($arrImplode)"; 
            $sql .= " ) ";
            $sql .= " UNION ";
            $sql .= " ( ";
            $sql .= "SELECT  t1.id, t1.firstname, t1.lastname, t1.email "
                    . "from fos_user_user as t1 "
                    ." inner join $userConnectionTable as t2 on(t2.connect_from=t1.id) "
                    ."where (t1.firstname like '%$userName%' OR t1.lastname like '%$userName%' OR t1.username like '%$userName%') AND t1.enabled=1"
                    ." AND (t2.personal_status=1 OR t2.professional_status=1) AND t2.connect_to='$userId'"
                    ." AND t1.id NOT IN($arrImplode)"; 
            $sql .= " ) ";
            $sql .= " LIMIT $offset, $limit";

            $stmt = $this->getEntityManager()
                    ->getConnection()
                    ->prepare($sql);
            $stmt->execute();
            $response = $stmt->fetchAll();
            
            return $response;
        }
        
        
        
        
        
	
        /**
	 * get  friends
	 * @param int $userId
	 * @return object array
	 */
	public function getMyFriends($userId)
	{
		$response = array();
		$qb = $this->createQueryBuilder('c');
		$query = $qb
		->select('c.connectTo')
		->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.connectTo = co.id')
                ->where('c.status =:status','co.enabled =:isactive')
                ->andWhere(
                    $qb->expr()->eq('c.connectFrom',':userid')
                )        
		->setParameter('userid',$userId)
		->setParameter('status', '1')
		->setParameter('isactive','1')
		->getQuery();
		
		$response = $query->getResult();
		return $response;
	}
	
	/**
	 * Search friends count
	 * @param string $username
	 * @param int $offset
	 * @param int $limit
	 * @return int
	 */
	public function searchFriendByUsernameCount($userId, $userName)
	{
		$response = array();
		$qb = $this->createQueryBuilder('c');
		$query = $qb
		->select('co')
		->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.connectTo = co.id')
        ->where('c.connectFrom =:sfrom',
                $qb->expr()->orX(
                                'c.professionalStatus =:status',
                                'c.personalStatus =:status'
                                )
                ,'co.enabled =:isactive')
        ->andWhere(
        		$qb->expr()->like('co.username', ':user')
        		)
		->setParameter('user','%'.$userName.'%')
		->setParameter('sfrom', $userId)
		->setParameter('status', '1')
		->setParameter('isactive','1')
		->getQuery();
		
		$response = $query->getResult();

		
		return count($response);
	}
	
         /**
         * Get pending friend request notification
         * @param int $user_id
         * @param int $offset
         * @param int $limit
         * @return type
         */
	public function pendingFriendrequest($user_id, $offset, $limit)
	{
		$response = array();
		$qb = $this->createQueryBuilder('c');
		$query = $qb
		->select('c')
		->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.connectTo = co.id')
		->where('c.connectTo =:sfrom',
                        $qb->expr()->orX(
                                $qb->expr()->andX(
                                        'c.professionalRequest =:request',
                                        'c.professionalStatus =:status'
                                        ),
                                $qb->expr()->andX(
                                        'c.personalRequest =:request',
                                        'c.personalStatus =:status'
                                        )
                                )
                        ,'co.enabled =:isactive')
		
		->setParameter('sfrom', $user_id)
		->setParameter('status', '0')
                ->setParameter('request', '1')
		->setParameter('isactive','1')
		->setFirstResult( $offset )
		->setMaxResults( $limit )
		->getQuery();
		$response = $query->getResult();
		return $response;
	}
        
        /**
         * Get pending friend request notification
         * @param int $user_id
         * @param int $offset
         * @param int $limit
         * @return type
         */
        public function pendingFriendrequestNotification($user_id)
	{
		$response = array();
		$qb = $this->createQueryBuilder('c');
		$query = $qb
		->select('c')
		->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.connectTo = co.id')
		->where('c.connectTo =:sfrom',
                        $qb->expr()->orX(
                                $qb->expr()->andX(
                                        'c.professionalRequest =:request',
                                        'c.professionalStatus =:status'
                                        ),
                                $qb->expr()->andX(
                                        'c.personalRequest =:request',
                                        'c.personalStatus =:status'
                                        )
                                )
                        ,'co.enabled =:isactive')
		->setParameter('sfrom', $user_id)
		->setParameter('status', '0')
		->setParameter('isactive','1')
                ->setParameter('request','1')
		->getQuery();
		
		$response = $query->getResult();
		return $response;
	}

        /**
	 * Check for the  friendship for two users
	 * @param int $connectFrom
	 * @param int $connectTo
	 * @return int
	 */
	public function checkFriendShip($connectFrom, $connectTo)
	{
		//initialise the array
		$friend_req = array();

		//create the query
		$qb = $this->createQueryBuilder('c');
                $query = $qb
                                ->where(
                                    $qb->expr()->orX(
                                            'c.professionalStatus =:status',
                                            'c.personalStatus =:status'
                                            ),
                                    $qb->expr()->orX(
                                            $qb->expr()->andX(
                                                    'c.connectFrom =:fid',
                                                    'c.connectTo =:sid'
                                                    ),
                                            $qb->expr()->andX(
                                                    'c.connectFrom =:sid',
                                                    'c.connectTo =:fid'
                                                    )
                                            )
                                    )
                                ->setMaxResults(1)
                                ->orderBy('c.id', 'DESC')
                                ->setParameter('fid', $connectFrom)
                                ->setParameter('sid', $connectTo)
                                ->setParameter('status', 1)
                                ->getQuery();

		$friend_req = $query->getResult();

		$result_count = count($friend_req);
		return $result_count;
	}
        
        /**
	 * Check for the personal/professional
	 * @param int $connectFrom
	 * @param int $connectTo
	 * @return int
	 */
	public function checkFriendShipStatus($connectFrom, $connectTo){
		//initialise the array
		$friend_req = array();
		//create the query
                $query = $this->createQueryBuilder('c')
                                ->where('c.connectFrom =:fid', 'c.connectTo =:sid')
                                ->setMaxResults(1)
                                ->orderBy('c.id', 'DESC')
                                ->setParameter('fid', $connectFrom)
                                ->setParameter('sid', $connectTo)
                                ->getQuery();
                $friend_req = $query->getResult();
                $result_count = count($friend_req);
                return $result_count;
	}

      /**
	 * Check for the  friend request sent for two users
	 * @param int $connectFrom
	 * @param int $connectTo
	 * @return int
	 */
        
	public function checkFriendrequestsent($connectFrom, $connectTo)
	{
		//initialise the array
		$friend_req = array();

		//create the query
		$qb = $this->createQueryBuilder('c');
                $query = $qb
		->where('c.connectFrom =:fid', 'c.connectTo =:sid', 
                        $qb->expr()->orX(
                                'c.professionalRequest =:status',
                                'c.personalRequest =:status'
                                )
                        )
                ->setMaxResults(1)
                ->orderBy('c.id', 'DESC')
		->setParameter('fid', $connectFrom)
		->setParameter('sid', $connectTo)
                ->setParameter('status', 1)
		->getQuery();

		$friend_req = $query->getResult();

		$result_count = count($friend_req);
		return $result_count;
	}
    
       
        
        /**
	 * Get for the friend request data Personal/Professional
	 * @param int $connectFrom
	 * @param int $connectTo
	 * @return array
	 */
	public function checkFriendRequestStatus($connectFrom, $connectTo){
            //initialise the array
            $friend_req = array();
            //create the query
            $qb = $this->createQueryBuilder('c');
            $query = $qb->select('c.id, c.professionalStatus, c.personalStatus, c.professionalRequest, c.personalRequest')
                        ->where('c.connectFrom =:fid', 'c.connectTo =:sid')
                        ->orderBy('c.id', 'DESC')
                        ->setMaxResults(1)
                        ->setParameter('fid', $connectFrom)
                        ->setParameter('sid', $connectTo)
                        ->getQuery();
                    $friend_req = $query->getResult();
            
            if(!empty($friend_req)){
                return $friend_req;
            } else {
                return $friend_req;
            }
	}
        
        /**
	 * Get for the friend request data Personal/Professional
	 * @param int $connectFrom
	 * @param int $connectTo
	 * @return array
	 */
	public function checkAllFriendRequestStatus($connectFrom, $connectTo, $requestType='all'){
            //initialise the array
            $friend_req = array();
            //create the query
            $qb = $this->createQueryBuilder('c');
            $query = $qb->select('c.id, c.professionalStatus, c.personalStatus, c.professionalRequest, c.personalRequest');
            switch($requestType){
                case 'all':
                    $query
                        ->where('c.connectFrom =:fid', 'c.connectTo =:sid')
                        ->orWhere(
                            $qb->expr()->andX(
                                    $qb->expr()->eq('c.connectFrom', ':sid'),
                                    $qb->expr()->eq('c.connectTo', ':fid')
                                    )
                            );
                    break;
                case 'persional':
                    $query
                        ->where('c.connectFrom =:fid', 'c.connectTo =:sid', 'c.personalRequest =1')
                        ->orWhere(
                            $qb->expr()->andX(
                                    $qb->expr()->eq('c.connectFrom', ':sid'),
                                    $qb->expr()->eq('c.connectTo', ':fid'),
                                    $qb->expr()->eq('c.personalRequest', '1')
                                    )
                            );
                    break;
                case 'professional':
                    $query
                        ->where('c.connectFrom =:fid', 'c.connectTo =:sid', 'c.professionalRequest =1')
                        ->orWhere(
                            $qb->expr()->andX(
                                    $qb->expr()->eq('c.connectFrom', ':sid'),
                                    $qb->expr()->eq('c.connectTo', ':fid'),
                                    $qb->expr()->eq('c.professionalRequest', '1')
                                    )
                            );
                    break;
            }
            
            $result = $query->orderBy('c.id', 'DESC')
                  ->setMaxResults(1)
                  ->setParameter('fid', $connectFrom)
                  ->setParameter('sid', $connectTo)
                  ->getQuery();
              $friend_req = $result->getResult();
            
            if(!empty($friend_req)){
                return $friend_req;
            } else {
                return $friend_req;
            }
	}
        
        /**
	 * Update record for request Personal/Professional
	 * 1 for accept. 0 for deny.
	 * @param int $user_id
	 * @param int $fid
	 * @param int $action
	 */
        public function updateFriendRequestAnother($id, $reqTypeArr){
            //initialise the array
            $friend_req = array();
            //create the query
            $query = $this->createQueryBuilder('c')
            ->update()
            ->set('c.personalStatus', $reqTypeArr['personalStatus'])
            ->set('c.professionalStatus', $reqTypeArr['professionalStatus'])
            ->set('c.professionalRequest', $reqTypeArr['professionalRequest'])
            ->set('c.personalRequest', $reqTypeArr['personalRequest']) 
            ->set('c.status', '1')
            ->where('c.id =:ID')
            ->setParameter('ID', $id)
            ->getQuery();
            $reponse = $query->getResult();

            if($reponse){
                    return true;
            }
            return false;
	}
        
        /**
	 * Check for the received friend request status Personal/Professional
	 * @param int $connectFrom
	 * @param int $connectTo
	 * @return int
	 */
	public function checkReceivedFriendRequestStatus($connectFrom, $connectTo, $reqTypeArr){
            //initialise the array
            $friend_req = array();
            //create the query
            $query = $this->createQueryBuilder('c')
            ->where('c.connectFrom =:sid', 'c.connectTo =:fid', 
                    'c.professionalRequest =:profReq',
                    'c.personalRequest =:perfReq', 
                    'c.personalStatus =:perStatus',
                    'c.professionalStatus =:profStatus')
            ->setMaxResults(1)
            ->orderBy('c.id', 'DESC')
            ->setParameter('fid', $connectTo)
            ->setParameter('sid', $connectFrom)
            ->setParameter('perStatus', $reqTypeArr['personalStatus'])
            ->setParameter('profStatus', $reqTypeArr['professionalStatus'])
            ->setParameter('profReq', $reqTypeArr['professionalRequest'])
            ->setParameter('perfReq', $reqTypeArr['personalRequest'])
            ->getQuery();
            $friend_req = $query->getResult();
            $result_count = count($friend_req);
            return $result_count;
	}
        
        /**
        * get friend visibity type (personal, professiosonl, both)
        * @param int $connectFrom
        * @param int $connectTo
        * @return int
        */
        public function getFriendRelationType($connectFrom, $connectTo){
            //initialise the array
            $friend_req = array();
            //create the query
            $qb = $this->createQueryBuilder('c');
            $query = $qb->select('c.id, c.professionalStatus, c.personalStatus, c.professionalRequest, c.personalRequest')
                ->where('c.connectFrom =:fid', 'c.connectTo =:sid')
                ->setMaxResults(1)
                ->orderBy('c.id', 'DESC')
                ->setParameter('fid', $connectFrom)
                ->setParameter('sid', $connectTo)
                ->getQuery();
            $friend_req1 = $query->getResult();
            
            
            $query = $qb->select('c.id, c.professionalStatus, c.personalStatus, c.professionalRequest, c.personalRequest')
                ->where($qb->expr()->andX(
                            $qb->expr()->eq( 'c.connectFrom', ':sid' ),
                            $qb->expr()->eq( 'c.connectTo', ':fid' )
                        )    
                )
                ->setMaxResults(1)
                ->orderBy('c.id', 'DESC')
                ->setParameter('fid', $connectFrom)
                ->setParameter('sid', $connectTo)
                ->getQuery();
            $friend_req2 = $query->getResult();
            $friendTypes = array();
            if(!empty($friend_req1)){
                if ($friend_req1[0]['professionalStatus'] == '1') {
                    $friendTypes['professionalStatus'] = 2;
                }
                if ($friend_req1[0]['personalStatus'] == '1') {
                    $friendTypes['personalStatus'] = 1;
                }
            }
            
            if(!empty($friend_req2)){
                if ($friend_req2[0]['professionalStatus'] == '1' and !isset($friendTypes['professionalStatus'])) {
                    $friendTypes['professionalStatus'] = 2;
                }
                if ($friend_req2[0]['personalStatus'] == '1' and !isset($friendTypes['personalStatus'])) {
                    $friendTypes['personalStatus'] = 1;
                }
            }
            
            return array_sum($friendTypes);

        }
        
        
        /**
	 * Check for the  friendship for two users
	 * @param int $connectFrom
	 * @param int $connectTo
	 * @return int
	 */
	public function checkIsFriend($connectFrom, $connectTo,$reqTypeArr = array("professionalStatus"=> '1', "personalStatus"=>'1'))
	{
		//initialise the array
		$friend_req = array();

		//create the query
		$query = $this->createQueryBuilder('c');
		$r = $query->where(
                        'c.connectFrom =:fid',
                        'c.connectTo =:sid',
                        $query->expr()->orX(
                            $query->expr()->eq( 'c.professionalStatus', ':profSts' ),
                            $query->expr()->eq( 'c.personalStatus', ':perfSts' )
                        )
                    )
		->orWhere( 
                    $query->expr()->andX(
                            $query->expr()->eq( 'c.connectFrom', ':sid' ),
                            $query->expr()->eq( 'c.connectTo', ':fid' ),
                            $query->expr()->orX(
                                $query->expr()->eq( 'c.professionalStatus', ':profSts' ),
                                $query->expr()->eq( 'c.personalStatus', ':perfSts' )
                            )
                        )
                    )
                ->setMaxResults(1)
                ->orderBy('c.id', 'DESC')
                ->setParameter('fid', $connectFrom)
		->setParameter('sid', $connectTo)
                ->setParameter('profSts', $reqTypeArr['professionalStatus'])
                ->setParameter('perfSts', $reqTypeArr['personalStatus'])
		->getQuery();
                 
		$friend_req = $r->getResult();
                
		$result_count = count($friend_req);
		return $result_count;
	}
        
        /**
	 * Check for the pending status friend Request
	 * @param int $connectFrom
	 * @param int $connectTo
	 * @return int
	 */
	public function checkPendingRequestStatus($connectFrom, $connectTo , $requestType )
	{
		//initialise the array
		$friend_req = array();
                
                $query = $this->createQueryBuilder('c');
                
                if($requestType == 'personal')
                {
                    $r = $query->where('c.connectFrom =:fid', 'c.connectTo =:sid','c.personalStatus = 0', 'c.personalRequest = 1' )
                        ->setMaxResults(1)
                        ->orderBy('c.id', 'DESC')
                        ->setParameter('fid', $connectFrom)
                        ->setParameter('sid', $connectTo)
                        ->getQuery();
                    
                } elseif($requestType == 'professional'){
                    
                    $r = $query->where('c.connectFrom =:fid', 'c.connectTo =:sid','c.professionalStatus = 0', 'c.professionalRequest = 1' )
                        ->setMaxResults(1)
                        ->orderBy('c.id', 'DESC')
                        ->setParameter('fid', $connectFrom)
                        ->setParameter('sid', $connectTo)
                        ->getQuery();
                           
                }

                 
		$pending_req = $r->getResult();
                
		$result_count = count($pending_req);
		return $result_count;
        }
        
        /**
         * Get pending friend request professional
         * @param int $user_id
         * @param int $offset
         * @param int $limit
         * @return type
         */
	public function pendingFriendrequestProfessional($user_id, $offset, $limit)
	{
		$response = array();
                $from = new \DateTime();        
                $to =   new \DateTime();
                $from->sub(new \DateInterval('P7D'));
		$qb = $this->createQueryBuilder('c');                
		$query = $qb
		->select('c')
		->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.connectTo = co.id')
		->where('c.connectTo =:sfrom','c.professionalStatus =:status','c.professionalRequest =:statusprof','co.enabled =:isactive','c.created BETWEEN :fromDate AND :toDate')		
		->setParameter('sfrom', $user_id)
		->setParameter('status', '0')
                ->setParameter('statusprof', '1')
		->setParameter('isactive','1')
                ->setParameter('fromDate',$from)
                ->setParameter('toDate',$to)
		->setFirstResult( $offset )
		->setMaxResults( $limit )
		->getQuery();
		$response = $query->getResult();
		return $response;
	}
        
        /**
         * Get pending friend request personal
         * @param int $user_id
         * @param int $offset
         * @param int $limit
         * @return type
         */
	public function pendingFriendrequestPersonal($user_id, $offset, $limit)
	{
            $response = array();
            $from = new \DateTime();        
                $to =   new \DateTime();
                $from->sub(new \DateInterval('P7D'));
            $qb = $this->createQueryBuilder('c');
            $query = $qb
            ->select('c')
            ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.connectTo = co.id')
            ->where('c.connectTo =:sfrom','c.personalStatus =:status','c.personalRequest =:perstatus','co.enabled =:isactive','c.created BETWEEN :fromDate AND :toDate')
            ->setParameter('sfrom', $user_id)
            ->setParameter('status', '0')
            ->setParameter('perstatus', '1')
            ->setParameter('isactive','1')
            ->setParameter('fromDate',$from)
            ->setParameter('toDate',$to)
            ->setFirstResult( $offset )
            ->setMaxResults( $limit )
            ->getQuery();
            $response = $query->getResult();
            return $response;
	}
        
        public function getAllPendingFriendRequests($user_id, $offset, $limit)
	{
            $response = array();
            try{
                $from = new \DateTime();        
                $to =   new \DateTime();
                $from->sub(new \DateInterval('P7D'));
                $userConnectionTable = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:UserConnection')->getTableName();
                 $userTable = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:User')->getTableName();
                $sql = "( ";
                $sql .= "SELECT t1.connect_from, t1.connect_to, t1.professional_status, 0 as personal_status, t1.professional_request, 0 as personal_request, t1.status, t1.msg, t1.created, t1.id "
                        . "from $userConnectionTable as t1 "
                        ." inner join $userTable as t2 on(t1.connect_to=t2.id) "
                        ."where t2.enabled=1"
                        . " AND t1.connect_to = '$user_id' AND t1.professional_status = 0 AND t1.professional_request = 1 "
                        . " AND (t1.created BETWEEN '{$from->format('Y-m-d H:i:s')}' AND '{$to->format('Y-m-d H:i:s')}') ";
                $sql .= " ) ";
                $sql .= " UNION ";
                $sql .= " ( ";
                $sql .= "SELECT t1.connect_from, t1.connect_to, 0 as professional_status, t1.personal_status, 0 as professional_request, t1.personal_request, t1.status, t1.msg, t1.created, t1.id "
                        . "from $userConnectionTable as t1 "
                        ." inner join $userTable as t2 on(t1.connect_to=t2.id) "
                        ."where t2.enabled=1"
                        . " AND t1.connect_to = '$user_id' AND t1.personal_status = 0 AND t1.personal_request = 1 "
                        . " AND (t1.created BETWEEN '{$from->format('Y-m-d H:i:s')}' AND '{$to->format('Y-m-d H:i:s')}') ";
                $sql .= " ) ";
                $sql .= " LIMIT $offset, $limit";

                $stmt = $this->getEntityManager()
                        ->getConnection()
                        ->prepare($sql);
                $stmt->execute();
                $response = $stmt->fetchAll();
            }catch(\Exception $e){
                
            }
            return $response;
	}
        
        public function countAllPendingFriendRequests($user_id)
	{
            $response = 0;
            try{
                $from = new \DateTime();        
                $to =   new \DateTime();
                $from->sub(new \DateInterval('P7D'));
                $userConnectionTable = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:UserConnection')->getTableName();
                $userTable = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:User')->getTableName();
                $sql = "SELECT ( ";
                $sql .= "SELECT count(t1.id) as prfrecords "
                        . "from $userConnectionTable as t1 "
                        ." inner join $userTable as t2 on(t1.connect_to=t2.id) "
                        ."where t2.enabled=1"
                        . " AND t1.connect_to = '$user_id' AND t1.professional_status = 0 AND t1.professional_request = 1 "
                        . " AND (t1.created BETWEEN '{$from->format('Y-m-d H:i:s')}' AND '{$to->format('Y-m-d H:i:s')}') ";
                $sql .= " )  as prfrecords, ";
//                $sql .= " UNION ";
                $sql .= " ( ";
                $sql .= "SELECT count(t1.id) as prsrecords "
                        . "from $userConnectionTable as t1 "
                        ." inner join $userTable as t2 on(t1.connect_to=t2.id) "
                        ."where t2.enabled=1"
                        . " AND t1.connect_to = '$user_id' AND t1.personal_status = 0 AND t1.personal_request = 1 "
                        . " AND (t1.created BETWEEN '{$from->format('Y-m-d H:i:s')}' AND '{$to->format('Y-m-d H:i:s')}') ";
                $sql .= " ) as prsrecords";

                $stmt = $this->getEntityManager()
                        ->getConnection()
                        ->prepare($sql);
                $stmt->execute();
                $results = $stmt->fetchAll();
                $prfrecords = isset($results[0]['prfrecords']) ? $results[0]['prfrecords'] : 0;
                $prsrecords = isset($results[0]['prsrecords']) ? $results[0]['prsrecords'] : 0;
                $response = $prfrecords + $prsrecords;
            }catch(\Exception $e){
//                echo $e->getMessage();
            }
            return $response;
	}
        
        
        /**
	 * Update user connection request status
	 * 1 for accept. 0 for deny.
	 * @param int $user_id
	 * @param int $fid
	 * @param int $action
	 */
        public function updateUserConnectionStatus($id,$reqStatus){
            //initialise the array
            $friend_req = array();
            //create the query
            $query = $this->createQueryBuilder('c')
            ->update()
            ->set('c.personalStatus', $reqStatus)
            ->set('c.personalRequest', $reqStatus) 
            ->where('c.id =:ID')
            ->setParameter('ID', $id)
            ->getQuery();
            $reponse = $query->getResult();

            if($reponse){
                    return true;
            }
            return false;
	}
        public function updateUserConnectionStatusPersonal($id,$personalreg){
            //initialise the array
            $friend_req = array();
            //create the query
            $query = $this->createQueryBuilder('c')
            ->update()
            ->set('c.personalRequest', $personalreg) 
            ->where('c.id =:ID')
            ->setParameter('ID', $id)
            ->getQuery();
            $reponse = $query->getResult();

            if($reponse){
                    return true;
            }
            return false;
	}
        
        /**
    * Update record for request Personal/Professional
    * 1 for accept. 0 for deny.
    * @param int $user_id
    * @param int $fid
    * @param int $action
    */
          public function updateFriendRequestAnotherResp($id, $reqTypeArr){
              //initialise the array
              $friend_req = array();
              //create the query
              $query = $this->createQueryBuilder('c')
              ->update()
              ->set('c.personalStatus', $reqTypeArr['personalStatus'])
              ->set('c.professionalStatus', $reqTypeArr['professionalStatus'])
              ->set('c.professionalRequest', $reqTypeArr['professionalRequest'])
              ->set('c.personalRequest', $reqTypeArr['personalRequest'])
              ->set('c.status', '1')
              ->where('c.id =:ID')
              ->setParameter('ID', $id)
              ->getQuery();
              $reponse = $query->getResult();

              if($reponse){
                      return true;
              }
              return false;
   }
   
   
   	/**
	 * Search friends count depending upon userId
	 * @param string $userId
	 * @return int
	 */
	public function FriendsCount($userId)
	{
		$response = array();
		$qb = $this->createQueryBuilder('c');
		$query = $qb
		->select('co')
		->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.connectTo = co.id')
                ->where('c.connectFrom =:sfrom','c.status =:status','co.enabled =:isactive')
       		->setParameter('sfrom', $userId)
		->setParameter('status', '1')
		->setParameter('isactive','1')
		->getQuery();
		
		$response = $query->getResult();

		return count($response);
	}
        /**
         * Get pending friend request personal
         * @param int $user_id
         * @param int $offset
         * @param int $limit
         * @return type
         */
	public function allPendingFriendrequestPersonal($user_id, $offset, $limit)
	{
            $response = array();
            $from = new \DateTime();        
            $to =   new \DateTime();
            $from->sub(new \DateInterval('P7D'));
            $qb = $this->createQueryBuilder('c');
            $query = $qb
                ->select('c')
                ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.connectTo = co.id')
                ->where('c.connectTo =:sfrom','c.personalStatus =:status','c.personalRequest =:perstatus','co.enabled =:isactive', 'c.created BETWEEN :fromDate AND :toDate')
                ->setParameter('sfrom', $user_id)
                ->setParameter('status', '0')
                ->setParameter('perstatus', '1')
                ->setParameter('isactive','1')
                ->setParameter('fromDate',$from)
                ->setParameter('toDate',$to)
                ->setFirstResult( $offset )
                ->setMaxResults( $limit )
                ->getQuery();
            $response = $query->getResult();
            return $response;
	}
        /**
         * Get pending friend request professional
         * @param int $user_id
         * @param int $offset
         * @param int $limit
         * @return type
         */
	public function allPendingFriendrequestProfessional($user_id, $offset, $limit)
	{
		$response = array();
                $from = new \DateTime();        
                $to =   new \DateTime();
                $from->sub(new \DateInterval('P7D'));
		$qb = $this->createQueryBuilder('c');
		$query = $qb
		->select('c')
		->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.connectTo = co.id')
		->where('c.connectTo =:sfrom','c.professionalStatus =:status','c.professionalRequest =:statusprof','co.enabled =:isactive','c.created BETWEEN :fromDate AND :toDate')
		
		->setParameter('sfrom', $user_id)
		->setParameter('status', '0')
                ->setParameter('statusprof', '1')
                ->setParameter('fromDate',$from)
                ->setParameter('toDate',$to)
		->setParameter('isactive','1')
		->setFirstResult( $offset )
		->setMaxResults( $limit )
		->getQuery();
		$response = $query->getResult();
		return $response;
	}
        
         /**
	 * Check for the  personal friendship for two users
	 * @param int $connectFrom
	 * @param int $connectTo
	 * @return int
	 */
	public function checkPersonalFriendShip($connectFrom, $connectTo)
	{
		//initialise the array
		$friend_req = array();

		//create the query
		$qb = $this->createQueryBuilder('c');
                $query = $qb->where('c.connectFrom =:fid', 'c.connectTo =:sid', 'c.personalStatus =:status')
                                ->orWhere(
                                        $qb->expr()->andX(
                                            $qb->expr()->eq('c.connectFrom', ':sid'),
                                            $qb->expr()->eq('c.connectTo', ':fid'),
                                            $qb->expr()->eq('c.personalStatus', ':status')
                                        )
                                )
                                ->setMaxResults(1)
                                ->orderBy('c.id', 'DESC')
                                ->setParameter('fid', $connectFrom)
                                ->setParameter('sid', $connectTo)
                                ->setParameter('status', 1)
                                ->getQuery();

		$friend_req = $query->getResult();

		$result_count = count($friend_req);
		return $result_count;
	}
        
        /**
	 * Check for the  professional friendship for two users
	 * @param int $connectFrom
	 * @param int $connectTo
	 * @return int
	 */
	public function checkProfessionalFriendShip($connectFrom, $connectTo)
	{
		//initialise the array
		$friend_req = array();

		//create the query
		$qb = $this->createQueryBuilder('c');
                $query = $qb
                            ->where('c.connectFrom =:fid', 'c.connectTo =:sid', 'c.professionalStatus =:status')
                            ->orWhere(
                                    $qb->expr()->andX(
                                        $qb->expr()->eq('c.connectFrom', ':sid'),
                                        $qb->expr()->eq('c.connectTo', ':fid'),
                                        $qb->expr()->eq('c.professionalStatus', ':status')
                                    )
                            )
                            ->setMaxResults(1)
                            ->orderBy('c.id', 'DESC')
                            ->setParameter('fid', $connectFrom)
                            ->setParameter('sid', $connectTo)
                            ->setParameter('status', 1)
                            ->getQuery();

		$friend_req = $query->getResult();

		$result_count = count($friend_req);
		return $result_count;
	}
        
        /**
         * check form personal and professional friendship.
         * @param type $user_id
         * @param type $friend_id
         * @return type
         */
        public function checkPersonalProfessionalFriendship($user_id, $friend_id) {
            $result = array();

            $sql = "select uc.connect_to as id, 1 as status from UserConnection as uc where uc.personal_status = 1 and ((uc.connect_from = $user_id and uc.connect_to = $friend_id) OR (uc.connect_from = $friend_id  and uc.connect_to = $user_id))".
                    " UNION ALL ".
                    "select uc.connect_to as id, 2 as status from UserConnection as uc where uc.professional_status = 1 and ((uc.connect_from = $user_id and uc.connect_to = $friend_id ) OR (uc.connect_from = $friend_id  and uc.connect_to = $user_id))"
                    ;
            $stmt = $this->getEntityManager()
                   ->getConnection()
                   ->prepare($sql);
           $stmt->execute();
           $result = $stmt->fetchAll();
           return $result;
    }
    
    /*
     * checking personal friend request status
     * @param type $connectFrom
     * @param type $connectTo
     * @return int
     */
        public function checkPersoanlFriendRequest($connectTo, $connectFrom)
	{
            
		//initialise the array
		$friend_req = array();
       
		//create the query
		$qb = $this->createQueryBuilder('c');
                $query = $qb
                                ->where('c.connectFrom =:fid', 'c.connectTo =:sid', 'c.personalRequest =:status')
//                                ->orWhere(
//                                        $qb->expr()->andX(
//                                            $qb->expr()->eq( 'c.connectFrom', ':sid' ),
//                                            $qb->expr()->eq( 'c.connectTo', ':fid' ),
//                                            $qb->expr()->eq( 'c.personalRequest', ':status' )
//                                        )
//                                 )
                                ->setMaxResults(1)
                                ->orderBy('c.id', 'DESC')
                                ->setParameter('fid', $connectFrom)
                                ->setParameter('sid', $connectTo)
                                ->setParameter('status', 1)
                                ->getQuery();
                
		$friend_req = $query->getResult();
                $result_count = count($friend_req);
		return $result_count;
	}
        
    /*
     * checking professional friend request status
     * @param type $connectFrom
     * @param type $connectTo
     * @return int
     */
        public function checkProfessionalFriendRequest($connectTo, $connectFrom)
	{
		//initialise the array
		$friend_req = array();

		//create the query
		$qb = $this->createQueryBuilder('c');
                $query = $qb
                                ->where('c.connectFrom =:fid', 'c.connectTo =:sid', 'c.professionalRequest =:status')
//                                ->orWhere(
//                                        $qb->expr()->andX(
//                                            $qb->expr()->eq( 'c.connectFrom', ':sid' ),
//                                            $qb->expr()->eq( 'c.connectTo', ':fid' ),
//                                            $qb->expr()->eq( 'c.professionalRequest', ':status' )
//                                        )
//                                )
                                ->setMaxResults(1)
                                ->orderBy('c.id', 'DESC')
                                ->setParameter('fid', $connectFrom)
                                ->setParameter('sid', $connectTo)
                                ->setParameter('status', 1)
                                ->getQuery();

		$friend_req = $query->getResult();

		$result_count = count($friend_req);
		return $result_count;
	}
        
    /**
     * Get friends by Name and type 
     * @param int $userId
     * @param string $searchKeyword
     * @param int $searchType
     * @param int $offset
     * @param int $limit
     * @return array
     */
    public function getFriendsAndShops($userId, $searchKeyword, $searchType='', $offset=0, $limit=10, $aws_path='') {
        $response = array();
        if($userId>0){
            $searchKeyword = addslashes($searchKeyword);
            $qb = $this->createQueryBuilder('c');
            $trimSearchKeyword = str_replace(' ', '', $searchKeyword);
            $userConnectionTable = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:UserConnection')->getTableName();
            $storeTable = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();
            $friendsType = '';
            switch(strtolower($searchType)){
                case 'all_friends':
                    $friendsType = " AND (t2.personal_status=1 or t2.professional_status=1) ";
                    break;
                case 'personal_friends':
                    $friendsType = " AND t2.personal_status=1 ";
                    break;
                case 'professional_friends':
                    $friendsType = " AND t2.professional_status=1 ";
                    break;
            }
            $sql = "( ";
            $sql .= "SELECT @user_id := t1.id as id,"
                    . "t1.username as name,"
                    . "' ' as business_name,"
                    . "t1.firstname as firstname,"
                    . "t1.lastname as last_name,"
                    . "t1.email as  email,"
                    . "t1.enabled as status,"
                    . "@album_id := cast(t1.album_id as CHAR CHARACTER SET utf8)  as album_id,"
                    . "@user_image := t1.profile_image_name as profile_image,"
                    . " if(@album_id IS NULL, cast('' as CHAR CHARACTER SET utf8) , if(@album_id = '0',concat(cast('$aws_path/uploads/users/media/thumb' as CHAR CHARACTER SET utf8),'/',cast(@user_id as CHAR CHARACTER SET utf8),'/',cast(@user_image as CHAR CHARACTER SET utf8)),concat(cast('$aws_path/uploads/users/media/thumb' as CHAR CHARACTER SET utf8),'/',cast(@user_id as CHAR CHARACTER SET utf8),'/',cast(@album_id as CHAR CHARACTER SET utf8),'/',cast(@user_image as CHAR CHARACTER SET utf8))))  as thumb_path,"
                    . "'U' as type "
                    . "from fos_user_user as t1 "
                    ." inner join $userConnectionTable as t2 on(t2.connect_to=t1.id) "
                    ."where (t1.firstname like '$searchKeyword%' OR t1.lastname like '$searchKeyword%' OR t1.username like '$searchKeyword%' OR concat(concat(t1.firstname,' '),t1.lastname) like '$searchKeyword%' OR concat(t1.firstname,t1.lastname) like '$trimSearchKeyword%') AND t1.enabled=1"
                    ." AND t2.connect_from='$userId'" 
                    . $friendsType;
            $sql .= " ) ";
            $sql .= " UNION ";
            $sql .= " ( SELECT @user_id := t1.id as id,"
                    . "t1.username as name,"
                    . "' ' as business_name,"
                    . "t1.firstname as firstname,"
                    . "t1.lastname as last_name,"
                    . "t1.email as  email,"
                    . "t1.enabled as status,"
                    . "@album_id := cast(t1.album_id as CHAR CHARACTER SET utf8)  as album_id,"
                    . "@user_image := t1.profile_image_name as profile_image,"
                    . " if(@album_id IS NULL, cast('' as CHAR CHARACTER SET utf8) , if(@album_id = '0',concat(cast('$aws_path/uploads/users/media/thumb' as CHAR CHARACTER SET utf8),'/',cast(@user_id as CHAR CHARACTER SET utf8),'/',cast(@user_image as CHAR CHARACTER SET utf8)),concat(cast('$aws_path/uploads/users/media/thumb' as CHAR CHARACTER SET utf8),'/',cast(@user_id as CHAR CHARACTER SET utf8),'/',cast(@album_id as CHAR CHARACTER SET utf8),'/',cast(@user_image as CHAR CHARACTER SET utf8))))  as thumb_path,"
                    . "'U' as type "
                    . "from fos_user_user as t1 "
                    ." inner join $userConnectionTable as t2 on(t2.connect_from=t1.id) "
                    ."where (t1.firstname like '$searchKeyword%' OR t1.lastname like '$searchKeyword%' OR t1.username like '$searchKeyword%' OR concat(concat(t1.firstname,' '),t1.lastname) like '$searchKeyword%' OR concat(t1.firstname,t1.lastname) like '$trimSearchKeyword%') AND t1.enabled=1"
                    ." AND t2.connect_to='$userId'" 
                    . $friendsType;
            $sql .= " ) ";
            $sql .= " UNION ";
            $sql .= " (SELECT @store_id := t3.id as id,
                   t3.name,
                   t3.business_name,
                   ' ' as firstname,
                   ' ' as last_name,
                   ' ' as email,
                   t3.shop_status as status,
                   @store_album_id := sm.album_id as album_id,
                   @image_name := sm.image_name as profile_image,
                   if(@store_album_id IS NULL, '' ,if(@store_album_id > 0, 
                   concat(cast('$aws_path/uploads/documents/stores/gallery/' as CHAR CHARACTER SET utf8), cast(@store_id as CHAR CHARACTER SET utf8),'/thumb/',cast(@store_album_id as CHAR CHARACTER SET utf8),'/',cast(@image_name as CHAR CHARACTER SET utf8)),
                   concat(cast('$aws_path/uploads/documents/stores/gallery/' as CHAR CHARACTER SET utf8), cast(@store_id as CHAR CHARACTER SET utf8),'/thumb/',cast(@image_name as CHAR CHARACTER SET utf8)))) as thumb_path,
                   'S' 
                   from ".$storeTable." as t3 "
                    . " LEFT JOIN StoreMedia as sm on sm.id = t3.store_image"
                    . " where (t3.name like '%$searchKeyword%' or t3.business_name like '%$searchKeyword%') and t3.shop_status = 1 and t3.is_active = 1) ";
            $sql .= " limit $offset,$limit";

            $stmt = $this->getEntityManager()
                    ->getConnection()
                    ->prepare($sql);
            $stmt->execute();
            $response = $stmt->fetchAll();
        }
        return $response;
    }
    
    /**
     * Get club members and shops
     * @param int $userIds
     * @param string $searchKeyword
     * @param int $offset
     * @param int $limit
     * @param string $aws_path
     * @return array
     */
    public function getClubMembersAndShops($userIds, $searchKeyword, $offset=0, $limit=10, $aws_path='') {
        $response = array();
        if(count($userIds)>0){
            $searchKeyword = addslashes($searchKeyword);
            $_searchByUserIds = implode("', '", $userIds);
            $qb = $this->createQueryBuilder('c');
            $trimSearchKeyword = str_replace(' ', '', $searchKeyword);
            $storeTable = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();
            $sql = "( SELECT @user_id := t1.id as id,"
                    . "t1.username as name,"
                    . "' ' as business_name,"
                    . "t1.firstname as firstname,"
                    . "t1.lastname as last_name,"
                    . "t1.email as  email,"
                    . "t1.enabled as status,"
                    . "@album_id := cast(t1.album_id as CHAR CHARACTER SET utf8)  as album_id,"
                    . "@user_image := t1.profile_image_name as profile_image,"
                    . " if(@album_id IS NULL, cast('' as CHAR CHARACTER SET utf8) , if(@album_id = '0',concat(cast('$aws_path/uploads/users/media/thumb' as CHAR CHARACTER SET utf8),'/',cast(@user_id as CHAR CHARACTER SET utf8),'/',cast(@user_image as CHAR CHARACTER SET utf8)),concat(cast('$aws_path/uploads/users/media/thumb' as CHAR CHARACTER SET utf8),'/',cast(@user_id as CHAR CHARACTER SET utf8),'/',cast(@album_id as CHAR CHARACTER SET utf8),'/',cast(@user_image as CHAR CHARACTER SET utf8))))  as thumb_path,"
                    . "'U' as type "
                    . "from fos_user_user as t1 "
                    ." where "
                    ." t1.id IN ('$_searchByUserIds') "
                    ." AND (t1.firstname like '$searchKeyword%' OR t1.lastname like '$searchKeyword%' OR t1.username like '$searchKeyword%' OR concat(concat(t1.firstname,' '),t1.lastname) like '$searchKeyword%' OR concat(t1.firstname,t1.lastname) like '$trimSearchKeyword%') "
                    ." AND t1.enabled=1 ) ";
            
            $sql .= " UNION ";
            $sql .= " (SELECT @store_id := t3.id as id,
                   t3.name,
                   t3.business_name,
                   ' ' as firstname,
                   ' ' as last_name,
                   ' ' as email,
                   t3.shop_status as status,
                   @store_album_id := sm.album_id as album_id,
                   @image_name := sm.image_name as profile_image,
                   if(@store_album_id IS NULL, '' ,if(@store_album_id > 0, 
                   concat(cast('$aws_path/uploads/documents/stores/gallery/' as CHAR CHARACTER SET utf8), cast(@store_id as CHAR CHARACTER SET utf8),'/thumb/',cast(@store_album_id as CHAR CHARACTER SET utf8),'/',cast(@image_name as CHAR CHARACTER SET utf8)),
                   concat(cast('$aws_path/uploads/documents/stores/gallery/' as CHAR CHARACTER SET utf8), cast(@store_id as CHAR CHARACTER SET utf8),'/thumb/',cast(@image_name as CHAR CHARACTER SET utf8)))) as thumb_path,
                   'S' 
                   from ".$storeTable." as t3 "
                    . " LEFT JOIN StoreMedia as sm on sm.id = t3.store_image"
                    . " where (t3.name like '%$searchKeyword%' or t3.business_name like '%$searchKeyword%') and t3.shop_status = 1 and t3.is_active = 1) ";
            $sql .= " limit $offset,$limit";

            $stmt = $this->getEntityManager()
                    ->getConnection()
                    ->prepare($sql);
            $stmt->execute();
            $response = $stmt->fetchAll();
        }
        return $response;
    }
    
    
    /**
    * Check for the  personal friendship for two users
    * @param int $connectFrom
    * @param int $connectTo
    * @return int
    */
   public function getFriendRequestStatus($connectFrom, $connectTo)
   {
           //initialise the array
           $friend_req = array();

           //create the query
           $qb = $this->createQueryBuilder('c');
           $query = $qb->where('c.connectFrom =:fid', 'c.connectTo =:sid', 'c.personalRequest =:status')
                           ->orWhere(
                                   $qb->expr()->andX(
                                       $qb->expr()->eq('c.connectFrom', ':sid'),
                                       $qb->expr()->eq('c.connectTo', ':fid'),
                                       $qb->expr()->eq('c.personalRequest', ':status')
                                   )
                           )
                           ->setMaxResults(1)
                           ->orderBy('c.id', 'DESC')
                           ->setParameter('fid', $connectFrom)
                           ->setParameter('sid', $connectTo)
                           ->setParameter('status', 1)
                           ->getQuery();

           $personal_friend_req = $query->getResult();
           
           $qb = $this->createQueryBuilder('c');
           $query = $qb->where('c.connectFrom =:fid', 'c.connectTo =:sid', 'c.professionalRequest =:status')
                           ->orWhere(
                                   $qb->expr()->andX(
                                       $qb->expr()->eq('c.connectFrom', ':sid'),
                                       $qb->expr()->eq('c.connectTo', ':fid'),
                                       $qb->expr()->eq('c.professionalRequest', ':status')
                                   )
                           )
                           ->setMaxResults(1)
                           ->orderBy('c.id', 'DESC')
                           ->setParameter('fid', $connectFrom)
                           ->setParameter('sid', $connectTo)
                           ->setParameter('status', 1)
                           ->getQuery();

           $professional_friend_req = $query->getResult();
           return array('personal'=>!empty($personal_friend_req) ? $personal_friend_req[0] : array(), 'professional'=>!empty($professional_friend_req) ? $professional_friend_req[0] : array());
   }

   /**
    * finding the users friendship relation
    * @param array $sender_users
    * @param array $receiver_users
    */
   public function checkUserFriendShipRelations($sender_users, $receiver_users) {
        $final_sender = array_merge($sender_users, $receiver_users);
        $sender   = implode(',', $final_sender);
        $receiver = implode(',', $final_sender);
       
        $userConnectionTable = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:UserConnection')->getTableName();
        $sql = "select uc.connect_from as from_user, uc.connect_to as to_user, personal_status, professional_status from $userConnectionTable as uc".
               " where connect_from in ($sender) and connect_to in ($receiver)";
        $stmt = $this->getEntityManager()
                    ->getConnection()
                    ->prepare($sql);
        $stmt->execute();
        $response = $stmt->fetchAll();
        return $response;
   }
   
   /**
     * 
     * @param array $users
     */
    public function getRegistredUsersFriends($users)
    {
        $result_res = array();
        $qb = $this->createQueryBuilder('c');
            $query = $qb->select('c.connectFrom, c.connectTo')
               ->where(
                       $qb->expr()->In('c.connectFrom', ':users'),
                       $qb->expr()->In('c.connectTo', ':users')
                    )
               ->andWhere(
                       $qb->expr()->orX(
                       $qb->expr()->eq('c.professionalStatus', ':status'),
                       $qb->expr()->eq('c.personalStatus', ':status')
                        )
                    )
                ->setParameter('users', $users)
                ->setParameter('status', 1);

        $result = $query ->getQuery();
        $result_res = $result->getResult();
        return $result_res;
    }
        
}