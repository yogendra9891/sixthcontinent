<?php

namespace UserManager\Sonata\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserFollowersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserFollowersRepository extends EntityRepository {

    /**
     * get  followers
     * @param int $userId
     * @param int $offset
     * @param int $limit_size
     * @return object array
     */
    public function getFollowers($userId, $offset, $limit_size, $limit_required = 0) {
        $response = array();
        $qb = $this->createQueryBuilder('c');
        $query = $qb
                ->select('co.id')
                ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.senderId = co.id')
                ->where('c.toId =:sfrom','co.enabled =:isactive')
                ->setParameter('sfrom', $userId)
                ->setParameter('isactive', '1');
                if($limit_required == 1){
           $query =  $qb->setFirstResult($offset)
                ->setMaxResults($limit_size);
                }
            $query = $qb->getQuery();

        $response = $query->getResult();
       
        return $response;
    }
    
    
     /**
     * get  followers count
     * @param int $userId
     * @param int $offset
     * @param int $limit_size
     * @return object array
     */
    public function getFollowersCount($userId) {
        $response = array();
        $qb = $this->createQueryBuilder('c');
        $query = $qb
                ->select('count(co.id)')
                ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.senderId = co.id')
                ->where('c.toId =:sfrom','co.enabled =:isactive')
                ->setParameter('sfrom', $userId)
                ->setParameter('isactive', '1')
                ->setFirstResult(0)
                ->setMaxResults(1)
                ->getQuery();

        $response = $query->getResult();
       
        return $response[0][1];
    }
    
    /**
     * get  followers
     * @param int $userId
     * @param int $offset
     * @param int $limit_size
     * @return object array
     */
    public function getFollowings($userId, $offset, $limit_size) {
        $response = array();
        $qb = $this->createQueryBuilder('c');
        $query = $qb
                ->select('co.id')
                ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.toId = co.id')
                ->where('c.senderId =:sfrom','co.enabled =:isactive')
                ->setParameter('sfrom', $userId)
                ->setParameter('isactive', '1')
                ->setFirstResult($offset)
                ->setMaxResults($limit_size)
                ->getQuery();

        $response = $query->getResult();
       
        return $response;
    }
    
    
     /**
     * get  followers count
     * @param int $userId
     * @param int $offset
     * @param int $limit_size
     * @return object array
     */
    public function getFollowingsCount($userId) {
        $response = array();
        $qb = $this->createQueryBuilder('c');
        $query = $qb
                ->select('count(co.id)')
                ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'c.toId = co.id')
                ->where('c.senderId =:sfrom','co.enabled =:isactive')
                ->setParameter('sfrom', $userId)
                ->setParameter('isactive', '1')
                ->setFirstResult(0)
                ->setMaxResults(1)
                ->getQuery();

        $response = $query->getResult();
       
        return $response[0][1];
    }

    /**
     * get followers and friends with union and same country users.
     * @param int $user_id
     * @param strine $country_code
     * @return object array
     */
    
    /*
     public function getFollowingsandFriends($user_id) {
     
        $result = array();
       
        echo $sql = "select distinct(uc.connect_to) as id, 2 as status from UserConnection as uc inner join fos_user_user as u ON u.id = uc.connect_to where u.enabled = 1 and uc.status = 1 ".
                "and uc.connect_from =$user_id".
                " UNION ".
                "select distinct(uf.to_id) as id, 3 as status from UserFollowers as uf inner join fos_user_user as u1 ON u1.id = uf.to_id where u1.enabled = 1 and uf.sender_id=$user_id";
        die('shivesh');
        $stmt = $this->getEntityManager()
               ->getConnection()
               ->prepare($sql);
       $stmt->execute();
       $result = $stmt->fetchAll(); 
       return $result;
    }
     * 
     */
    
    public function getFollowingsandFriends($user_id) {
        $result = array();
       
        $sql = "select distinct(uc.connect_to) as id, 1 as status from UserConnection as uc inner join fos_user_user as u ON u.id = uc.connect_to
                where u.enabled = 1 and uc.personal_status = 1 and uc.connect_from = $user_id".
                " UNION ".
                "select distinct(uc.connect_from) as id, 1 as status from UserConnection as uc inner join fos_user_user as u ON u.id = uc.connect_from
                where u.enabled = 1 and uc.personal_status = 1 and uc.connect_to = $user_id".
                " UNION ".
                "select distinct(uc.connect_to) as id, 2 as status from UserConnection as uc inner join fos_user_user as u ON u.id = uc.connect_to
                where u.enabled = 1 and uc.professional_status = 1 and uc.connect_from = $user_id".
                " UNION ".
                "select distinct(uc.connect_from) as id, 2 as status from UserConnection as uc inner join fos_user_user as u ON u.id = uc.connect_from
                where u.enabled = 1 and uc.professional_status = 1 and uc.connect_to = $user_id".
                " UNION ".
                "select distinct(uf.to_id) as id, 3 as status from UserFollowers as uf inner join fos_user_user as u1 ON u1.id = uf.to_id where u1.enabled = 1 and uf.sender_id=$user_id";
        $stmt = $this->getEntityManager()
               ->getConnection()
               ->prepare($sql);
       $stmt->execute();
       $result = $stmt->fetchAll(); 
       return $result;
    }
    
     /**
     * get  followers
     * @param array $userId
     * @return object array
     */
    public function getRegistredUsersFollowers($userIds) {
        $result_res = array();
        $qb = $this->createQueryBuilder('c');
            $query = $qb->select('c.senderId, c.toId')
               ->where(
                       $qb->expr()->In('c.toId', ':users')
                    )
                ->setParameter('users', $userIds);

        $result = $query ->getQuery();
        $result_res = $result->getResult();
        return $result_res;
    }
}
