<?php

namespace UserManager\Sonata\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RelativesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RelativesRepository extends EntityRepository
{

    public function InsertRelativeDetails($data){

        $relative = new Relatives();
        
        if($data['id']){
            $relative = $this->find($data['id']);    
            if (!$relative) {
                $data = array('code' => 131, 'message' => 'INVALID_DATA', 'data' => array());
                echo json_encode($data);
                exit;
            }
        } 

        $relative->setUserId($data['user_id']);
        $relative->setRelativeId($data['relative_id']);
        $relative->setRelationId($data['relation']);
       
        $em = $this->getEntityManager();

        $em->persist($relative);
        $em->flush();
         
        $qb = $this->createQueryBuilder('ur');
        $query = $qb
                ->select('usr.id, usr.lastname, usr.firstname, usr.email, usr.profileImg, rlt.name as relationName ')
                ->innerJoin('UserManagerSonataUserBundle:User', 'usr', 'WITH', 'ur.relativeId = usr.id')
                ->innerJoin('UserManagerSonataUserBundle:RelationType', 'rlt', 'WITH', 'rlt.id = ur.relationId')
                ->where('ur.userId =:user_id','ur.relativeId =:relative_id')
                ->setParameter('relative_id', $data['relative_id'] )
                ->setParameter('user_id',$data['user_id'] )
                ->getQuery();
        
        $relativeDetail = $query->getResult();
        
        $response = array();
        
        $response['id'] = $relative->getId();
        $response['user_id'] = $relative->getuserId();
        $response['relative_id'] = $relative->getRelativeId();
        $response['relation'] = $relative->getRelationId();
        $response['relative_detail'] = $relativeDetail;
        
        return $response ;
    }
    
    public function getRelatives($user_id)
    {
        $response = array();
        $qb = $this->createQueryBuilder('ur');
        $query = $qb
                ->select('ur.id ,ur.userId ,ur.relativeId , usr.lastname, usr.firstname, usr.email, usr.profileImg, rlt.name as relationName, rlt.id as relationId ')
                ->innerJoin('UserManagerSonataUserBundle:User', 'usr', 'WITH', 'ur.relativeId = usr.id')
                ->innerJoin('UserManagerSonataUserBundle:RelationType', 'rlt', 'WITH', 'rlt.id = ur.relationId')
                ->where('ur.userId =:user_id')
                ->setParameter('user_id',$user_id )
                ->getQuery();
        
        $relativeDetails = $query->getResult();
        
        foreach($relativeDetails as $details)
        {
            $array = array();
            
            $array['id'] = $details['id'];
            $array['user_id'] = $details['userId'];
            $array['relative_id'] = $details['relativeId'];
            $array['lastname'] = $details['lastname'];
            $array['firstname'] = $details['firstname'];
            $array['email'] = $details['email'];
            $array['profileImg'] = $details['profileImg'];
            $array['relationName'] = $details['relationName'];
            $array['relationId'] = $details['relationId'];
            
            $response[] = $array;
        }
        
        return $response;
    }
    
    /*
    * Deleting User Relatives
    */
    public function DeleteRelatives($id, $user_id)
    {
        
        $UserRelatives = $this->findOneBy(array('id'=>$id, 'userId'=>$user_id ));
        if (!$UserRelatives)
        {
            $data = array('code' => 131, 'message' => 'INVALID_DATA', 'data' => array());
            echo json_encode($data);
            exit;
        }
        
        $em = $this->getEntityManager();
        $em->remove($UserRelatives);
        $em->flush();
        
        return true;
    }

}
