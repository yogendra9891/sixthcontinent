<?php

namespace UserManager\Sonata\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CitizenUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CitizenUserRepository extends EntityRepository
{
    /**
	 * Get group list
	 * @param unknown_type $user_id
	 * @return array
	 */
	public function getUserRole($user_id,$user_country_code)
	{
            $users = array();
            $profile_type = array(23,25);
            //get all groups assigned to user

            //$response = array();
            
             $qb = $this->createQueryBuilder('c');
             $query = $qb->select('c.id, c.userId, c.region,c.city,c.address,c.zip,c.latitude,c.longitude,c.createdAt,c.roleId,c.mapPlace,c.profileImg')
                ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'co.id = c.userId')
                ->where('c.userId =:suid','co.enabled =:isactive','co.country =:countryCode')
                ->andWhere(
                    $qb->expr()->In('c.roleId', ':profiletype')
                )
                ->setParameter('countryCode', $user_country_code)
                ->setParameter('profiletype', $profile_type)
                ->setParameter('isactive', 1)
                ->setParameter('suid', $user_id)
                ->getQuery();
            
            $response = $query->getResult();         
            return $response;
                
	}
        
        /**
         * 
         * @param int $user_id
         */
        public function getExternalProfileCitizen($user_id)
        {
             $response = array();
             $qb = $this->createQueryBuilder('c');
             $query = $qb->select('c.id, c.userId, c.region,c.city,c.address,c.zip,c.latitude,c.longitude,c.createdAt,c.roleId,c.mapPlace')
                ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'co.id = c.userId')
                ->where('c.userId =:uid','co.enabled =:isactive')
                ->setParameter('uid', $user_id)
                ->setParameter('isactive', 1)
                ->getQuery(); 
            
            $response = $query->getResult();             
            if(count($response)>0){
            return $response[0];
            }
            return $response;
        }
        
        /**
         * Check id citizen is active or not
         * @param $user_id
         * @return boolean
         */
        public function checkActiveCitizen($user_id)
        {
             $response = array();
             $qb = $this->createQueryBuilder('c');
             $query = $qb->select('c.id')
                ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'co.id = c.userId')
                ->where('c.userId =:uid','co.enabled =:isactive')
                ->setParameter('uid', $user_id)
                ->setParameter('isactive', 1)
                ->getQuery();
            
            $response = $query->getResult();             
            if(count($response)>0){
            return true;
            }
            return false;
        }
        
        /**
         * getting the citizen profile and fos user data
         * @return object
         */
        public function getCitizenUserProfile()
        { 
            $yesterday  = new \DateTime('yesterday');
            $start_date = $yesterday->format('Y-m-d');
            $today      = new \DateTime('now');
            $end_date   = $today->format('Y-m-d');
            //object of query builder.
            $qb = $this->createQueryBuilder('c'); 
            $query = $qb->select('c.userId, c.region, c.city, c.address, c.zip, c.latitude, c.longitude, c.createdAt, c.updatedAt,'
                    . 'c.mapPlace, c.profileImg, co.username, co.email, co.enabled, co.salt,'
                    . 'co.password, co.locked, co.expired, co.passwordRequestedAt, co.dateOfBirth, co.firstname, co.lastname, co.gender,'
                    . 'co.phone, co.country, co.profileImg, co.citizenProfile, co.brokerProfile, co.storeProfile, co.coverImg')
                    ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'co.id = c.userId')
                    ->where('c.updatedAt>=:create_at', 'c.updatedAt<:end_at')
                    ->setParameter('create_at', $start_date)
                    ->setParameter('end_at', $end_date)
                    ->getQuery();
            $response = $query->getResult();
            return $response;
        }
        
        /**
         * getting the citizen profile and fos user data for back logs
         * @param $user_id
         * @return object
         */
        public function getCitizenUserProfileBackLogs($user_id)
        {
            $yesterday  = new \DateTime('yesterday');
            $start_date = $yesterday->format('Y-m-d');
            $today      = new \DateTime('today');
            $end_date   = $today->format('Y-m-d');
            //object of query builder.
            $qb = $this->createQueryBuilder('c');
            $qb->select('c.userId, c.region, c.city, c.address, c.zip, c.latitude, c.longitude, c.createdAt,'
                    . 'c.mapPlace, c.profileImg, co.username, co.email, co.enabled, co.salt,'
                    . 'co.password, co.locked, co.expired, co.passwordRequestedAt, co.dateOfBirth, co.firstname, co.lastname, co.gender,'
                    . 'co.phone, co.country, co.profileImg, co.citizenProfile, co.brokerProfile, co.storeProfile, co.coverImg')
                    ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'co.id = c.userId')
                    ->where('c.createdAt >=:create_at', 'c.createdAt <=:end_at');
            if ($user_id > 0) {
                $qb->andwhere('co.id >:last_user_id')
                   ->setParameter('last_user_id', $user_id);
            }        
            $query =  $qb->setParameter('create_at', $start_date)
                    ->setParameter('end_at', $end_date)
                    ->getQuery();
            $response = $query->getResult();
            return $response;
        }     
        
        /**
         * getting the citizen updated profile and fos user data
         * @return object
         */
        public function getCitizenUserUpdatedProfile()
        {
            $yesterday  = new \DateTime('yesterday');
            $start_date = $yesterday->format('Y-m-d');
            $today      = new \DateTime('today');
            $end_date   = $today->format('Y-m-d');
            
            //check profile is update(created_at != updated_at) and profile will be updated today.
            //object of query builder.
            $qb = $this->createQueryBuilder('c');
            $query = $qb->select('c.userId, c.region, c.city, c.address, c.zip, c.latitude, c.longitude, c.createdAt, c.updatedAt,'
                    . 'c.mapPlace, c.profileImg, co.username, co.email, co.enabled, co.salt,'
                    . 'co.password, co.locked, co.expired, co.passwordRequestedAt, co.dateOfBirth, co.firstname, co.lastname, co.gender,'
                    . 'co.phone, co.country, co.profileImg, co.citizenProfile, co.brokerProfile, co.storeProfile, co.coverImg')
                    ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'co.id = c.userId')
                    ->where('c.updatedAt >=:create_at', 'c.updatedAt <:end_at', 'c.createdAt != c.updatedAt')
                    ->setParameter('create_at', $start_date)
                    ->setParameter('end_at', $end_date)
                    ->getQuery();
            $response = $query->getResult();
            return $response;
        }
        
        /**
         * getting the citizen update profile and fos user data for back logs
         * @param $user_id
         * @return object
         */
        public function getCitizenUserUpdateProfileBackLogs($user_id)
        {
            $yesterday  = new \DateTime('yesterday');
            $start_date = $yesterday->format('Y-m-d');
            $today      = new \DateTime('today');
            $end_date   = $today->format('Y-m-d');
            //object of query builder.
            $qb = $this->createQueryBuilder('c');
            $qb->select('c.userId, c.region, c.city, c.address, c.zip, c.latitude, c.longitude, c.createdAt, c.updatedAt,'
                    . 'c.mapPlace, c.profileImg, co.username, co.email, co.enabled, co.salt,'
                    . 'co.password, co.locked, co.expired, co.passwordRequestedAt, co.dateOfBirth, co.firstname, co.lastname, co.gender,'
                    . 'co.phone, co.country, co.profileImg, co.citizenProfile, co.brokerProfile, co.storeProfile, co.coverImg')
                    ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'co.id = c.userId')
                    ->where('c.updatedAt >=:create_at', 'c.updatedAt <:end_at', 'c.createdAt != c.updatedAt');
            if ($user_id > 0) {
                $qb->andwhere('co.id >:last_user_id')
                   ->setParameter('last_user_id', $user_id);
            }        
            $query =  $qb->setParameter('create_at', $start_date)
                    ->setParameter('end_at', $end_date)
                    ->getQuery();
            $response = $query->getResult();
            return $response;
        }
        
                
        /**
         * citizen user.
         */
        public function getCitizenProfile()
        {
            $sql = "
            SELECT u.id, u.username, u.email, u.firstname, REPLACE( IFNULL(u.lastname, ''), '\r\n' , '\n' ) as lastname,
            REPLACE( IFNULL(u.gender, ''), '\r\n' , '\n' ) as gender, REPLACE( IFNULL(u.phone, ''), '\r\n' , '\n' ) as phone,
            REPLACE( IFNULL(u.country, ''), '\r\n' , '\n' ) as country, REPLACE( IFNULL(DATE_FORMAT(u.date_of_birth, '%m/%d/%Y'), ''), '\r\n' , '\n' ) as dob, 
            c.region, c.city, c.address, c.zip, c.latitude, c.longitude, c.map_place, REPLACE( IFNULL(DATE_FORMAT(c.created_at, '%m/%d/%Y'), ''), '\r\n' , '\n' ) as created_at 
            FROM CitizenUser AS c
            INNER JOIN fos_user_user AS u ON u.id = c.user_id";
             
            $stmt = $this->getEntityManager()
                   ->getConnection()
                   ->prepare($sql);
           $stmt->execute();
           $result = $stmt->fetchAll();
           return $result;            
        }
}
