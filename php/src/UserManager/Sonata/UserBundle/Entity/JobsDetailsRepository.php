<?php

namespace UserManager\Sonata\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * JobsDetailsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobsDetailsRepository extends EntityRepository
{

    public function InsertJobsDetails($data){

        $details = new JobsDetails();
        
        if($data['id']){
            $details = $this->find($data['id']);    
            if (!$details) {
                $data = array('code' => 131, 'message' => 'INVALID_DATA', 'data' => array());
                echo json_encode($data);
                exit;
            }
        } else {
            $details->setCreatedAt( new \DateTime("now"));
        }

        if($data['currently_working'])
        {
            $qb = $this->createQueryBuilder('jobs');
            $query = $qb
                    ->update()
                    ->set('jobs.currentlyWorking', 0)
                    ->set('jobs.endDate', ':endDate')
                    ->where('jobs.userId =:user_id AND jobs.currentlyWorking = :attending')
                    ->setParameter('user_id',$data['user_id'] )
                    ->setParameter('attending',1)
                    ->setParameter('endDate', new \DateTime($data['start_date']))
                    ->getQuery();

            $query->getResult();    
        }
        
        $details->setUserId($data['user_id']);
        $details->setCompanyName($data['company']);
        $details->setTitle($data['title']);
        $details->setStartDate( new \DateTime($data['start_date']));
        $details->setEndDate(new \DateTime($data['end_date']));
        $details->setCurrentlyWorking( (int) $data['currently_working']);
        $details->setHeadline($data['headline']);
        $details->setLocation($data['location']);
        $details->setDescription($data['description']);
        $details->setVisibility( (int) $data['visibility_type']);
        $details->setUpdatedAt( new \DateTime("now"));

        $em = $this->getEntityManager();

        $em->persist($details);
                                 
        $em->flush();
        
       
        
        $jobDetails = array();

        $jobDetails['id'] = $details->getId();
        $jobDetails['user_id'] = $details->getUserId();
        $jobDetails['company'] = $details->getCompanyName();
        $jobDetails['title'] = $details->getTitle();
        $jobDetails['location'] = $details->getLocation();
        $jobDetails['start_date'] = $details->getStartDate();
        $jobDetails['end_date'] = $details->getEndDate();
        $jobDetails['currently_working'] = (int)$details->getCurrentlyWorking();
        $jobDetails['headline'] = $details->getHeadline();
        $jobDetails['description'] = $details->getDescription();
        $jobDetails['updated_at'] = $details->getUpdatedAt();
        $jobDetails['visibility_type'] = (int) $details->getVisibility();

        return $jobDetails;
         
    }

        
    /*
    * Used to return All jobs depending upon user Id
    */
    public function getJobDetails($user_id){
        
        $results = $this->findBy(array('userId'=>$user_id), array('endDate' => 'DESC'));
        $response =array();
        $currentWorking = array();
        foreach($results as $result)
        {
            if($result->getCurrentlyWorking()){
                $currentWorking['id'] = $result->getId();
                $currentWorking['user_id'] = $result->getUserId();
                $currentWorking['company'] = $result->getCompanyName();
                $currentWorking['title'] = $result->getTitle();
                $currentWorking['location'] = $result->getLocation();
                $currentWorking['start_date'] = $result->getStartDate();
                $currentWorking['end_date'] = new \DateTime("now");
                $currentWorking['currently_working'] = (int) $result->getCurrentlyWorking();
                $currentWorking['headline'] = $result->getHeadline();
                $currentWorking['description'] = $result->getDescription();
                $currentWorking['updated_at'] = $result->getUpdatedAt();
                $currentWorking['visibility_type'] = (int) $result->getVisibility();
            }else{
                $jobDetail = array();
                $jobDetail['id'] = $result->getId();
                $jobDetail['user_id'] = $result->getUserId();
                $jobDetail['company'] = $result->getCompanyName();
                $jobDetail['title'] = $result->getTitle();
                $jobDetail['location'] = $result->getLocation();
                $jobDetail['start_date'] = $result->getStartDate();
                $jobDetail['end_date'] = $result->getEndDate();
                $jobDetail['currently_working'] = (int) $result->getCurrentlyWorking();
                $jobDetail['headline'] = $result->getHeadline();
                $jobDetail['description'] = $result->getDescription();
                $jobDetail['updated_at'] = $result->getUpdatedAt();
                $jobDetail['visibility_type'] = (int) $result->getVisibility();

                $response[] = $jobDetail;
            }
        }
        
        if(!empty($currentWorking)){
            array_unshift($response, $currentWorking);
        }
        
        return $response;

    }
    
    /*
    * Deleting Job Detail
    */
    public function DeleteJobDetails($id, $user_id)
    {
        
        $JobDetail = $this->findOneBy(array('id'=>$id, 'userId'=>$user_id ));
        if (!$JobDetail)
        {
            $data = array('code' => 131, 'message' => 'INVALID_DATA', 'data' => array());
            echo json_encode($data);
            exit;
        }
        
        $em = $this->getEntityManager();
        $em->remove($JobDetail);
        $em->flush();
        
        return true;
    }

    
    /*
    * Setting Visibility of Job Details 
    */
    public function SetJobDetailVisibility($data)
    {
        
        $details = $this->findOneBy(array('id'=>$data['id'], 'userId'=>$data['user_id'] ));    
        if (!$details) {
            $data = array('code' => 131, 'message' => 'INVALID_DATA', 'data' => array());
            echo json_encode($data);
            exit;
        }
            
        $details->setVisibility( (int) $data['visibility_type']);

        $em = $this->getEntityManager();

        $em->persist($details);
        $em->flush();
        
        return true;
    }
    
    /*
    * Used to return All jobs depending upon user Id and visibility type
    */
    public function getFriendJobDetails($visibility_type, $user_id){
        
        if($visibility_type == '3'){
            $results = $this->findBy(array('userId'=>$user_id, 'visibility'=> array(1,2,3)));
        } elseif($visibility_type == '1') {
            $results = $this->findBy(array('userId'=>$user_id, 'visibility'=> array(1,3)));
        } elseif($visibility_type == '2') {
            $results = $this->findBy(array('userId'=>$user_id, 'visibility'=>array(2,3)));
        } else {
            $results = $this->findBy(array('userId'=>$user_id, 'visibility'=>$visibility_type));
        }
        
        $response =array();

        foreach($results as $result)
        {
            $jobDetail = array();
            $jobDetail['id'] = $result->getId();
            $jobDetail['user_id'] = $result->getUserId();
            $jobDetail['company'] = $result->getCompanyName();
            $jobDetail['title'] = $result->getTitle();
            $jobDetail['location'] = $result->getLocation();
            $jobDetail['start_date'] = $result->getStartDate();
            $jobDetail['end_date'] = $result->getEndDate();
            $jobDetail['currently_working'] = $result->getCurrentlyWorking();
            $jobDetail['headline'] = $result->getHeadline();
            $jobDetail['description'] = $result->getDescription();
            $jobDetail['updated_at'] = $result->getUpdatedAt();
            $jobDetail['visibility_type'] = $result->getVisibility();
            
            $response[] = $jobDetail;
        }
        
        return $response;

    }
    
}

