<?php

namespace UserManager\Sonata\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BusinessCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessCategoryRepository extends EntityRepository
{
    /**
    * Search Category
    * @param string $text
    * @param int $offset
    * @param int $limit
    * @return object array
    */
    public function getCategorySearch($text, $offset, $limit){
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $query = $qb->select('c.id, c.name')
                ->where( 
                      $qb->expr()->orX(
                        $qb->expr()->like('c.name', ':text')
                    )
                )
                ->setParameter('text', '%'.$text.'%')
                ->setFirstResult( $offset )
		->setMaxResults( $limit )
                ->getQuery();
        $response = $query->getResult();
        return $response;
    }
    
    /**
    * Sub Category List From Parent ID
    * @param int $catId
    * @return object array
    */
    public function getSubCategoryList($catId){ 
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $query = $qb->select('c.id as sub_cat_id, c.name as sub_cat_name, c.parent as parent_id');
        $query = $qb->add('where', $qb->expr()->in('c.parent', $catId))->getQuery();
        $response = $query->getResult();
        return $response;
    }
    
    /**
    * Category List All
    * @return object array
    */
    public function getCategoryList(){ 
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $query = $qb->select('c.id, c.name')
                ->where('c.parent=0')
                ->getQuery();
        $response = $query->getResult();
        $parentCat = array();
        $i=0;
        foreach ($response as $pCat){
            $parentCat['category'][$i]['category_id'] = $pCat['id'];
            $parentCat['category'][$i]['category_name'] = $pCat['name'];
            $subCatArr = $this->getSubCategoryList($pCat['id']);
            $parentCat['category'][$i]['sub_category'] = $subCatArr;
            
            $i++;      
        }
        return $parentCat;
    }
    
    /**
    * Parent Category List
    * @return object array
    */
    public function getParentCategoryList($langCode, $cat_id){ 
        
        //object of query builder.
        $qb = $this->createQueryBuilder('cat');
        $query = $qb->select('cat.id, code.categoryName as category_name, cat.image, cat.image_thumb')
                ->innerJoin('UserManagerSonataUserBundle:BusinessCategoryCode', 'code', 'WITH', 'code.categoryCode = cat.name')
                ->where('code.langCode =:langCode','cat.parent=:catId')
                ->setParameter('langCode',$langCode )
                ->setParameter('catId',$cat_id )
                ->getQuery();
        $response = $query->getResult();
       
        return $response;
    }

    /**
    * Insert Category List 
    * @return object array
    */
    public function InsertCategoryList($datas){ 
        
        
        foreach($datas as $data){

            $details = new BusinessCategory();
            
            $details->setName($data['name']);
            $details->setParent($data['parent']);
            $details->setStatus($data['status']);
                        
            $em = $this->getEntityManager();

            $em->persist($details);
            
        }
                                 
        $em->flush();
        
        return true;
    }
    
    /**
    * update Category List 
    * @return object array
    */
    public function UpdateCategoryList($data){ 
        
       
        if($data['id']){
            $details = $this->find($data['id']);    
            if (!$details) {
                $data = array('code' => 131, 'message' => 'INVALID_DATA', 'data' => array());
                echo json_encode($data);
                exit;
            }
        } 
       
        $details->setName($data['name']);
        $details->setParent($data['parent']);
        $details->setStatus($data['status']);

        $em = $this->getEntityManager();

        $em->persist($details);
                    
        $em->flush();
        
        return true;
    }
    
   /**
    * Get category code name
    * @param $lang_code
    * @param $cat_id
    * @return object array
    */
    public function getCategoryName($lang_code, $cat_id){ 
        
        //object of query builder.
        $qb = $this->createQueryBuilder('cat');
        $query = $qb->select('cat.id, code.categoryName as category_name, cat.image, cat.image_thumb, cat.txn_percentage')
                ->innerJoin('UserManagerSonataUserBundle:BusinessCategoryCode', 'code', 'WITH', 'code.categoryCode = cat.name')
                ->where('code.langCode =:langCode','cat.id=:catId')
                ->setParameter('langCode',$lang_code )
                ->setParameter('catId',$cat_id )
                ->getQuery();
        $response = $query->getResult();
       
        return $response;
    }
     
    
    /**
    * Get category code name
    * @param $lang_code
    * @param $cat_id
    * @return object array
    */
    public function getCategoryNameFromId($lang_code, $cat_id){ 
        
        //object of query builder.
        $response = '';
        $qb = $this->createQueryBuilder('cat');
        $query = $qb->select('code.categoryName as category_name')
                ->innerJoin('UserManagerSonataUserBundle:BusinessCategoryCode', 'code', 'WITH', 'code.categoryCode = cat.name')
                ->where('code.langCode =:langCode','cat.id=:catId')
                ->setParameter('langCode',$lang_code )
                ->setParameter('catId',$cat_id )
                ->getQuery();
        $response = $query->getResult();
        if(count($response) > 0) {
            $response = $response[0]['category_name'];
        } else {
            $response = '';
        }
        return $response;
    }    
    
    
     /**
     * Get category default image
     * @param $store_ids array of store ids
     * @return object array
     */
    public function getCategoryImageFromStoreIds($store_ids) {
        if(is_array($store_ids)) {
            $store_ids = "(" . implode(',', $store_ids) . ")";
            $condition = "in $store_ids";
        } else {
            $store_ids = $store_ids;
            $condition = "= $store_ids";
        }
        
        $sql = "SELECT s.id as id, 
                bc.image as original_image,
                bc.image_thumb as thumb_image
                FROM Store s
                left join  BusinessCategory as bc on s.sale_catid = bc.id
                where s.id $condition and s.is_active = 1";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $results = $stmt->fetchAll();
        $category_images = array();
        foreach ($results as $result) {
            $category_images[$result['id']] = $result;
        }
        return $category_images;
    }
    
    /**
     * Get category code name
     * @param type $lang_code
     * @param array $cat_ids
     * @return type
     */
    public function getCategoryNamesByIds($lang_code, $cat_ids=array()){
        $_cat_ids = is_array($cat_ids) ? $cat_ids : (array)$cat_ids;
        $qb = $this->createQueryBuilder('cat');
        $query = $qb->select('cat.id, code.categoryName as category_name, cat.image, cat.image_thumb')
                ->innerJoin('UserManagerSonataUserBundle:BusinessCategoryCode', 'code', 'WITH', 'code.categoryCode = cat.name')
                ->where('code.langCode =:langCode');
        if(!empty($_cat_ids)){
            $query = $query->andWhere($qb->expr()->in('cat.id', ':catId'))
                        ->setParameter('catId', $_cat_ids);
        }
        $response = $query->setParameter('langCode',$lang_code )
                ->getQuery()
                ->getResult();
        return $response;
    }

    public function getBusinessCategory($lang_code) {
        $qb = $this->createQueryBuilder('cat');
        $result = $qb->select('cat.id, code.categoryName as category_name, cat.image, cat.image_thumb, cat.parent')
                ->innerJoin('UserManagerSonataUserBundle:BusinessCategoryCode', 'code', 'WITH', 'code.categoryCode = cat.name')
                ->where('code.langCode =:langCode')
                ->setParameter('langCode', $lang_code)
                ->getQuery()
                ->getResult();
        return $result;
    }
    
}
