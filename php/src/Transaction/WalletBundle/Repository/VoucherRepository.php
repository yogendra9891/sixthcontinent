<?php

namespace Transaction\WalletBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Transaction\TransactionSystemBundle\Interfaces\ICredit;
use Transaction\CommercialPromotionBundle\Interfaces\IPromotion;
use Transaction\CommercialPromotionBundle\Entity\CommercialPromotion;
use Transaction\WalletBundle\Entity\WalletCitizen;
use Transaction\WalletBundle\Entity\Voucher;
use Transaction\TransactionSystemBundle\Services\TransactionManager;


/**
 * VoucherRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VoucherRepository extends EntityRepository implements IPromotion {

    /**
     * Create the commercial promotion of type shopping card
     * 
     * @param array $param
     * @return bolleant
     */
    public function createPromotion($param) {
        $validParam = $this->validParamPromtion($param);
        if ($validParam["status"]) {
            $em = $this->getEntityManager();

            $date = new \DateTime("now");
            $model = new CommercialPromotion;
            $model->setInitQuantity($param["init_quantity"]);
            $model->setAvailableQuantity($param["init_quantity"]);


            //Time start
            $time_obj_start = new \DateTime($param["time_start"]);
//        $time_obj_start = new \DateTime("now");
            $model->setTimeStartH($time_obj_start);
            $model->setTimeStart($time_obj_start->getTimestamp());

            //Time End
            $time_obj_end = new \DateTime($param["time_end"]);
            //$time_obj_end = new \DateTime("now");
            $model->setTimeEndH($time_obj_end);
            $model->setTimeEnd($time_obj_end->getTimestamp());


            $model->setDiscountAmount($param["discount_amount"]);
            $model->setMaxUsageInitPrice(100);
            $model->setCommercialPromotionTypeId($param["promotion_type"]);
            $model->setSellerId($param["seller_id"]);
            $model->setSexFemale($param["sex_female"]);
            $model->setExtraInfo(FALSE);
            $model->setPrice($param["price"] * 100);
            $model->setStatus(1);


            $time_obj = new \DateTime("Now");
            $model->setTimeCreateH($time_obj);
            $model->setTimeCreate($time_obj->getTimestamp());

            if (( isset($param["tag_friends"]) && count($param["tag_friends"]) > 0 ) ||
                    ( isset($param["imageurl"]) && strlen($param["imageurl"]) > 0 ) || 
                    isset($param["description"]) && strlen($param["description"]) > 0) {
                $model->setExtraInfo(TRUE);
            }
            $em->persist($model);
            $em->flush();
            $em->clear();
            return $model;
        } else {
            return $validParam;
        }
    }
    
        /**
     * Check if the comerrcial promotion alues are all well defined
     * @param type $check_param
     */
    public function validParamPromtion($check_param) {
        return $message = array("status" => true, "code" => "You are late");
    }

}
