<?php

namespace Transaction\WalletBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Transaction\TransactionSystemBundle\Interfaces\ICredit;
use Transaction\CommercialPromotionBundle\Interfaces\IPromotion;
use Transaction\CommercialPromotionBundle\Entity\CommercialPromotion;
use Transaction\WalletBundle\Entity\WalletCitizen;
use Transaction\WalletBundle\Entity\Coupon;
use Transaction\TransactionSystemBundle\Services\TransactionManager;

/**
 * CouponRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CouponRepository extends EntityRepository implements ICredit, IPromotion {

    public function getCoupons($data) {


        $sql = "select cp.id as cpid,cp.time_start_h as starttime,cp.time_end_h as  
                 endtime,
                 cpn.id as cpnid, cpn.coupon_id as couponno,cpn.init_amount as credit,cpn.available_amount as balance,cpn.currency,cpn.max_usage_init_price,cpn.seller_id as shopid,cpn.wallet_citizen_id as citizenid,
                 str.id as storeid,str.email,str.description,str.phone,str.business_name,str.business_country,str.business_region,str.business_city,str.business_address,str.zip,str.province,str.map_place,str.latitude,str.longitude,str.store_image,str.name,str.avg_rate,str.vote_count,str.is_active,str.is_allowed
              from Coupon as cpn 
              inner join Store as str on cpn.seller_id = str.id 
              inner join CommercialPromotion as cp on cpn.commercial_promotion_id = cp.id 
              where cpn.wallet_citizen_id ='" . $data['wallet_citizen_id'] . "' AND cpn.available_amount > 0";

        if ($data['search_name'] != "") {
            $sql .=" AND str.business_name LIKE '%" . $data['search_name'] . "%' ";
        }

        $sql .=" GROUP BY  cpn.seller_id 
              ORDER BY  cpn.id DESC
              LIMIT " . $data['offset'] . "," . $data['limit'] . " ";

        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        return $result = $stmt->fetchAll();
    }

    public function getCoupon($data) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c')
                ->where('c.sellerId=:sellerId AND c.walletCitizenId=:walletCitizenId')
                ->setParameter('sellerId', $data['seller_id'])
                ->setParameter('walletCitizenId', $data['buyer_id']);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
    }
    
    /**
     * I create this cause getCoupon is not 
     * working as requested
     * 
     * @param array $data
     * @return type
     */
    public function getCouponSecond($data) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c')
                ->where('c.sellerId=:sellerId AND c.walletCitizenId=:walletCitizenId and c.availableAmount > 0')
                ->setParameter('sellerId', $data['seller_id'])
                ->setParameter('walletCitizenId', $data['wallet_citizen_id']);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
    }

    public function getSellerCoupon($data) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('SUM(c.availableAmount) AS couponAvailable')
                ->where('c.sellerId=:sellerId AND c.walletCitizenId=:walletCitizenId AND c.availableAmount> 0')
                ->setParameter('sellerId', $data['seller_id'])
                ->setParameter('walletCitizenId', $data['wallet_citizen_id']);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
    }

    public function updateCoupon($data) {
        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.availableAmount', '?1')
                ->set('u.timeUpdatedH', '?2')
                ->set('u.timeUpdated', '?3')
                ->where('u.id=?4')
                ->setParameter(1, $data['available_amount'])
                ->setParameter(2, date('Y-m-d H:i:s'))
                ->setParameter(3, strtotime(date('Y-m-d H:i:s')))
                ->setParameter(4, $data['id'])
                ->getQuery();
        $reponse = $query->getResult();

        if ($reponse) {
            return true;
        } else {
            return false;
        }
    }

    public function getUsageCredits($data, $returnData = null) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.id, c.availableAmount, c.maxUsageInitPrice')
                ->where('c.sellerId=:sellerId AND c.walletCitizenId=:walletCitizenId AND c.availableAmount > 0')
                ->setParameter('sellerId', $data['seller_id'])
                ->setParameter('walletCitizenId', $data['wallet_citizen_id']);
        $query = $qb->getQuery();
        $response = $query->getResult();
        if (!empty($response)) {
            return $response[0];
        }
    }

    public function updateCredits($data) {
        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.availableAmount', 'u.availableAmount - ?1')
                ->set('u.timeUpdatedH', '?2')
                ->set('u.timeUpdated', '?3')
                ->where('u.id=?4')
                ->setParameter(1, $data['amount_used'])
                ->setParameter(2, date('Y-m-d H:i:s'))
                ->setParameter(3, strtotime(date('Y-m-d H:i:s')))
                ->setParameter(4, $data['id'])
                ->getQuery();
        $response = $query->getResult();
        return $response;
    }

    /**
     * Create the commercial promotion of type coupon
     * 
     * @param array $param
     * @return bolleant
     */
    public function createPromotion($param) {
        $validParam = $this->validParamPromtion($param);
        if ($validParam["status"]) {
            $em = $this->getEntityManager();

            $date = new \DateTime("now");
            $model = new CommercialPromotion;
            $model->setInitQuantity($param["init_quantity"]);
            $model->setAvailableQuantity($param["init_quantity"]);


            //Time start
            $time_obj_start = new \DateTime($param["time_start"]);
//        $time_obj_start = new \DateTime("now");
            $model->setTimeStartH($time_obj_start);
            $model->setTimeStart($time_obj_start->getTimestamp());

            //Time End
            $time_obj_end = new \DateTime($param["time_end"]);
            //$time_obj_end = new \DateTime("now");
            $model->setTimeEndH($time_obj_end);
            $model->setTimeEnd($time_obj_end->getTimestamp());


            $model->setDiscountAmount(0);
            $model->setMaxUsageInitPrice($param["max_usage_init_price"]);
            $model->setCommercialPromotionTypeId($param["promotion_type"]);
            $model->setSellerId($param["seller_id"]);
            $model->setSexFemale($param["sex_female"]);
            $model->setExtraInfo(FALSE);
            
            $model->setPrice($param["price"] * 100);
            $model->setStatus(1);

            $time_obj = new \DateTime("Now");
            $model->setTimeCreateH($time_obj);
            $model->setTimeCreate($time_obj->getTimestamp());
            if (isset($param["tag_friends"]) && count($param["tag_friends"] > 0)) {
                $model->setExtraInfo(TRUE);
            }
            $em->persist($model);
            $em->flush();
            $em->clear();


            return $model;
        } else {
            return $validParam;
        }
    }

    /**
     * Check if the comerrcial promotion alues are all well defined
     * @param type $check_param
     */
    public function validParamPromtion($check_param) {
        return $message = array("status" => true, "code" => "You are late");
    }

    /**
     * Add One Coupon for Shop 
     * in the wallet of the citizen
     * 
     * @param array $param
     */
    public function addToCitizenWallet($param) {
        $wallets = $this->getEntityManager()
                  ->getRepository("WalletBundle:WalletCitizen") 
                 ->getWalletData($param["buyer_id"]);
        
        if(!isset($wallets[0]) &&  ! count($wallets) > 0 ){
            return false;
        }
        $wallet = $wallets[0];
        $param["wallet_citizen_id"] = $wallet->getId();
        
        //Check if the commercial promotion is still availabble
        $offers  = $this->getEntityManager()
                  ->getRepository("CommercialPromotionBundle:CommercialPromotion") 
                  ->getComercialPromotion($param["offer_id"] , null , 0 , 1 , null , "model");

        if(! isset($offers[0]) || $offers[0]["type"]!="coupon"){
            return array("code"=>7921,"message"=>"NO_OFFER_AVAILABLE");
        }
        $offer = $offers[0][0];
        $param["seller_id"] = $offer->getSellerId();
        //Only one coupon for Shop users can have
        $old_coupon = $this->getCouponSecond($param);

        if(isset($old_coupon) &&  count($old_coupon) > 0 ){
            return array("code"=>7923,"message"=>"ONE_COUPON_FOR_SHOPE_ALLOWED");
        }
        $result =  $this->createCommercialPromotionObject( $offer  , $wallet  );
        return $result;
        
        
    }
    /**
     * 
     * @param CommercialPromotion $offer
     * @param WalletCitizen $wallet
     */
    public function createCommercialPromotionObject( CommercialPromotion  $offer , WalletCitizen $wallet  , $currency = "EUR" ) {
        
        $em = $this->getEntityManager();
        
        //Decreasy the amount available
        $return_commercial_promotion = 
                $em->getRepository("CommercialPromotionBundle:CommercialPromotion")
                ->decreaseCommercialPromotion($offer->getId() , 1);
        $return_wallet = 
        $em->getRepository("WalletBundle:WalletCitizen")
        ->increaseCitizenWalletCouponAmount($wallet , $offer->getPrice() );
        
        $transacton_m = new TransactionManager();
        

        //Coupon creation belonging to the citizen wallet
        $entity= new Coupon;      
        
        $entity->setCouponId($transacton_m->getTransactionIdToken(10));
        $entity->setInitAmount($offer->getPrice());
        $entity->setAvailableAmount($offer->getPrice());
        $entity->setTimeCreatedH(new \DateTime("now"));
        $entity->setTimeUpdatedH(new \DateTime("now"));
        $entity->setTimeCreated(time());
        $entity->setTimeUpdated(time());
        $entity->setCurrency($currency);
        $entity->setSellerId($offer->getSellerId());
        $entity->setWalletCitizenId($wallet->getId());
        $entity->setCommercialPromotionId($offer->getId());
        $entity->setMaxUsageInitPrice($offer->getMaxUsageInitPrice());

        $em->persist($entity);
        $em->flush();
        if($entity->getId() > 0)
            return array("code"=>101,"message"=>"SUCCESS");
        else
            return array("code"=>7922,"message"=>"IMPOSSIBLE_TO_CREATE_RECORD_COUPON"); 
        
        
    }

}
