<?php

namespace Transaction\WalletBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Transaction\TransactionSystemBundle\Interfaces\ICredit;
/**
 * CardRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CardRepository extends EntityRepository implements ICredit
{
    public function getCitizenSellerCard($data) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('SUM(c.availableAmount) AS totalCitizenCards')
                ->where('c.walletCitizenId=:walletCitizenId AND c.sellerId=:sellerId AND c.availableAmount> 0')
                ->setParameter('walletCitizenId', $data['wallet_citizen_id'])
                 ->setParameter('sellerId', $data['seller_id']);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
    }

    public function getCards($data) {
      
          $sql = "select crd.time_created_h as starttime,crd.time_updated_h as endtime, 
              crd.id as cardid, crd.card_id as cardno,crd.init_amount as credit,crd.available_amount as balance,crd.currency,crd.max_usage_init_price,crd.seller_id as shopid,crd.wallet_citizen_id as citizenid,
                 str.id as storeid,str.email,str.description,str.phone,str.business_name,str.business_country,str.business_region,str.business_city,str.business_address,str.zip,str.province,str.map_place,str.latitude,str.longitude,str.store_image,str.name,str.avg_rate,str.vote_count,str.is_active,str.is_allowed
              from Card as crd 
              inner join Store as str on crd.seller_id = str.id 
              where crd.wallet_citizen_id ='".$data['wallet_citizen_id']."' AND crd.available_amount > 0"; 
          
            if($data['search_name']!=""){
 
               $sql .=" AND str.business_name LIKE '%".$data['search_name']."%' "; 
             }

             $sql .=" GROUP BY  crd.seller_id 
              ORDER BY  crd.id DESC
              LIMIT ".$data['offset'].",".$data['limit']." ";

         $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        return $result = $stmt->fetchAll();
    }

   public function countShoppingCardUpto50($data){

        $sql = "select count(str.id) as recordcount
              from Card as crd 
              inner join Store as str on crd.seller_id = str.id 
              where crd.wallet_citizen_id ='".$data['wallet_citizen_id']."' AND crd.available_amount > 0"; 
            if($data['search_name']!=""){
 
               $sql .=" AND str.business_name LIKE '%".$data['search_name']."%' "; 
             }

         $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        return $result = $stmt->fetchAll();
   }

     
    public function getCitizenCard($citizenId) {
		$qb = $this->createQueryBuilder('c');
        $qb->select('c')
                ->where('c.walletCitizenId=:walletCitizenId')
                ->setParameter('walletCitizenId', $citizenId);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
	}

    public function getCitizenCardForTransaction($data) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c')
                ->where('c.walletCitizenId=:walletCitizenId AND c.sellerId=:sellerId')
                ->setParameter('walletCitizenId', $data['wallet_citizen_id'])
                ->setParameter('sellerId', $data['seller_id']);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
    }

    public function updateTransactionCard($data) {
        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.availableAmount', '?1')
                ->set('u.timeUpdatedH', '?2')
                ->set('u.timeUpdated', '?3')
                ->where('u.id=?4')
                ->setParameter(1, $data['available_amount'])
                ->setParameter(2, date('Y-m-d H:i:s'))
                ->setParameter(3, strtotime(date('Y-m-d H:i:s')))
                ->setParameter(4, $data['id'])
                ->getQuery();
        $reponse = $query->getResult();

        if($reponse){
                return true;
        } else {
            return false;
        }
    }

    public function getUsageCredits($data, $returnData = null) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.id, c.availableAmount, c.maxUsageInitPrice')
                ->where('c.sellerId=:sellerId AND c.walletCitizenId=:walletCitizenId AND c.availableAmount > 0')
                ->setParameter('sellerId', $data['seller_id'])
                ->setParameter('walletCitizenId', $data['wallet_citizen_id']);
        $query = $qb->getQuery();
        $response = $query->getResult();
        if(!empty($response)) {
            return $response[0];
        }
    }

    public function updateCredits($data) {
        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.availableAmount', 'u.availableAmount - ?1')
                ->set('u.timeUpdatedH', '?2')
                ->set('u.timeUpdated', '?3')
                ->where('u.id=?4')
                ->setParameter(1, $data['amount_used'])
                ->setParameter(2, date('Y-m-d H:i:s'))
                ->setParameter(3, strtotime(date('Y-m-d H:i:s')))
                ->setParameter(4, $data['id'])
                ->getQuery();
        $response = $query->getResult();
        return $response;
    }
}
