<?php

namespace Transaction\WalletBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Transaction\TransactionSystemBundle\Interfaces\ICredit;
use Transaction\WalletBundle\Entity\WalletCitizen;
use Transaction\CitizenIncomeBundle\Entity\CiFromProfPersFriendsFollower;
use Transaction\CitizenIncomeBundle\Entity\CiFromProfPersFriendsFollowerHasWalletCitizen;
use Transaction\WalletBundle\Entity\Card;
use Transaction\WalletBundle\Entity\ShoppingCard;
use Transaction\TransactionSystemBundle\Services\TransactionManager;
use Transaction\WalletBundle\Interfaces\IWallet;

/**
 * WalletCitizenRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WalletCitizenRepository extends EntityRepository implements ICredit {

    private $_CIMaxUsageInitPrice = 50;
    public static $BELOW_MAXIMUM = 1;
    public static $ABOVE_MINIMUM = 2;
    private $_minCard = 500;

    /**
     * Return Wallet infromation
     * @param type $id (id of the buyer = fos_user_user.id)
     * @return type
     */
    public function getWalletData($id) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c')
                ->where('c.buyerId=:buyerId')
                ->setParameter('buyerId', $id);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
    }

    public function updateWalletCitizenWritingStatus($data) {
        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.writingStatus', '?1')
                ->where('u.buyerId=?2')
                ->setParameter(1, $data['writing_status'])
                ->setParameter(2, $data['buyer_id'])
                ->getQuery();
        $reponse = $query->getResult();

        if ($reponse) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * 
     * @param type $id of the Buyer
     * @return WalletObj
     */
    public function getavailablecitizenincome($id) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.currency', 'c.citizenIncomeAvailable', 'c.citizenIncomeGained', 'c.id')
                ->where('c.buyerId=:buyerId')
                ->setParameter('buyerId', $id);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
    }

    public function getTopCitizenPerIncome($limit) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c')
                ->orderBy('c.citizenIncomeGained', 'DESC')
                ->setMaxResults($limit);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
    }

    /**
     * 
     * @param string $ids
     * @param integer $amount_to_increase 
     * @return array  
     */
    public function updateWalletBasedToConvertionRation($ids, $amount_to_increase) {

        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare("
                UPDATE WalletCitizen w
                LEFT JOIN Currency c
                on c.currency_label = w.currency
                set w.citizen_income_available = w.citizen_income_available + (:amount_to_increase*c.base_to_currency_ratio)  
                ,w.citizen_income_gained = w.citizen_income_gained + (:amount_to_increase*c.base_to_currency_ratio)
                ,w.time_last_update =  UNIX_TIMESTAMP(now()) 
                ,w.time_last_update_h = Now()
                where w.buyer_id IN ($ids)
                ");
        $statement->bindValue('amount_to_increase', abs($amount_to_increase));
        return $statement->execute();
    }

    public function updateCitizenWallet($data) {
        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.cardAvailable', 'u.cardAvailable - ?2')
                ->set('u.shoppingCardAvailable', 'u.shoppingCardAvailable - ?3')
                ->set('u.creditPositionAvailable', 'u.creditPositionAvailable - ?4')
                ->set('u.couponAvailable', 'u.couponAvailable - ?5')
                ->set('u.timeLastUpdateH', '?6')
                ->set('u.timeLastUpdate', '?7')
                ->where('u.buyerId=?8')
                ->setParameter(2, abs($data['card_available']))
                ->setParameter(3, abs($data['shopping_card_available']))
                ->setParameter(4, abs($data['credit_position_available']))
                ->setParameter(5, abs($data['coupon_available']))
                ->setParameter(6, date('Y-m-d H:i:s'))
                ->setParameter(7, strtotime(date('Y-m-d H:i:s')))
                ->setParameter(8, $data['buyer_id'])
                ->getQuery();
        $reponse = $query->getResult();

        if ($reponse) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * 
     * @param WalletCitizen $wallet
     * @param type $amount
     * @return boolean
     */
    public function increaseCitizenWalletCouponAmount(WalletCitizen $wallet, $amount) {

        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.couponAvailable', 'u.couponAvailable + :amount')
                ->set('u.timeLastUpdateH', ':timeLastUpdateH')
                ->set('u.timeLastUpdate', ':timeLastUpdate')
                ->where('u.buyerId= :buyerId')
                ->setParameter("amount", abs($amount))
                ->setParameter("timeLastUpdateH", New \DateTime("now"))
                ->setParameter("timeLastUpdate", time())
                ->setParameter("buyerId", $wallet->getBuyerId())
                ->getQuery();
        $reponse = $query->getResult();

        if ($reponse) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * 
     * @param WalletCitizen $wallet
     * @param type $amount
     * @return boolean
     */
    public function increaseCitizenWalletShoppingCardAmount(WalletCitizen $wallet, $amount) {

        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.shoppingCardAvailable', 'u.shoppingCardAvailable + :amount')
                ->set('u.timeLastUpdateH', ':timeLastUpdateH')
                ->set('u.timeLastUpdate', ':timeLastUpdate')
                ->where('u.buyerId= :buyerId')
                ->setParameter("amount", $amount)
                ->setParameter("timeLastUpdateH", New \DateTime("now"))
                ->setParameter("timeLastUpdate", time())
                ->setParameter("buyerId", $wallet->getBuyerId())
                ->getQuery();
        $reponse = $query->getResult();

        if ($reponse) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Checking the citizen income
     * that each wallet has available
     * @param array $data
     * @param array $returnData
     * @return obj
     */
    public function getUsageCredits($data, $returnData = null) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.id, c.citizenIncomeAvailable, c.transactionPreference')
                ->where('c.buyerId=:buyerId AND c.citizenIncomeAvailable > 0')
                ->setParameter('buyerId', $data['buyer_id']);
        $query = $qb->getQuery();
        $response = $query->getResult();
        if (!empty($response)) {
            $TrManager = new TransactionManager();

            $avlAmnt = $response[0]['citizenIncomeAvailable'];
            $cashPayment = $returnData['init_amount'] - $this->getCashPayment($returnData);

            //Definition of the object to get max usable amount
            $creditObj = array(
                'init_amount' => $returnData['init_amount'],
                'cashpayment' => $cashPayment,
                'max_usage_init_price' => $this->_CIMaxUsageInitPrice,
                'available_amount' => $avlAmnt
            );

            $creditUsage = $TrManager->checkCreditUsage($creditObj);

            $cashPayment = $creditUsage['cashpayment'];
            $amount_used = $creditUsage['amount_used'];

            $avlAmnt = 0;
            //if i have enough c.i to cover atleast the first shopping card upto50% of 5.00 
            if ($response[0]['citizenIncomeAvailable'] >= $this->_minCard) {
                /* Below maximum it can always be used */
                $payment_preference = $response[0]['transactionPreference'];
                $avlAmnt = $this->generateCardsUpTo50($payment_preference, $amount_used);

                /* Above minium it can be used only if i have enough citizen income */
                if ($payment_preference == self::$ABOVE_MINIMUM && $avlAmnt > $response[0]['citizenIncomeAvailable']) {
                    $avlAmnt = $this->generateCardsUpTo50(self::$BELOW_MAXIMUM, $amount_used);
                }
            }

            $response[0]['availableAmount'] = $avlAmnt;
            $response[0]['maxUsageInitPrice'] = $this->_CIMaxUsageInitPrice;
            return $response[0];
        }
    }

    /**
     * We reduce the citizen income from the walle of the complete vale of
     * $available_amount cause we always use that value to generate cards
     * 
     * but the card is reduced of the value of amount_used
     * @param type $data
     * @return type
     */
    public function updateCredits($data) {
        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.citizenIncomeAvailable', 'u.citizenIncomeAvailable - ?1')
                ->set('u.timeLastUpdateH', '?2')
                ->set('u.timeLastUpdate', '?3')
                ->where('u.buyerId=?4')
                ->setParameter(1, abs($data['available_amount']))
                ->setParameter(2, date('Y-m-d H:i:s'))
                ->setParameter(3, strtotime(date('Y-m-d H:i:s')))
                ->setParameter(4, $data['buyer_id'])
                ->getQuery();
        $response = $query->getResult();

        /* Generate Cards */
        $initAmount = $data['available_amount'];
        $array = array(10000, 5000, 3000, 1000, 500);
        $retrunData = array();
        $count = 1;
        foreach ($array as $val) {
            $x = floor($initAmount / $val);
            $remainder = $initAmount % $val;
            if ($x > 0) {
                $counter = 1;
                for ($i = 1; $i <= $x; $i++) {
                    $amountData = array('init_price' => $val, 'amount_used' => $data['amount_used']);
                    $retrunData[] = $this->generateCards($data, $amountData, $count);
                    $count++;
                }
                if ($remainder <= $this->_minCard && $remainder > 0) {
                    $amountData = array('init_price' => $this->_minCard, 'amount_used' => $remainder);
                    $retrunData[] = $this->generateCards($data, $amountData, $count);
                    break;
                }
            }
            $initAmount = $initAmount - $val * $x;
        }
        return $retrunData;
    }

    public function generateCards($data, $amountData, $number = '') {
        $returnData = array();
        $em = $this->getEntityManager();
        $TrManager = new TransactionManager();
        $dateTime = new \DateTime('now');
        $Timestamp = strtotime(date('Y-m-d H:i:s'));

        /* Insert new generated card detail */
        if($number == '') {
            $number = 1;
        }
        $cardId = 'SC_'.$data['seller_id'].'_'.date('dmY').'_'.$number;
        $cardPost = new Card();
        $cardPost->setcardId($cardId);
        $cardPost->setinitAmount($amountData['init_price']);
        $cardPost->setavailableAmount($amountData['init_price'] - $amountData['amount_used']);
        $cardPost->settimeCreatedH($dateTime);
        $cardPost->settimeUpdatedH($dateTime);
        $cardPost->settimeCreated($Timestamp);
        $cardPost->settimeUpdated($Timestamp);
        $cardPost->setcurrency($TrManager->getBuyerCurrency($data['buyer_id']));
        $cardPost->setmaxUsageInitPrice($this->_CIMaxUsageInitPrice);
        $cardPost->setsellerId($data['seller_id']);
        $cardPost->setwalletCitizenId($data['wallet_citizen_id']);

        $em->persist($cardPost);
        $em->flush();
        $em->clear();

        if ($cardPost->getId()) {
            $returnData = array(
                'id' => $cardPost->getId(),
                'card_id' => $cardId,
                'init_amount' => $amountData['init_price'],
                'available_amount' => $amountData['init_price'] - $amountData['amount_used'],
                'amount_used' => $amountData['amount_used']
            );
            return $returnData;
        }
    }

    public function getCashPayment($obj) {
        unset($obj['init_amount']);
        return array_sum($obj);
    }

    public function generateCardsUpTo50($TransPref, $amount) {
        $cardValue = 0;
        if ($amount > 0) {
            if ($amount <= $this->_minCard) {
                $cardValue = $this->_minCard;
            } else {
                $divideAmnt = $amount / $this->_minCard;
                $expldAmnt = explode('.', $divideAmnt);
                if ($TransPref == self::$BELOW_MAXIMUM) {
                    $cardValue = floor($amount / $this->_minCard) * $this->_minCard;
                } else {
                    $cardValue = ceil($amount / $this->_minCard) * $this->_minCard;
                }
            }
        }
        return $cardValue;
    }

    /*
     * Get citizen wallet history for IN AgetTransactionDetailND OUT
     * @param Obj $data
     * return transaction records of citizen
     */

    public function getcitizenwallethistory($data) {
        $response = $this->getEntityManager()
                ->createQuery("SELECT u 
                            FROM Transaction\TransactionSystemBundle\Entity\Transaction u
                            WHERE u.buyerId = :buyerId AND u.status = 'COMPLETED'
                            ORDER By u.timeInitH DESC
                            ")
                ->setFirstResult($data['offset'])
                ->setMaxResults($data['limit'])
                ->setParameter(":buyerId", $data['buyer_id'])
                ->getResult();

        return $response;
    }

    /*
     * Get count of citizen wallet history for IN AND OUT
     * @param Obj $data
     * return count of transaction records of citizen
     */

    public function getcountofwallethistory($data) {
        $response = $this->getEntityManager()
                ->createQuery("SELECT COUNT(u.id) AS historyCount
                            FROM Transaction\TransactionSystemBundle\Entity\Transaction u
                            WHERE u.buyerId = :buyerId AND u.status = 'COMPLETED'
                            ")
                ->setParameter(":buyerId", $data['buyer_id'])
                ->getResult();

        if (!empty($response)) {
            if (($data['limit'] + $data['offset']) >= $response[0]['historyCount']) {
                $response[0]['hasNext'] = false;
            } else {
                $response[0]['hasNext'] = true;
            }
            return $response[0];
        }
    }

    /*
     * Get citzen transaction shop detail
     * @param Obj $data
     * return shop data
     */

    public function getcitizenhistoryshopdetail($data) {
        $response = $this->getEntityManager()
                ->createQuery("SELECT u 
                            FROM StoreManager\StoreBundle\Entity\Store u
                            WHERE u.id = :storeId
                            ")
                ->setParameter(":storeId", $data['store_id'])
                ->getResult();

        return $response;
    }

    /*
     * Get citizen transaction business category detail
     * @param Obj $data
     * return category response of transaction shop
     */

    public function getcitizenhistoryshopcatdetail($data) {
        $response = $this->getEntityManager()
                ->createQuery("SELECT u 
                            FROM UserManager\Sonata\UserBundle\Entity\BusinessCategoryCode u
                            WHERE u.id = :catId
                            ")
                ->setParameter(":catId", $data['cat_id'])
                ->getResult();

        return $response;
    }

    public function getCreditAvailableInShop($buyerId, $storeId) {
        $data['buyer_id'] = $buyerId;
        $data['seller_id'] = $storeId;
        $em = $this->getEntityManager();

        $citizen_income_s = $this->getavailablecitizenincome($buyerId);
        $citizen_income = isset($citizen_income_s[0]) ? $citizen_income_s[0] : array();
        $data["citizen_income"] = isset($citizen_income) ? $citizen_income : '';
        $data['wallet_citizen_id'] = isset($citizen_income["id"]) ? $citizen_income["id"] : '';

        //Shopping Card 
        $shopping_card_s = $em->getRepository("WalletBundle:ShoppingCard")
                ->getCitizenShoppingCardsForTransaction($data);
        $shopping_card = isset($shopping_card_s) ? $shopping_card_s : array();
        $data["shopping_card"] = $shopping_card;


        $coupon = $em->getRepository("WalletBundle:Coupon")
                ->getUsageCredits($data);
        $coupon = isset($coupon) ? $coupon : array();
        $data["coupon"] = $coupon;

        $credit_postion = $em->getRepository("WalletBundle:CreditPosition")
                ->getUsageCredits($data);

        $data["credit_postion"] = $credit_postion;

        /*

          $data["coupon"] = $coupon;

         */

        return $data;
    }

    /**
     * It creates the wallet of the citizen profile
     * @param int $buyer_id
     * @param string, currecny $currency
     */
    public function createWallet($buyer_id, $currency = "EUR") {
        $em = $this->getEntityManager();
        $wallet_citizen = New WalletCitizen;
        $wallet_citizen->setCurrency($currency);
        $wallet_citizen->setPendingPayment(0);
        $wallet_citizen->setShoppingCardAvailable(0);
        $wallet_citizen->setCardAvailable(0);
        $wallet_citizen->setCouponAvailable(0);
        $wallet_citizen->setCitizenIncomeAvailable(0);
        $wallet_citizen->setCitizenIncomeGained(0);
        $wallet_citizen->setTimeLastUpdateH(new \DateTime('now'));
        $wallet_citizen->setTimeCreateH(new \DateTime('now'));
        $wallet_citizen->setTimeLastUpdate(time());
        $wallet_citizen->setTimeCreate(time());
        $wallet_citizen->setWritingStatus(0);
        $wallet_citizen->setBuyerId($buyer_id->getId());
        $wallet_citizen->setCreditPositionAvailable(0);
        $wallet_citizen->setCreditPositionGained(0);
        $wallet_citizen->setTransactionPreference(0);
        $em->persist($wallet_citizen);
        $em->flush();

        return $wallet_citizen->getId();
    }

    /**
     * Get the c.i that can be used not rogetWalletDataunded by  500 but 100
     * @param type $data
     */
    public function getMaxUsageCreditJustRounded($data, $rounded = 100) {
        $transacationc_m = new TransactionManager();
        $result = $transacationc_m->checkCreditUsage($data);
        $result['amount_citizen_income'] = floor($result['amount_used'] / $rounded) * $rounded;
        return $result;
    }

    /*
     * Reduce citizen income  after shopping card purchase
     */

    public function updateWalletCitizenIncome($data) {
        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.citizenIncomeAvailable', 'u.citizenIncomeAvailable - ?1')
                ->set('u.timeLastUpdateH', '?2')
                ->set('u.timeLastUpdate', '?3')
                ->where('u.buyerId=?4')
                ->setParameter(1, abs($data['ci_used']))
                ->setParameter(2, date('Y-m-d H:i:s'))
                ->setParameter(3, strtotime(date('Y-m-d H:i:s')))
                ->setParameter(4, $data['buyer_id'])
                ->getQuery();
        $response = $query->getResult();
    }

    /*
     * Reduce citizen income  after shopping card purchase
     */

    public function reduceWalletCitizenIncome($data) {
        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.citizenIncomeAvailable', 'u.citizenIncomeAvailable - ?1')
                ->set('u.timeLastUpdateH', '?2')
                ->set('u.timeLastUpdate', '?3')
                ->where('u.buyerId=?4')
                ->setParameter(1, abs($data['ci_used']))
                ->setParameter(2, date('Y-m-d H:i:s'))
                ->setParameter(3, strtotime(date('Y-m-d H:i:s')))
                ->setParameter(4, $data['buyer_id'])
                ->getQuery();
        $response = $query->getResult();
    }

    /*
     * Increase citizen income  after shopping card purchase
     */

    public function increaseWalletCitizenIncome($data) {
        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.citizenIncomeAvailable', 'u.citizenIncomeAvailable + ?1')
                ->set('u.timeLastUpdateH', '?2')
                ->set('u.timeLastUpdate', '?3')
                ->where('u.buyerId=?4')
                ->setParameter(1, abs($data['ci_used']))
                ->setParameter(2, date('Y-m-d H:i:s'))
                ->setParameter(3, strtotime(date('Y-m-d H:i:s')))
                ->setParameter(4, $data['buyer_id'])
                ->getQuery();
        $response = $query->getResult();
    }

    /*
     * Give return back citizen income  after shopping card purchase
     */

    public function returnWalletCitizenIncome($data) {
        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.citizenIncomeAvailable', 'u.citizenIncomeAvailable + ?1')
                ->set('u.timeLastUpdateH', '?2')
                ->set('u.timeLastUpdate', '?3')
                ->where('u.buyerId=?4')
                ->setParameter(1, abs($data['ci_used']))
                ->setParameter(2, date('Y-m-d H:i:s'))
                ->setParameter(3, strtotime(date('Y-m-d H:i:s')))
                ->setParameter(4, $data['buyer_id'])
                ->getQuery();
        $response = $query->getResult();
    }

    /*
     * Update citizen settings
     */

    public function updateWalletSettings($data) {
        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.transactionPreference', '?1')
                ->where('u.buyerId=?2')
                ->setParameter(1, $data['setting'])
                ->setParameter(2, $data['buyer_id'])
                ->getQuery();
        $response = $query->getResult();

        if ($response) {
            return true;
        } else {
            return false;
        }
    }

    /*
     * Get today gain
     * @param $reqObj
     */

    public function getTodayGain($data) {
        /* Initilization */
        $cashBackData = array();
        $cashBackData[0]['totalBaseCurrency'] = 0;

        $ciProfPersData = array();
        $ciProfPersData[0]['totalciProfPers'] = 0;

        $ciProfPersWalletData = array();
        $ciProfPersWalletData[0]['totalProfPersWallet'] = 0;

        $ciRedistributionData = array();
        $ciRedistributionData[0]['totalciRedistribution'] = 0;

        $ciRedistributionWalletData = array();
        $ciRedistributionWalletData[0]['totalProfPersWallet'] = 0;

        $ciAffData = array();
        $ciAffData[0]['totalCiAffiliated'] = 0;

        $ciShopAffData = array();
        $ciShopAffData[0]['totalCiShopAffiliated'] = 0;

        /* Load entity manager */
        $em = $this->getEntityManager();
        $time =strtotime("midnight");


        /* Get CI from CIFromCashBack */
        $cashBackData = $this->getEntityManager()
                ->createQuery("SELECT SUM(u.singleShareBaseCurrency) AS totalBaseCurrency 
                                        FROM Transaction\CitizenIncomeBundle\Entity\CiFromCashBack u
                                        WHERE u.walletCitizenId = :walletCitizenId 
                                        AND u.timeCreated >= :timeCreated
                                        ")
                ->setParameter(":walletCitizenId", $data['wallet_citizen_id'])
                ->setParameter(":timeCreated", $time)
                ->getResult();

        $cashback = $cashBackData[0]['totalBaseCurrency'];

        /* CI from Citiezen Affiliated */
        $ciAffData = $this->getEntityManager()
                ->createQuery("SELECT SUM(u.singleShareBaseCurrency) AS totalCiAffiliated 
                                        FROM Transaction\CitizenIncomeBundle\Entity\CiFromCitizenAffiliated u
                                        WHERE u.walletCitizenId = :walletCitizenId 
                                        AND u.timeCreated >= :timeCreated
                                        ")
                ->setParameter(":walletCitizenId", $data['wallet_citizen_id'])
                ->setParameter(":timeCreated", $time)
                ->getResult();

        $ciAff = $ciAffData[0]['totalCiAffiliated'];

        /* CI from Shop Affiliated */
        $ciShopAffData = $this->getEntityManager()
                ->createQuery("SELECT SUM(u.singleShareBaseCurrency) AS totalCiShopAffiliated 
                                        FROM Transaction\CitizenIncomeBundle\Entity\CiFromShopAffiliated u
                                        WHERE u.walletCitizenId = :walletCitizenId 
                                        AND u.timeCreated >= :timeCreated
                                        ")
                ->setParameter(":walletCitizenId", $data['wallet_citizen_id'])
                ->setParameter(":timeCreated", $time)
                ->getResult();
        $ciShopAff = $ciShopAffData[0]['totalCiShopAffiliated'];
        /* CI from All NAtion */
        $qb = $this->createQueryBuilder('wc');
        $qb->select(' SUM(ciAllNation.singleShareBaseCurrency) AS allNationCi  ')
                ->innerJoin('CitizenIncomeBundle:CiFromAllNation', 'ciAllNation', 'WITH', ' ciAllNation.timeRedistribution >=  wc.timeCreate  '
                        . ' and ciAllNation.timeRedistribution >= :timeRedistribution')
                ->where('wc.buyerId = :walletCitizenId')
                ->setParameter(":walletCitizenId", $data['wallet_citizen_id'])
                ->setParameter(":timeRedistribution", $time);
        $allNationCiData = $qb->getQuery()->getResult();


        $allNationCi = $allNationCiData[0]['allNationCi'];


        $result["cashBack"] = number_format($cashback / 100, '2', '.', '');
        $result["citizenAffiliated"] = number_format($ciAff / 100, '2', '.', '');
        $result["shopAffiliated"] = number_format($ciShopAff / 100, '2', '.', '');
        $result["totalProfPersFollower"] = 0;
        $result["totalAllNation"] = number_format($allNationCi / 100, '2', '.', '');

        $todayGain = $cashback + $ciAff + $ciShopAff + $allNationCi ;


        $result["today_gain"] = number_format($todayGain / 100, '2', '.', '');
        return $result;
    }

    public function getCiGainedByDay($param) {
        $result = array();
        $result["ci_cashback"] = $this->getCiGainedByDayCashBack($param, $result);
        $result["ci_citizen_affiliated"] = $this->getCiGainedByDayciCitizenAffiliated($param, $result);
        $result["ci_shop_affiliated"] = $this->getCiGainedByDayShopAffiliated($param, $result);
        $result["ci_all_nation"] = $this->getCiGainedByAllNation($param, $result);
        return $result;
    }

    public function getCiGainedByDayCashBack($param) {
        $records = array();
        $qb = $this->createQueryBuilder('wc');
        $qb->select('wc.id , wc.buyerId , ciCashback.singleShareBaseCurrency as ci_cashback_share , ciCashback.timeCreated as cashback_time  , ciCashback.sixcTransactionId as sixc_id ')
                ->innerJoin('CitizenIncomeBundle:CiFromCashBack', 'ciCashback', 'WITH', 'ciCashback.walletCitizenId=wc.id and ciCashback.timeCreated BETWEEN  :start_time  AND :end_time ')
                ->where('wc.buyerId = :buyerId ')
                ->setParameter('buyerId', $param["buyer_id"])
                ->setParameter('start_time', $param["start_time"])
                ->setParameter('end_time', $param["end_time"]);
        try {
            $records = $qb->getQuery()->getArrayResult();
        } catch (\Exception $e) {
            
        }

        return $records;
    }

    public function getCiGainedByDayciCitizenAffiliated($param) {
        $records = array();
        $qb = $this->createQueryBuilder('wc');
        $qb->select('wc.id , wc.buyerId ,   ciCitizenAffiliated.singleShareBaseCurrency as ci_citizen_affiliated_share  , ciCitizenAffiliated.timeCreated as citizen_affiliated_time  , ciCitizenAffiliated.sixcTransactionId as sixc_id')
                ->innerJoin('CitizenIncomeBundle:CiFromCitizenAffiliated', 'ciCitizenAffiliated', 'WITH', 'ciCitizenAffiliated.walletCitizenId=wc.id and ciCitizenAffiliated.timeCreated BETWEEN  :start_time  AND :end_time ')
                ->where('wc.buyerId = :buyerId ')
                ->setParameter('buyerId', $param["buyer_id"])
                ->setParameter('start_time', $param["start_time"])
                ->setParameter('end_time', $param["end_time"]);
        try {
            $records = $qb->getQuery()->getArrayResult();
        } catch (\Exception $e) {
            
        }

        return $records;
    }

    public function getCiGainedByDayShopAffiliated($param) {
        $records = array();
        $qb = $this->createQueryBuilder('wc');
        $qb->select('wc.id , wc.buyerId ,  ciShopAffiliated.singleShareBaseCurrency as ci_shop_affiliated_share , ciShopAffiliated.timeCreated as shop_affiliated_time , ciShopAffiliated.sixcTransactionId as sixc_id  ')
                ->innerJoin('CitizenIncomeBundle:CiFromShopAffiliated', 'ciShopAffiliated', 'WITH', 'ciShopAffiliated.walletCitizenId=wc.id and ciShopAffiliated.timeCreated BETWEEN  :start_time  AND :end_time  ')
                ->where('wc.buyerId = :buyerId ')
                ->setParameter('buyerId', $param["buyer_id"])
                ->setParameter('start_time', $param["start_time"])
                ->setParameter('end_time', $param["end_time"]);
        try {
            $records = $qb->getQuery()->getArrayResult();
        } catch (\Exception $e) {
            
        }

        return $records;
    }
    public function getCiGainedByAllNation($param) {

        $records = array();
        $qb = $this->createQueryBuilder('wc');
        $qb->select('wc.id , wc.buyerId ,  ciAllNation.singleShareBaseCurrency as ci_all_share , ciAllNation.timeRedistribution as all_time  ')
                ->innerJoin('CitizenIncomeBundle:CiFromAllNation', 'ciAllNation', 'WITH', ' ciAllNation.timeRedistribution >=  wc.timeCreate  and ciAllNation.timeRedistribution BETWEEN :start_time AND  :end_time')
                ->where('wc.buyerId = :buyerId')
                ->setParameter('buyerId', $param["buyer_id"])
                ->setParameter('start_time', $param["start_time"])
                ->setParameter('end_time', $param["end_time"]);
        try {
            $records = $qb->getQuery()->getArrayResult();
        } catch (\Exception $e) {
            
        }

        return $records;
    }

    /**
     * 
     * @param type $param
     * @return type
     */
    public function getWalletWithCi($param , $offset , $limit) {
        $records = array();
        $qb = $this->createQueryBuilder('wc');
        $qb->select('wc.id , wc.buyerId as buyer_id')
        ->where(' wc.timeLastUpdate >  :start_time  ')
                ->setParameter('start_time', $param["start_time"])
                ->setFirstResult($offset)     
               ->setMaxResults($limit) ;
        try {
            $records = $qb->getQuery()->getArrayResult();
        } catch (\Exception $e) {
            
        }
        return $records;
    }
    
    /**
     * 
     * @param int $time_end_transaction (users that when the last transaction done they were registered)
     * @return type
     */
    public function getAllWAllet() {
        $records = array();
        $qb = $this->createQueryBuilder('wc');
        $qb->select('wc.buyerId as id');
        $records = $qb->getQuery()->getArrayResult();
        
        return $records;
    }
    
    /**
     * Get citizen tacimeter status and left days for the next redistribution
     * @param $data
     */
    public function citizenTacimeter($data) {
        $TrManager = new TransactionManager();
        
        /* Get user currecny code and symbol */
        $currencyCode = $TrManager->getBuyerCurrency($data['buyer_id']);
        $currencySymbol = $TrManager->getCurrencyCode($currencyCode);
        
        /*  
         * Get the redistribution references for time period 
         * Get prev redistribution time
         */
        $currentTimeStamp = strtotime(date('Y-m-d H:i:s'));
        $prevData = array('type' => 'prev', 'time' => $currentTimeStamp);
        $previousRedistribution = $this->getPrevNextTimeRedistribution($prevData);
        
        /* Get next redistribution time */
        $nextData = array('type' => 'next', 'time' => $currentTimeStamp);
        $nextRedistribution = $this->getPrevNextTimeRedistribution($nextData);

        /* Consider first day of next month if there is no reference for next redistribution */
        if(empty($nextRedistribution)) {
            $nextRedistribution['nextRedistribution'] = strtotime(date('Y-m-d',strtotime('first day of next month')));
        }
        
        /* Remaining days for next redistribution */
        $remainingDays = ceil(($nextRedistribution['nextRedistribution'] - $currentTimeStamp) / (60*60*24));
     
        /* If redistribution date is today then for remaining days we have to take a reference of first day of next month */
        if($remainingDays == 0) {
            $nextTimeStamp = strtotime(date('Y-m-d',strtotime('first day of next month')));
            $remainingDays = ceil(($nextTimeStamp - $nextRedistribution['nextRedistribution']) / (60*60*24));
            $nextRedistribution['nextRedistribution'] = strtotime(date('Y-m-d',strtotime('first day of next month')));
        }
        
        /* Get sum of init price of transaction between a period of time */
        $startDate = $previousRedistribution['previousRedistribution'];
        $startDate = 1451602801;
        $endDate = $nextRedistribution['nextRedistribution'];
        
        $transactionData[0]['transaction_amount'] = '0.00';
        $transactionData = $this->getEntityManager()
                ->createQuery("SELECT SUM(u.initPrice) AS transaction_amount
                                        FROM Transaction\TransactionSystemBundle\Entity\Transaction u
                                        WHERE u.status = :status AND u.buyerId = :buyerId AND u.timeInit BETWEEN :startDate AND :endDate
                                        ")
                ->setParameter("status", "COMPLETED")
                ->setParameter("buyerId", $data['buyer_id'])
                ->setParameter("startDate", $startDate)
                ->setParameter("endDate", $endDate)
                ->getResult();
        
        $transactionAmount = $transactionData[0]['transaction_amount'];
        $transactionAmount = $transactionAmount / 100;
        
        /* Check for tachimeter state */
        if($transactionAmount == 0 && $remainingDays > 10) {
            $color = 'gray';
        } elseif($transactionAmount == 0 && $remainingDays <= 10) {
            $color = 'red';
        } elseif($transactionAmount >= '0.01' && $transactionAmount <= '299.99') {
            $color = 'green';
        } elseif($transactionAmount >= '300') {
            $color = 'yellow';
        }
        
        /* Return tachimeter response */
        $returnData = array(
            'code' => 101,
            'message' => 'SUCCESS',
            'dataInfo' => array(),
            'response' => array(
                'currency_symbol' => $currencySymbol,
                'color' => $color,
                'days_left' => '-'.$remainingDays,
                'transaction_amount' => ($transactionAmount > 0) ? number_format($transactionAmount, 2, '.', '') : '0.00'
            )
        );
        return $returnData;
    }
    
    public function getPrevNextTimeRedistribution($data) {
        if($data['type'] == 'prev') {
            $sql = "SELECT u.timeRedistribution AS previousRedistribution
                        FROM Transaction\CitizenIncomeBundle\Entity\CiFromRedistribution u
                        WHERE u.timeRedistribution < :timeRedistribution
                        ";
        } elseif($data['type'] == 'next') {
            $sql = "SELECT u.timeRedistribution AS nextRedistribution
                        FROM Transaction\CitizenIncomeBundle\Entity\CiFromRedistribution u
                        WHERE u.timeRedistribution > :timeRedistribution
                        ";
        }
        $redistributionData = $this->getEntityManager()
                ->createQuery($sql)
                ->setParameter("timeRedistribution", $data['time'])
                ->getResult();
        
        if(!empty($redistributionData)) {
            return $redistributionData[0];
        }
    }
    
    /**
     * Norib distribution for the followers and freinds of citizen
     * @param Obj $data
     */
    public function noribdistribution($data) {
        $em = $this->getEntityManager();
        
        /* Get user connection of citizen */
        $userConnections = $this->getUserConnection($data['citizen_id']);
        
        /* Add record on CiFromProfPersFollower */
        $inserArr = array('buyer_id' => $data['citizen_id'], 'single_share' => $data['single_share'], 'total_users' => $userConnections['total_users']);
        $profPersId = $this->addRecordOnCiFroProfPersFollower($inserArr);
        
        /* Add record on CiFromProfPersFriendsFollowerHasWalletCitizen and update users Ci on WalletCitizen */
        $updateArr = array('ProfPersId' => $profPersId, 'single_share' => $data['single_share']);
        $this->updateCiPersProfWallet($updateArr, $userConnections);
        
        /* Return response */
        $response = array(
            'code' => 101,
            'message' => 'SUCCESS',
            'response' => array(
                'total_users' => $userConnections['total_users'],
                'single_share' => $data['single_share']
            )
        );
        return $response;
    }
    
    /**
     * Get user connections for personal, professional and follower
     * @param $userId
     */
    public function getUserConnection($userId) {
        $em = $this->getEntityManager();
        
        $userConnection = $this->getEntityManager()
                ->createQuery("SELECT u.connectTo
                                        FROM UserManager\Sonata\UserBundle\Entity\UserConnection u
                                        WHERE u.connectFrom = :connectFrom AND (u.professionalStatus = :professionalStatus OR u.personalStatus = :personalStatus)
                                        ")
                ->setParameter("connectFrom", $userId)
                ->setParameter("professionalStatus", 1)
                ->setParameter("personalStatus", 1)
                ->getResult();
                
         $userFollowers = $this->getEntityManager()
                ->createQuery("SELECT u.toId
                                        FROM UserManager\Sonata\UserBundle\Entity\UserFollowers u
                                        WHERE u.senderId = :senderId
                                        ")
                ->setParameter("senderId", $userId)
                ->getResult();
         
         foreach($userConnection as $cval) {
             $connections[] = $cval['connectTo'];
         }
         
         foreach($userFollowers as $fval ) {
             $followers[] = $fval['toId'];
         }
         
         $allUsers = array_merge($connections, $followers);
         $users = array_unique($allUsers);
         
         $userConnections = $this->getUserConnectionStatus($userId, $users);
         return $userConnections;
    }
    
    /**
     * Get array of user connections
     * @param $userId, $users
     */
    public function getUserConnectionStatus($userId, $users) {
        $em = $this->getEntityManager();
        
        $citizenWalletData = $this->getWalletData($userId);
        
        /* Create array of user connections */
        $checkConnection = array();
        $checkFollowing = array();
        $checkConnection[0]['professionalStatus'] = 0;
        $checkConnection[0]['personalStatus'] = 0;
        $checkFollowing[0]['followingStatus'] = 0;
        
        foreach($users as $val) {
            $citizenToWalletData = $this->getWalletData($val);
            
             $checkConnection = $this->getEntityManager()
                ->createQuery("SELECT u.professionalStatus, u.personalStatus
                                        FROM UserManager\Sonata\UserBundle\Entity\UserConnection u
                                        WHERE u.connectFrom = :connectFrom AND u.connectTo = :connectTo
                                        ")
                ->setParameter("connectFrom", $userId)
                ->setParameter("connectTo", $val)
                ->getResult();
             
             $checkFollowing = $this->getEntityManager()
                ->createQuery("SELECT COUNT(u.id) AS followingStatus
                                        FROM UserManager\Sonata\UserBundle\Entity\UserFollowers u
                                        WHERE u.senderId = :senderId AND u.toId = :toId
                                        ")
                ->setParameter("senderId", $userId)
                ->setParameter("toId", $val)
                ->getResult(); 
             
             $userConnections[] = array(
                 'citizenFrom' => $userId,
                 'citizenFromWalletId' => (!empty($citizenWalletData)) ? $citizenWalletData[0]->getId() : '',
                 'citizenTo' => $val,
                 'citizenToWalletId' => (!empty($citizenToWalletData)) ? $citizenToWalletData[0]->getId() : '',
                 'professionalStatus' => (!empty($checkConnection)) ? $checkConnection[0]['professionalStatus'] : 0,
                 'personalStatus' => (!empty($checkConnection)) ? $checkConnection[0]['personalStatus'] : 0,
                 'followingStatus' => (!empty($checkFollowing)) ? $checkFollowing[0]['followingStatus'] : 0
             );
         }
         
         $connectionArr = array(
             'total_users' =>  count($users),
             'user_connections' => $userConnections
         );
         return $connectionArr;
    }
    
    /**
     * Add record on CiFromProfPersFollower
     * @param $data Obj
     */
    public function addRecordOnCiFroProfPersFollower($data) {
        $em = $this->getEntityManager();
        $totalBaseAmount = $data['single_share'] * $data['total_users'];
        
        $entity = new CiFromProfPersFriendsFollower();

        $entity->setTimeInitTransaction(time());
        $entity->setTimeEndTransaction(time());
        $entity->setTimeInitTransactionH(new \DateTime("now"));
        $entity->setTimeEndTransactionH(new \DateTime("now"));
        $entity->setTimeRedistribution(time());
        $entity->setTimeRedistributionH(new \DateTime("now"));
        $entity->setTotalUser($data['total_users']);
        $entity->setTotalAmountBaseCurrency($totalBaseAmount);
        $entity->setAmountNotRedistributedBaseCurrency(0);
        $entity->setSingleShareUsd($data['single_share']);
        $entity->setSingleShareEur($data['single_share']);
        $entity->setSingleShareInr($data['single_share']);
        $entity->setBuyerId($data['buyer_id']);
        $entity->setSingleShareChf($data['single_share']);
        $entity->setSingleShareSek($data['single_share']);
        $entity->setSingleShareDkk($data['single_share']);
        $entity->setSingleShareGbp($data['single_share']);
        $entity->setSingleShareYen($data['single_share']);
        $entity->setSingleShareBaseCurrency($data['single_share']);

        $em->persist($entity);
        $em->flush();
        return $entity->getId();
    }
    
    /**
     * Add record on CIFromProfPersFriendFollowerHasWallet and update WalletCitizen
     * @param $data, $users
     */
    public function updateCiPersProfWallet($data, $users) {
        $em = $this->getEntityManager();
        foreach($users['user_connections'] as $val) {
            /* Count connections */
            $connections = $this->countConnections($val);
            
            /* Add record */
            $addArr = array(
                    'CiFromProfPersFriendsFollowerId' => $data['ProfPersId'], 
                    'wallet_citizen_id' => $val['citizenToWalletId'], 
                    'amount_received_wallet_currency' => $data['single_share'],
                    'count_connection_prof_pers_followers' => $connections
                );
            $this->addRecordOnHasWallet($addArr);
            
            /* Update WalletCitizen */
            $updateArr = array(
                'buyer_id' => $val['citizenTo'],
                'wallet_citizen_id' => $val['citizenToWalletId'],
                'single_share' => $data['single_share']
            );
            $em->getRepository('WalletBundle:WalletCitizen')
                  ->updatecitizenwalletonnorib($updateArr);
        }
    }
    
    /**
     * Get connection count of citizen
     */
    public function countConnections($data) {
        $count = $data['professionalStatus'] + $data['personalStatus'] + $data['followingStatus'];
        return $count;
    }
    
    /**
     * Add record on CiFromProfPersFriendsFollowerHasWalletCitizen
     * @param $data
     */
    public function addRecordOnHasWallet($data) {
        $em = $this->getEntityManager();
        
        $entity = new CiFromProfPersFriendsFollowerHasWalletCitizen();
        
        $entity->setCiFromProfPersFriendsFollowerId($data['CiFromProfPersFriendsFollowerId']);
        $entity->setWalletCitizenId($data['wallet_citizen_id']);
        $entity->setAmountReceivedWalletCurrency($data['amount_received_wallet_currency']);
        $entity->setCountConnectionProfPersFollowers($data['count_connection_prof_pers_followers']);
        
        $em->persist($entity);
        $em->flush();
        return $entity->getId();
    }
    
    /**
     * Update citizen wallet during norib redistribution
     */
    public function updatecitizenwalletonnorib($data) {
        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.citizenIncomeAvailable', 'u.citizenIncomeAvailable + ?1')
                ->set('u.citizenIncomeGained', 'u.citizenIncomeGained + ?1')
                ->set('u.timeLastUpdateH', '?2')
                ->set('u.timeLastUpdate', '?3')
                ->where('u.buyerId = ?4 AND u.id = ?5')
                ->setParameter(1, abs($data['single_share']))
                ->setParameter(2, new \DateTime("now"))
                ->setParameter(3, time())
                ->setParameter(4, $data['buyer_id'])
                ->setParameter(5, $data['wallet_citizen_id'])
                ->getQuery();
        $reponse = $query->getResult();
        if ($reponse) {
            return true;
        } else {
            return false;
        }
    }
}
