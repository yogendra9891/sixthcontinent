<?php

namespace Transaction\WalletBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Transaction\TransactionSystemBundle\Interfaces\ICredit;
use Transaction\CommercialPromotionBundle\Interfaces\IPromotion;
use Transaction\CommercialPromotionBundle\Entity\CommercialPromotion;
use Transaction\WalletBundle\Entity\WalletCitizen;
use Transaction\WalletBundle\Entity\ShoppingCard;
use Transaction\TransactionSystemBundle\Services\TransactionManager;

/**
 * ShoppingCardRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShoppingCardRepository extends EntityRepository implements ICredit, IPromotion {

    public function getShoppingCards($data) {

        $sql = "select cp.id as cpid,cp.time_start_h as starttime,cp.time_end_h as endtime, 
              sc.id as scid,sc.shopping_card_id,sc.init_amount as credit,sc.available_amount as balance,sc.currency,sc.max_usage_init_price,sc.seller_id as shopid,sc.wallet_citizen_id as citizenid,
                 str.id as storeid,str.email,str.description,str.phone,str.business_name,str.business_country,str.business_region,str.business_city,str.business_address,str.zip,str.province,str.map_place,str.latitude,str.longitude,str.store_image,str.name,str.avg_rate,str.vote_count,str.is_active,str.is_allowed
              from ShoppingCard as sc 
              inner join Store as str on sc.seller_id = str.id 
              left join CommercialPromotion as cp on sc.commercial_promotion_id = cp.id 
              where sc.wallet_citizen_id ='" . $data['wallet_citizen_id'] . "' AND sc.available_amount > 0";
       
        if ($data['search_name'] != "") {
            $sql .=" AND str.business_name LIKE '%" . $data['search_name'] . "%' ";
        }

        $sql .= " ORDER BY  sc.id DESC
        LIMIT " . $data['offset'] . "," . $data['limit'] . " ";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        return $result = $stmt->fetchAll();
    }

    public function countShoppingCardUpto100($data){

       $sql = "select count(str.id) as recordcount
              from ShoppingCard as sc 
              inner join Store as str on sc.seller_id = str.id 
              left join CommercialPromotion as cp on sc.commercial_promotion_id = cp.id 
              where sc.wallet_citizen_id ='" . $data['wallet_citizen_id'] . "' AND sc.available_amount > 0";
        if ($data['search_name'] != "") {
           $sql .=" AND str.business_name LIKE '%" . $data['search_name'] . "%' ";
        }
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        return $result = $stmt->fetchAll();

    } 

    public function getCitizenShoppingCards($id) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c')
                ->where('c.walletCitizenId=:walletCitizenId')
                ->setParameter('walletCitizenId', $id);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
    }

    public function getCitizenShoppingCardsForTransaction($data) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c')
                ->where('c.walletCitizenId=:walletCitizenId AND c.sellerId=:sellerId')
                ->setParameter('walletCitizenId', $data['wallet_citizen_id'])
                ->setParameter('sellerId', $data['seller_id'])
                ->orderBy('c.id', 'ASC');
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
    }

    public function getTotalShoppingCardBalanceForTransaction($data) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('SUM(c.availableAmount) AS totalBalance')
                ->where('c.walletCitizenId=:walletCitizenId AND c.sellerId=:sellerId')
                ->setParameter('walletCitizenId', $data['wallet_citizen_id'])
                ->setParameter('sellerId', $data['seller_id']);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
    }

    public function updateShoppingCards($data) {
        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.availableAmount', '?1')
                ->set('u.timeUpdatedH', '?2')
                ->set('u.timeUpdated', '?3')
                ->where('u.id=?4')
                ->setParameter(1, $data['available_amount'])
                ->setParameter(2, $data['time_updated_h'])
                ->setParameter(3, $data['time_updated'])
                ->setParameter(4, $data['id'])
                ->getQuery();
        $reponse = $query->getResult();

        if ($reponse) {
            return true;
        } else {
            return false;
        }
    }

    public function getCitizenSellerShoppingCard($data) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('SUM(c.availableAmount) AS totalBalance')
                ->where('c.walletCitizenId=:walletCitizenId AND c.sellerId=:sellerId AND c.availableAmount> 0')
                ->setParameter('walletCitizenId', $data['wallet_citizen_id'])
                ->setParameter('sellerId', $data['seller_id']);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
    }

    public function getUsageCredits($data, $returnData = null) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.id, c.availableAmount, c.maxUsageInitPrice')
                ->where('c.sellerId=:sellerId AND c.walletCitizenId=:walletCitizenId AND c.availableAmount > 0')
                ->setParameter('sellerId', $data['seller_id'])
                ->setParameter('walletCitizenId', $data['wallet_citizen_id'])
                ->orderBy('c.id', 'ASC');
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
    }

    public function updateCredits($data) {
        $query = $this->createQueryBuilder('u')
                ->update()
                ->set('u.availableAmount', 'u.availableAmount - ?1')
                ->set('u.timeUpdatedH', '?2')
                ->set('u.timeUpdated', '?3')
                ->where('u.id=?4')
                ->setParameter(1, $data['amount_used'])
                ->setParameter(2, date('Y-m-d H:i:s'))
                ->setParameter(3, strtotime(date('Y-m-d H:i:s')))
                ->setParameter(4, $data['id'])
                ->getQuery();
        $response = $query->getResult();
        return $response;
    }

    /**
     * Get All shopping card and coupon with Filter
     * @param request object
     * @param json
     */
    public function getallshoppingcardslist($de_serialize) {

      $user_id = (isset($de_serialize['user_id']) ? $de_serialize['user_id'] : '');
      $type = (isset($de_serialize['type']) ? $de_serialize['type'] : '');
      $category = (isset($de_serialize['category']) ? implode(',', $de_serialize['category']) : '');
        $keywords = (isset($de_serialize['keyword']) ? $de_serialize['keyword'] : '');
        $lat_long = (isset($de_serialize['lat_long']) ? $de_serialize['lat_long'] : '');
        $latitude = (isset($lat_long[0]) ? $lat_long[0] : '9.1881714');
        $longitude = (isset($lat_long[0]) ? $lat_long[1] : '45.463681');
        $offset = (isset($de_serialize['limit_start']) ? $de_serialize['limit_start'] : '');
        $limit = (isset($de_serialize['limit_size']) ? $de_serialize['limit_size'] : '');
        $filter = (isset($de_serialize['filter']) ? $de_serialize['filter'] : '');
        $shop_id = (isset($de_serialize['seller_id']) ? $de_serialize['seller_id'] : '');

        if ($type == "coupon") {
            $type = "='coupon'";
        } 
        elseif ($type == "voucher") {
            $type = "='voucher'";
        } 
        elseif ($type == "genericvoucher") {
             
            $type = "='genericvoucher'";
        }  
        else {
            $type = " !='coupon' and cpt.promotionType !='premiumcredit' ";
        }

        $orderby = " ORDER BY distance ASC";

        if ($filter == "recent") {
            $orderby = " ORDER BY s.id DESC";
        }

        if ($filter == "rating") {
            $orderby = " ORDER BY s.avg_rate ASC";
        }

        if ($filter == "price") {
            $orderby = " ORDER BY s.id DESC";
        }

        if ($filter == "maxsaving") {

            $orderby = " ORDER BY s.id ASC";
        }

        if ($filter == "ending") {

            $orderby = " ORDER BY s.id ASC";
        }

        $distance = "(6371 * acos(cos( radians( $latitude ) ) * cos( radians( s.latitude ) ) * cos( radians( s.longitude ) - radians( $longitude )) + sin(radians( $latitude)) * sin(radians(s.latitude))))";
        
        $sql = "select  
            cp.id as _id,
            s.id as shopid,
            s.avg_rate as shopRating,
            s.description as descriptions,
            cp.discount_amount as discount,
            cp.maxUsageInitPrice as max_usage_init_price,
            cp.time_end_h as end_date,
            cp.time_start_h as start_date,
            cp.price as price,
            cp.available_quantity as to_avail,
            cp.extra_info as extrainfo,
            cpt.promotionType as promotiontype,
            cpt.default_img as defaultimg,
            cpt.promotionType as promotion_type,
            cpt.description as cpt_description,
            cpt.id as cp_type_id,
            cpt.description as promotiondesc,
            s.shop_keyword as keywords,
            s.name as name,
            s.business_address as address_l1,
            s.map_place as address_l2,
            s.is_active as is_shop_deleted,
            s.latitude as latitude,
            s.longitude as longitude,
            s.store_image as storeimage,
            s.avg_rate as average_anonymous_rating,
            s.vote_count as total_votes,
            s.business_country as country,
            s.sale_catid as catogory_id,
            uts.user_id as shopownerid,
            $distance as distance
            from CommercialPromotion as cp  
            INNER JOIN Store as s on cp.seller_id = s.id
            INNER JOIN UserToStore as uts on cp.seller_id = uts.store_id
            INNER JOIN CommercialPromotionType as cpt on cpt.id = cp.commercial_promotion_type_id";
      
           $time = time();
           $sql .=" where cp.available_quantity > 0 AND cp.status = 1 and cpt.promotionType $type  and $time >= cp.time_start  and cp.time_end > $time ";
        
        if ( !empty($shop_id) && empty($keywords) ) {

            $sql .=" AND cp.seller_id = '$shop_id' ";
       
           }

          else if( !empty($shop_id) && !empty($keywords) ){

               $sql .=" AND cp.seller_id = '$shop_id' ";
               $sql .=" AND s.name LIKE '%" . $keywords . "%' OR cpt.description LIKE '%" . $keywords . "%' ";
            } 

           else{
             
              if(trim($keywords) != null) {
                 $sql .=" AND s.name LIKE '%" . $keywords . "%' OR cpt.description LIKE '%" . $keywords . "%' ";
                }

                if ($category != NULL) {
                    $sql .=" AND s.sale_catid in ($category)";
                }
                if($lat_long!=null && $lat_long!=""){
               
                 //  $sql .=" HAVING distance < 100 ";
                }
            }

       
        $sql .= $orderby;

          
        if ( trim($offset) != NULL && trim($limit) != NULL) {

            $sql .= " limit $offset,$limit";
        }
        
    

        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        return $result = $stmt->fetchAll();
    }

    /**
     * Get All Record Count
     * @param request object
     * @param json
     */
    public function getallshoppingcardsCount($de_serialize) {

        $user_id = (isset($de_serialize['user_id']) ? $de_serialize['user_id'] : '');
        $type = (isset($de_serialize['type']) ? $de_serialize['type'] : '');

        $category = (isset($de_serialize['category']) ? implode(',', $de_serialize['category']) : '');
        $keywords = (isset($de_serialize['keyword']) ? $de_serialize['keyword'] : '');
        $latitude = (isset($de_serialize['latitute']) ? $de_serialize['latitute'] : '');
        $longitude = (isset($de_serialize['longitude']) ? $de_serialize['longitude'] : '');
        $offset = (isset($de_serialize['limit_start']) ? $de_serialize['limit_start'] : '');
        $limit = (isset($de_serialize['limit_size']) ? $de_serialize['limit_size'] : '');
        $shop_id = (isset($de_serialize['seller_id']) ? $de_serialize['seller_id'] : '');
        $filter = (isset($de_serialize['filter']) ? $de_serialize['filter'] : '');

        if ($type == "coupon") {

            $type = "='coupon'";
        }
        elseif ($type == "voucher") {
            $type = "='voucher'";
        } 
        elseif ($type == "genericvoucher") {
             
            $type = "='genericvoucher'";
        }  
         else {
            $type = " !='coupon' and cpt.promotionType !='premiumcredit' ";
        }

        $orderby = " ORDER BY s.id ASC";

        if ($filter == "recent") {
            $orderby = " ORDER BY s.id DESC";
        }

        if ($filter == "rating") {
            $orderby = " ORDER BY s.avg_rate ASC";
        }

        if ($filter == "price") {
            $orderby = " ORDER BY s.id DESC";
        }


        if ($filter == "maxsaving") {

            $orderby = " ORDER BY s.id ASC";
        }

        if ($filter == "ending") {
            $orderby = " ORDER BY s.id ASC";
        }
        $time = time();
        $sql = "select count(cp.id) as totalcount
            from CommercialPromotion as cp  
            INNER JOIN Store as s on cp.seller_id = s.id
            INNER JOIN UserToStore as uts on cp.seller_id = uts.store_id
            INNER JOIN CommercialPromotionType as cpt on cpt.id = cp.commercial_promotion_type_id";
        $sql .=" where cp.available_quantity > 0 AND cp.status = 1 and cpt.promotionType $type  and
           $time >= cp.time_start  and cp.time_end > $time  ";

        // if (!empty($shop_id)) {
        //     $sql .=" AND cp.seller_id = '$shop_id' ";
        // }
        // if ($category != NULL) {
        //     $sql .=" AND s.sale_catid in ($category)";
        // }
           
           if ( !empty($shop_id) && empty($keywords) ) {

            $sql .=" AND cp.seller_id = '$shop_id' ";
       
           }

          else if( !empty($shop_id) && !empty($keywords) ){

               $sql .=" AND cp.seller_id = '$shop_id' ";
               $sql .=" AND s.name LIKE '%" . $keywords . "%' OR cpt.description LIKE '%" . $keywords . "%' ";
            } 

           else{
             
              if(trim($keywords) != null) {
                 $sql .=" AND s.name LIKE '%" . $keywords . "%' OR   cpt.description LIKE '%" . $keywords . "%' ";
                }

                if ($category != NULL) {
                    $sql .=" AND s.sale_catid in ($category)";
                }
           }

        $sql .= $orderby;

        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        return $result = $stmt->fetchAll();
    }

    /**
     * Calculate only 'Price For You' in Shopping and ShoppingCard List
     * @param request object
     * @param json
     */
    public function getPriceForYou($wallet_obj, $shoppin_obj) {

        $price_for_you['six_contribution'] = 10.00;
        $price_for_you['price_for_you'] = 12.00;

        return $price_for_you;
    }

    /**
     * Create the commercial promotion of type shopping card
     * 
     * @param array $param
     * @return bolleant
     */
    public function createPromotion($param) {
        $validParam = $this->validParamPromtion($param);
        if ($validParam["status"]) {
            $em = $this->getEntityManager();

            $date = new \DateTime("now");
            $model = new CommercialPromotion;
            $model->setInitQuantity($param["init_quantity"]);
            $model->setAvailableQuantity($param["init_quantity"]);


            //Time start
            $time_obj_start = new \DateTime($param["time_start"]);
//        $time_obj_start = new \DateTime("now");
            $model->setTimeStartH($time_obj_start);
            $model->setTimeStart($time_obj_start->getTimestamp());

            //Time End
            $time_obj_end = new \DateTime($param["time_end"]);
            //$time_obj_end = new \DateTime("now");
            $model->setTimeEndH($time_obj_end);
            $model->setTimeEnd($time_obj_end->getTimestamp());


            $model->setDiscountAmount($param["discount_amount"]);
            $model->setMaxUsageInitPrice(100);
            $model->setCommercialPromotionTypeId($param["promotion_type"]);
            $model->setSellerId($param["seller_id"]);
            $model->setSexFemale($param["sex_female"]);
            $model->setExtraInfo(FALSE);
            $model->setPrice($param["price"] * 100);
            $model->setStatus(1);


            $time_obj = new \DateTime("Now");
            $model->setTimeCreateH($time_obj);
            $model->setTimeCreate($time_obj->getTimestamp());

            if (( isset($param["tag_friends"]) && count($param["tag_friends"]) > 0 ) ||
                    ( isset($param["imageurl"]) && strlen($param["imageurl"]) > 0 ) || isset($param["description"]) && strlen($param["description"]) > 0) {
                $model->setExtraInfo(TRUE);
            }
            $em->persist($model);
            $em->flush();
            $em->clear();
            return $model;
        } else {
            return $validParam;
        }
    }

    /**
     * Check if the comerrcial promotion alues are all well defined
     * @param type $check_param
     */
    public function validParamPromtion($check_param) {
        return $message = array("status" => true, "code" => "You are late");
    }

    /**
     * Store inside the collection extra info 
     * @param type $model (ShoppingCard)
     */
    public function storExtraInfo($model) {
        
    }

    /**
     * Add One ShoppingCard for Shop 
     * in the wallet of the citizen
     * 
     * @param array $param
     */
    public function addToCitizenWallet($param) {
        $wallets = $this->getEntityManager()
                ->getRepository("WalletBundle:WalletCitizen")
                ->getWalletData($param["buyer_id"]);

        if (!isset($wallets[0]) && !count($wallets) > 0) {
            return false;
        }
        $wallet = $wallets[0];
        $param["wallet_citizen_id"] = $wallet->getId();

        //Check if the commercial promotion is still availabble
        $offers = $this->getEntityManager()
                ->getRepository("CommercialPromotionBundle:CommercialPromotion")
                ->getComercialPromotion($param["offer_id"], null, 0, 1, null, "model");

        if (!isset($offers[0]) || $offers[0]["type"] != "shoppingcard") {
            return array("code" => 69271, "message" => "NO_OFFER_AVAILABLE");
        }
        $offer = $offers[0][0];

        if (isset($param["sixc_transaction_id"]) && strlen($param["sixc_transaction_id"]) > 0) {
            $result = $this->createCommercialPromotionObject($offer, $wallet, "EUR", $param["sixc_transaction_id"]);
        } else {
            return array("code" => 69272, "message" => "NO_SIXC_TRANSACTION_ID");
        }
        return $result;
    }

    /**
     * 
     * @param CommercialPromotion $offer
     * @param WalletCitizen $wallet
     */
    private function createCommercialPromotionObject(CommercialPromotion $offer, WalletCitizen $wallet, $currency = "EUR", $sixc_transaction_id) {

        $em = $this->getEntityManager();

        //Decreasy the amount available
        $return_commercial_promotion = $em->getRepository("CommercialPromotionBundle:CommercialPromotion")
                ->decreaseCommercialPromotion($offer->getId(), 1);
        $return_wallet = $em->getRepository("WalletBundle:WalletCitizen")
                ->increaseCitizenWalletShoppingCardAmount($wallet, $offer->getPrice());

        $transacton_m = new TransactionManager();

        //ShoppingCard creation belonging to the citizen wallet
        $entity = new ShoppingCard;

        $entity->setShoppingCardId($transacton_m->getTransactionIdToken(10));
        $entity->setInitAmount($offer->getPrice());
        $entity->setAvailableAmount($offer->getPrice());
        $entity->setTimeCreatedH(new \DateTime("now"));
        $entity->setTimeUpdatedH(new \DateTime("now"));
        $entity->setTimeCreated(time());
        $entity->setTimeUpdated(time());
        $entity->setCurrency($currency);
        $entity->setSellerId($offer->getSellerId());
        $entity->setWalletCitizenId($wallet->getId());
        $entity->setCommercialPromotionId($offer->getId());
        $entity->setMaxUsageInitPrice($offer->getMaxUsageInitPrice());
        $entity->setSixcTransactionId($sixc_transaction_id);

        $em->persist($entity);
        $em->flush();
        if ($entity->getId() > 0)
            return array("code" => 101, "message" => "SUCCESS");
        else
            return array("code" => 7922, "message" => "IMPOSSIBLE_TO_CREATE_RECORD_COUPON");
    }

    public function getPurchasedShoppingCard($id) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c')
                ->where('c.sixcTransactionId=:sixcTransactionId')
                ->setParameter('sixcTransactionId', $id);
        $query = $qb->getQuery();
        $response = $query->getResult();
        if (!empty($response)) {
            return $response[0];
        }
    }

}
