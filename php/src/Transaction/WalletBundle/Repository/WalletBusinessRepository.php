<?php

namespace Transaction\WalletBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Transaction\WalletBundle\Services\WalletManager;
use Transaction\WalletBundle\Interfaces\IWallet;
use Transaction\WalletBundle\Entity\WalletBusiness;

/**
 * WalletBusinessRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WalletBusinessRepository extends EntityRepository {

    private $_CPMaxUsageInitPrice = 50;

    public function getBusinessWalletData($sellerId) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c')
                ->where('c.sellerId=:sellerId')
                ->setParameter('sellerId', $sellerId);
        $query = $qb->getQuery();
        $response = $query->getResult();
        return $response;
    }

    /* Get business wallet sale information */

    public function getBusinessWalletSale($data) {
        $cpResponse[0]['creditPositionAmount'] = 0;
        $bwResponse[0]['premiumPosition'] = 0;

        $WalletManager = new WalletManager();

        $cpResponse = $this->getEntityManager()
                ->createQuery("SELECT SUM(u.amount) AS creditPositionAmount 
                        FROM Transaction\WalletBundle\Entity\CreditPosition u
                         where u.sellerId = :sellerId
                         ")
                ->setParameter(":sellerId", $data['seller_id'])
                ->getResult();

        $bwResponse = $this->getEntityManager()
                ->createQuery("SELECT u.premiumPosition 
                        FROM Transaction\WalletBundle\Entity\WalletBusiness u
                         where u.sellerId = :sellerId
                         ")
                ->setParameter(":sellerId", $data['seller_id'])
                ->getResult();

        // $shopturnoverData = $this->getEntityManager()
        //         ->getRepository('TransactionSystemBundle:Transaction')
        //         ->getTotalTurnOverShop($data['seller_id']);

        $shopturnoverData = $this->getTopShopRevenue('1','',$data['seller_id']);
        $totalPosition = $cpResponse[0]['creditPositionAmount'] + $bwResponse[0]['premiumPosition'];

        $returnResponse = array(
            'user_id' => $data['user_id'],
            'seller_id' => $data['seller_id'],
            'currency' => $WalletManager->getBuyerCurrency($data['user_id']),
            'currency_symbol' => $WalletManager->getCurrencyCode($WalletManager->getBuyerCurrency($data['user_id'])),
            'total_income' => number_format($shopturnoverData[0]['totalRevenue']/100,2,'.',''),
            'credit' => number_format($totalPosition / 100, 2, '.', ''),
            'balance' => ($bwResponse[0]['premiumPosition'] > 0) ? number_format($bwResponse[0]['premiumPosition'] / 100, 2, '.', '') : number_format($bwResponse[0]['premiumPosition'], 2, '.', '')
        );
        return $returnResponse;
    }
    
    /*
     * Get business wallet history for IN AND OUT
     * @param Obj $data
     * return transaction records of citizen
     */
    public function getbusinesswallethistory($data) {
        $response = $this->getEntityManager()
                ->createQuery("SELECT u 
                            FROM Transaction\TransactionSystemBundle\Entity\Transaction u
                            WHERE u.sellerId = :sellerId AND u.status = 'COMPLETED'
                            ORDER By u.timeInitH DESC
                            ")
                ->setMaxResults($data['limit'])
                ->setFirstResult($data['offset'])
                ->setParameter(":sellerId", $data['seller_id'])
                ->getResult();
        
         return $response;
    }
    
    /*
     * Get count of citibusinesszen wallet history for IN AND OUT
     * @param Obj $data
     * return count of transaction records of citizen
     */
    public function getcountofwallethistory($data) {
        $response = $this->getEntityManager()
                ->createQuery("SELECT COUNT(u.id) AS historyCount
                            FROM Transaction\TransactionSystemBundle\Entity\Transaction u
                            WHERE u.sellerId = :sellerId AND u.status = 'COMPLETED'
                            ")
                ->setParameter(":sellerId", $data['seller_id'])
                ->getResult();
        
        if(!empty($response)) {
            if(($data['limit'] + $data['offset']) >= $response[0]['historyCount']) {
                $response[0]['hasNext'] = false;
            } else {
                $response[0]['hasNext'] = true;
            }
            return $response[0];
        }
    }
    
    /**
     * It creates the wallet of the Business profile
     * @param int $seller_id
     * @param string currency $currency
     */
    public function createWallet($seller_id, $currency="EUR") {
        $em = $this->getEntityManager();
        $wallet_business = New WalletBusiness;
        $wallet_business->setCurrency($currency);
        $wallet_business->setPendingPaymentAmount(0);
        $wallet_business->setShoppingCardAvailable(0);
        $wallet_business->setCardAvailable(0);
        $wallet_business->setCouponAvailable(0);
        $wallet_business->setCitizenIncomeAvailble(0);
        $wallet_business->setCitizenIncomeGained(0);
        $wallet_business->setTimeLastUpdateH(new \DateTime('now'));
        $wallet_business->setTimeCreateH(new \DateTime('now'));
        $wallet_business->setTimeCreate(time());
        $wallet_business->setTimeLastUpdate(time());
        $wallet_business->setWritingStatus(0);
        $wallet_business->setTotalRevenue(0);
        $wallet_business->setPremiumPosition(0);
        $wallet_business->setSellerId($seller_id->getId());
        $wallet_business->setCreditPosition(0);
        $wallet_business->setPendingPaymentCounter(0);
        $em->persist($wallet_business);
        $em->flush();
        
        return $wallet_business->getId();
        
    }

   public function getTopShopRevenue($limit,$shop_img_path,$sid)
    {
         
         $offect = 0;
         $qb = $this->createQueryBuilder('c');
         $qb->select('c.totalRevenue,st.id,st.name,st.isActive,st.shopStatus')
            ->innerJoin('StoreManagerStoreBundle:Store', 'st', 'WITH', 'c.sellerId = st.id  and st.isActive=:isActive and st.shopStatus=:shopStatus');
         
          if(!empty($sid)){
         
             $qb->where('c.sellerId=:sellerId ')
             ->setParameter('sellerId', $sid);
           }
           
            $qb->setParameter('isActive','1')
            ->setParameter('shopStatus', '1')
            ->orderBy("c.totalRevenue",'DESC')
            ->setMaxResults($limit)
            ->setFirstResult($offect);
       
         $query = $qb->getQuery();
         $response = $query->getResult();
        
         return $response;
   }

  public function getstoreimg($id,$shop_img_path){

     $sql= "select image_name from  StoreMedia where store_id = '$id' order by id desc limit 1";
     $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
      $stmt->execute();
      $store_img = $stmt->fetchAll();

     foreach ($store_img as $img) {
         
         if($img['image_name'] != NULL){
              
             return $shop_img_path.$id.'/thumb/'.$img['image_name'];
         }
         else
         {
            return '';
         }   
         
       }
   }
   
   /*
    * Update Business Wallet Total Revenue
    * @param Obj $data
    */
   public function updateSellerTotalRevenue($data) {
       $reponse = false ;
       $qb = $this->createQueryBuilder('u')
                ->update()
                ->set('u.totalRevenue', 'u.totalRevenue + ?1')
                ->set('u.timeLastUpdateH', '?2')
                ->set('u.timeLastUpdate', '?3')
                ->where('u.sellerId=?4')
                ->setParameter(1, abs($data['revenue']))
                ->setParameter(2, date('Y-m-d H:i:s'))
                ->setParameter(3, strtotime(date('Y-m-d H:i:s')))
                ->setParameter(4, $data['seller_id']);
       
        try {
            $reponse = $qb->getQuery()->getResult();
        } catch (\Exception $e) {
            
        }
        return $reponse;
   }
}
