<?php

namespace Transaction\TransactionBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RecurringPendingPaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecurringPendingPaymentRepository extends EntityRepository
{
    /**
     * 
     * @param type $shop_id
     * @return type
     */
    public function getShopPendingAmount($shop_id)
    {
      $result = array();
      $qb = $this->createQueryBuilder('sm')
              ->select('sum(sm.pendingamount) AS pendingamount')
              ->where('sm.shopId =:sid','sm.paid =:pay')
              ->setParameter('sid', $shop_id)
              ->setParameter('pay', 0)
              ->getQuery();
             
         $result = $qb->getResult();        
         return $result[0]['pendingamount']; 
    }
    /**
     * 
     * @param type $shop_id
     * @return type
     */
    public function getTransactionIdForShop($shop_id)
    {
      $result = array();
      $qb = $this->createQueryBuilder('sm')
              ->select('sm.transactionId')
              ->where('sm.shopId =:sid','sm.paid =:pay')
              ->setParameter('sid', $shop_id)
              ->setParameter('pay', 0)
              ->getQuery();
             
         $result = $qb->getResult();        
         return $result; 
    }
    
    /**
     * 
     * @param type $shop_id
     * @return boolean
     */
    public function updatePaidRecurringPayment($shop_id) {
        //create the query
        $query = $this->createQueryBuilder('c')
            ->update()
            ->set('c.paid', 1)
            ->where('c.shopId =:sid')
            ->setParameter('sid', $shop_id)
            ->getQuery();
            $reponse = $query->getResult();

        if($reponse){
                return true;
        }
        return false;
    }
    
    /**
     * Get Shop have pending payments
     * @return array();
     */
    public function getShopsHavePendingPayments(){
         $result = array();
         $qb = $this->createQueryBuilder('sm')
              ->select('sum(sm.pendingamount) AS pendingamount, sm.shopId as storeId')
              ->innerJoin('StoreManagerStoreBundle:Store', 's', 'WITH', 'sm.shopId = s.id')
              ->where('sm.paid =:pay','s.creditCardStatus =:ccstatus')
              ->groupBy('sm.shopId')
              ->setParameter('pay', 0)
              ->setParameter('ccstatus', 1)
              ->getQuery();
             
         $result = $qb->getResult();        
         return $result;
    }
}
