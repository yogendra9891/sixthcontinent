<?php

namespace Transaction\TransactionBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserGiftCardPurchasedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserGiftCardPurchasedRepository extends EntityRepository {

    /**
     * function for getting the giftcard purchased by user on a shop on daily basic
     * @param None
     * @return type array
     */
    public function getgiftcardexportTransaction($days) {
        $initial_date = new \DateTime(" -$days days");
        $start_date =  strtotime($initial_date->format('Y-m-d'));
        $today = new \DateTime('today');
        $end_date = strtotime($today->format('Y-m-d'));
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $query = $qb->select('c.userId,c.shopId,c.giftCardAmount as gc_amount ,c.date')
                ->where('c.dataJob >=:create_at', 'c.dataJob <:end_at')
                ->setParameter('create_at', $start_date)
                ->setParameter('end_at', $end_date)
                ->getQuery();
        $response = $query->getResult();
        return $response;
    }
    
    /**
     * Get Purchased gift card
     * @param int $user_id
     * @return array()
     */
    public function getGiftCardPurchased($user_id, $limit_start, $limit_size)
    {
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $query = $qb->select('c.userId, c.shopId, c.giftCardAmount, c.date')
                ->where('c.userId=:user_id')
                ->setFirstResult($limit_start)
                ->setMaxResults($limit_size)
                ->setParameter('user_id', $user_id)
                ->getQuery();
        $response = $query->getResult();
       
        return $response;
    }
    
    /**
     * Get Purchased gift card
     * @param int $user_id
     * @return int
     */
    public function getGiftCardPurchasedCount($user_id)
    {
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $query = $qb->select('count(c.id) as scount')
                ->where('c.userId=:user_id')
                ->setParameter('user_id', $user_id)
                ->getQuery();
        $response = $query->getSingleScalarResult();
        return $response;
    }
    
    /**
     * Get Exported gift cards
     * @return array
     */
    public function getExportGiftCards($days)
    {
        $initial_date = new \DateTime(" -$days days");
        $start_date =  strtotime($initial_date->format('Y-m-d')); 
        $today = new \DateTime('today');
        $end_date = strtotime($today->format('Y-m-d'));

        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $query = $qb->select('c.giftCardId, c.userId,c.shopId,c.giftCardAmount as gc_amount ,c.date')
                ->where('c.dataJob >=:create_at', 'c.dataJob <:end_at')
                ->setParameter('create_at', $start_date)
                ->setParameter('end_at', $end_date)
                ->getQuery();
        $response = $query->getResult();
        return $response;
    }
}
