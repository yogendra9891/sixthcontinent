<?php

namespace Transaction\TransactionBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RecurringPaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecurringPaymentRepository extends EntityRepository
{
     /**
     * 
     * @param type $role
     * @return type
     */
    public function findByRole($role) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u.id')
                ->from('UserManagerSonataUserBundle:User', 'u')
                ->where('u.roles LIKE :roles')
                ->setParameter('roles', '%"' . $role . '"%');
        $admin_id =  $qb->getQuery()->getResult();
        if(count($admin_id) > 0){
            return $admin_id[0]['id'];
        } else {
            return "";
        }
     }
    
     /**
      * find the trnsaction that are paid to sixthcontinent
      * @param type $transaction_data
      * @return $object array
      */
    public function getShopDailyPayToSixthContinent()
    {
        //for current day.
        $today          =  new \DateTime('now');
        $start_date     =  $today->format('Y-m-d'); //today date
        $next_date      =  new \DateTime('tomorrow');
        $end_date       =  $next_date->format('Y-m-d'); //next day date,,
        //object of query builder.
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.id, c.shopId as shop_id, c.amount as amount, c.codiceEsito as status, c.created_at, c.codTrans as trasaction_code,  s.businessName as business_name')
           ->innerJoin('StoreManagerStoreBundle:Store', 's', 'WITH', 'c.shopId = s.id')
           ->where('c.created_at >=:start_at', 'c.created_at <=:end_at', 'c.codiceEsito =:transaction_status')
           ->setParameter('start_at', $start_date)
           ->setParameter('end_at', $end_date)
           ->setParameter('transaction_status', 0);
        $query    = $qb->getQuery();
        $response = $query->getResult();
        return $response;        
    }
    
    /**
     * 
     * @param type $ids_arr
     * @return type
     */
    public function getAllRecurringRecords($ids_arr) {
        if(count($ids_arr)>0){
            $qb = $this->createQueryBuilder('c');
            $query = $qb->select()
                 ->where(
                          $qb->expr()->In('c.id', ':ids')
                      )
                  ->setParameter('ids', $ids_arr);

          $result = $query ->getQuery();
          $result_res = $result->getResult();

          return $result_res;
        }
        return array();
    }
}
