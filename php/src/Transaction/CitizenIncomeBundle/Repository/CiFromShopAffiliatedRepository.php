<?php

namespace Transaction\CitizenIncomeBundle\Repository;

use Doctrine\ORM\EntityRepository;
use \Transaction\CitizenIncomeBundle\Interfaces\ICitizenIncome;
use Transaction\WalletBundle\Entity\WalletCitizen;
use Transaction\CitizenIncomeBundle\Entity\CiFromShopAffiliated;

/**
 * CiFromShopAffiliatedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CiFromShopAffiliatedRepository extends EntityRepository implements ICitizenIncome {

    public function getTotalUsers($time_end_transaction = null, $sixc_transaction_id) {

        return $this->getEntityManager()
                        ->createQuery("
                            SELECT 
                            a.fromId as id  
                            From
                            Affiliation\AffiliationManagerBundle\Entity\AffiliationShop a,
                            Transaction\TransactionSystemBundle\Entity\Transaction  t
                            where a.shopId = t.sellerId
                            and t.sixcTransactionId = :sixc_transaction_id
                            order by t.timeClose Desc
                             ")
                        ->setMaxResults(1)
                        ->setParameter(":sixc_transaction_id", $sixc_transaction_id)
                        ->getResult();
    }

    public function getTotalAmountBaseCurrency($init_time, $end_time, $sixc_transaction_id = null) {
        return $this->getEntityManager()
                        ->createQuery("
                            SELECT 
                            t.shopAffCharge as totoal_amount_base_currency
                            From
                            Transaction\TransactionSystemBundle\Entity\Transaction  t
                            where  t.sixcTransactionId = :sixc_transaction_id
                            order by t.timeClose Desc
                             ")
                        ->setMaxResults(1)
                        ->setParameter(":sixc_transaction_id", $sixc_transaction_id)
                        ->getResult();
    }

    public function updateCitizenWallet($single_share, $total_user, $time_init_transaction, $time_end_transaction, $sixc_transaction_id) {
        $amount_to_increase = $single_share["single_share"];
        $ids = "";
        foreach ($total_user["users"] as $key => $value) {
            $ids.=$value["id"] . ",";
        }
        $ids = substr($ids, 0, -1);
        $walletcitizen_repository = $this->getEntityManager()
                ->getRepository('WalletBundle:WalletCitizen');
        $result = $walletcitizen_repository->updateWalletBasedToConvertionRation($ids, $amount_to_increase);
        //anything is ok

        if ($result == TRUE) {
            $hasBeenShared = TRUE;
            $this->updateHistory($hasBeenShared, $single_share, $total_user, $time_init_transaction, $time_end_transaction, $sixc_transaction_id);
        }
    }

    /**
     * 
     * @param array $single_share
     * @param array $total_user
     * @param int $time_init_transaction : init transaction time 
     * @param int $time_end_transaction : end transaction time
     * @param string  $sixc_transaction_id : 
     */
    public function updateHistory($hasBeenShared, $single_share, $total_user, $time_init_transaction, $time_end_transaction, $sixc_transaction_id) {

        $em = $this->getEntityManager();

        //Get Wallet ID
        $id_wallet = $em->getRepository('WalletBundle:WalletCitizen')
                ->getWalletData($total_user["users"][0]["id"]);

        $currency_repo = $em->getRepository('WalletBundle:Currency');

        $model = new CiFromShopAffiliated;
        $model->setWalletCitizenId($id_wallet[0]->getId());
        $model->setSixcTransactionId($sixc_transaction_id);

        //Time objct creatio
        $time_obj = new \DateTime("now");

        //Set up init time woth same obj
        $model->setTimeCreated(time());
        //Set up end time woth same obj
        $model->setTimeCreatedH($time_obj);

        $model->setSingleShareBaseCurrency($single_share["single_share"]);
        $model->setSingleShareUsd(ceil($currency_repo->getValueBaseCurrency("USD", $single_share["single_share"])));
        $model->setSingleShareEur(ceil($currency_repo->getValueBaseCurrency("EUR", $single_share["single_share"])));
        $model->setSingleShareInr(ceil($currency_repo->getValueBaseCurrency("INR", $single_share["single_share"])));
        $model->setSingleShareGbp(ceil($currency_repo->getValueBaseCurrency("GBP", $single_share["single_share"])));
        $model->setSingleShareYen(ceil($currency_repo->getValueBaseCurrency("YEN", $single_share["single_share"])));
        $model->setSingleShareDkk(ceil($currency_repo->getValueBaseCurrency("DKK", $single_share["single_share"])));
        $model->setSingleShareChf(ceil($currency_repo->getValueBaseCurrency("CHF", $single_share["single_share"])));
        $model->setSingleShareSek(ceil($currency_repo->getValueBaseCurrency("SEK", $single_share["single_share"])));
        $em->persist($model);
        $em->flush();
        $em->clear();
    }

    /**
     * Increase the  value of the c.i 
     * @param int $id_transaction
     * @return boolean
     */
    public function increaseParentRedistribution($id_transaction) {
        $query = $this->createQueryBuilder('u')
                ->update("TransactionSystemBundle:Transaction", "t")
                ->set('t.allCountryCharge', 't.allCountryCharge + t.shopAffCharge')
                ->set('t.shopAffCharge', '0')
                ->where('t.id=:id_transaction')
                ->setParameter('id_transaction', $id_transaction)
                ->getQuery();
        $reponse = $query->getResult();

        if ($reponse) {
            return true;
        } else {
            return false;
        }
    }

}
