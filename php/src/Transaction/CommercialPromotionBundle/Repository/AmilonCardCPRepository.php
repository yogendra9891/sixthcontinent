<?php

namespace Transaction\CommercialPromotionBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Transaction\CommercialPromotionBundle\Interfaces\ICPCustomization;
use Transaction\CommercialPromotionBundle\Document\SingleCardCP;
use Transaction\CommercialPromotionBundle\Document\AmilonCardCP;
/**
 * AmilonCardCPRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AmilonCardCPRepository extends DocumentRepository implements ICPCustomization {

    public function saveCustomization($amilonCard, $param) {
        $amilonCardCP = new AmilonCardCP;
        $amilonCardCP->setId($amilonCard->getId());
        $amilonCardCP->setRetailerName($param["retailer_name"]);
        $amilonCardCP->setRetailerCode($param["retailer_code"]);
        $amilonCardCP->setRetailerImage($param["landscape_image"]);
        $amilonCardCP->setShortDescription($param["short_description"]);
        $amilonCardCP->setMerchantShortDescription($param["merchant_short_description"]);
        $amilonCardCP->setMerchantLongDescription($param["merchant_long_description"]);
        $amilonCardCP->setWebSite($param["web_site"]);
        $amilonCardCP->setCitizenAffCharge($param["citizen_aff_charge"]);
        $amilonCardCP->setShopAffCharge($param["shop_aff_charge"]);
        $amilonCardCP->setFriendsFollowerCharge($param["friends_follower_charge"]);
        $amilonCardCP->setBuyerCharge($param["buyer_charge"]);
        $amilonCardCP->setSixcCharge($param["sixc_charge"]);
        $amilonCardCP->setAllCountryCharge($param["all_country_charge"]);
        $amilonCardCP->setValidityMonth($param["validity_month"]);
        $amilonCardCP->setCombinableCard($param["combinable_card"]);
        $amilonCardCP->setContactCard($param["contact_card"]);
        $amilonCardCP->setPointOfSale($param["point_of_sale"]);
        $amilonCardCP->setWebsitePreview($param["website_preview"]);
        
        if (isset($param["single_cards"]) && count($param["single_cards"]) > 0) {
            foreach ($param["single_cards"] as $value) {
                $singleCardCP = new SingleCardCP;
                $singleCardCP->setCardId($value["card_id"]);
                $singleCardCP->setAmount($value["card_amount"]*100);
                $singleCardCP->setProductCode($value["product_code"]);
                $singleCardCP->setLandscapeImage($value["landscape_image"]);
                $singleCardCP->setPortraitImage($value["portrait_image"]);
                $amilonCardCP->addSingleCardCp($singleCardCP);
            }
        }
        $dm = $this->getDocumentManager();
        $dm->persist($amilonCardCP);
        $dm->flush();
        return $amilonCardCP;
    }

    /**
     * Get extra info for amilonCard
     * @param int $id_commercial_promotion
     * @return type
     * @throws type
     */
    public function getCustomizationOffer($data) {
        $cp_repo = $data["em"];
        $commercial_promotion_id  = (int)$data["id"];
        $buyer_id  = (int)$data["buyer_id"];
        $result = array();
        $amilonCardCP = $this->getDocumentManager()
                ->getRepository('CommercialPromotionBundle:AmilonCardCP')
                ->findOneById($commercial_promotion_id);
        if ($amilonCardCP != null ) {
            $result["retailer_name"] = $amilonCardCP->getRetailerName();
            $result["retailer_code"] = $amilonCardCP->getRetailerCode();
            $result["landscape_image"]= $amilonCardCP->getRetailerImage();
            $result["short_description"] = $amilonCardCP->getShortDescription();
            $result["merchant_short_description"] = $amilonCardCP->getMerchantShortDescription();
            $result["merchant_long_description"] = $amilonCardCP->getMerchantLongDescription();
            $result["citizen_aff_charge"] = $amilonCardCP->getCitizenAffCharge();
            $result["shop_aff_charge"] = $amilonCardCP->getShopAffCharge();
            $result["friends_follower_charge"] = $amilonCardCP->getFriendsFollowerCharge();
            $result["buyer_charge"] = $amilonCardCP->getBuyerCharge();
            $result["sixc_charge"] = $amilonCardCP->getSixcCharge();
            $result["all_country_charge"] = $amilonCardCP->getAllCountryCharge();
            $result["web_site"] = $amilonCardCP->getWebSite();
            $result["validity_month"] = $amilonCardCP->getValidityMonth();
            $result["combinable_card"] = $amilonCardCP->getCombinableCard();
            $result["contact_card"] = $amilonCardCP->getContactCard();
            $result["point_of_sale"] = $amilonCardCP->getPointOfSale();
            $result["website_preview"] = $amilonCardCP->getWebsitePreview();
            $amilons_cps = $amilonCardCP->getSingleCardCp() ;
            foreach ($amilons_cps as $single_result_card) {
                $card_id = $single_result_card->getCardId();
                $card_amount = $single_result_card->getAmount()/100;
                $product_code = $single_result_card->getProductCode();
                $landscape_image = $single_result_card->getLandscapeImage();
                $portrait_image = $single_result_card->getPortraitImage();
                $commercial_promotion["price"]  = $single_result_card->getAmount();
                $commercial_promotion["discountAmount"] = 0 ;
                $price_for_me = $cp_repo->getPriceForMe(null,  null, $commercial_promotion_id, $buyer_id, 352 , $commercial_promotion) ;
                $result["single_cards"][] = array(
                    'card_id' => $card_id,
                    'card_amount' => $card_amount,
                    'product_code' => $product_code,
                    'landscape_image' => $landscape_image,
                    'portrait_image' => $portrait_image,
                    'price_for_me' => $price_for_me
                );
            }
        }else{
            $result= array("me"=>"not working");
        }
        return $result;
    }

}
