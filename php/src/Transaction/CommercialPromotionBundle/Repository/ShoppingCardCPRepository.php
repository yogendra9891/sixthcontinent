<?php

namespace Transaction\CommercialPromotionBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Transaction\CommercialPromotionBundle\Interfaces\ICPCustomization;
use Transaction\CommercialPromotionBundle\Document\ShoppingCardCP;
use Transaction\CommercialPromotionBundle\Document\ImagesCP;
use Transaction\CommercialPromotionBundle\Document\TagsCP;

/**
 * ShoppingCardCPRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShoppingCardCPRepository extends DocumentRepository implements ICPCustomization {

    public static $IMG_TYPE = "COMMERCIAL_PROMOTION";

    public function saveCustomization($shopping_card, $param) {

        $shopping_cardCP = new ShoppingCardCP;
        $shopping_cardCP->setId($shopping_card->getId());
        $shopping_cardCP->setDescription($param["description"]);

        if (isset($param["tag_friends"]) && $param["tag_friends"] > 0) {
            foreach ($param["tag_friends"] as $value) {
                $tag = new TagsCP;
                $tag->setUserId($value["id"]);
                $tag->setName($value["name"]);
                $shopping_cardCP->addTagsCp($tag);
            }
        }

        if (isset($param["imageurl"])) {
            $images = explode(",", $param["imageurl"]);
            for ($index = 0; $index < count($images); $index ++) {
                $image_cp = new ImagesCP;
                $image_cp->setImageType(self::$IMG_TYPE);
                $image_cp->setReal($images[$index]);
                $image_cp->setThumb($images[$index]);
                $shopping_cardCP->addImagesCp($image_cp);
            }
        }


        $dm = $this->getDocumentManager();
        $dm->persist($shopping_cardCP);

        $dm->flush();
        return $shopping_cardCP;
    }

    /**
     * 
     * @param type $id_commercial_promotion
     * @return type
     * @throws type
     */
    public function getCustomizationOffer($id_commercial_promotion) {
        $result = array();
        $id_commercial_promotion = (int)$id_commercial_promotion;
        $shopping_card_document = $this->getDocumentManager()
                ->getRepository('CommercialPromotionBundle:ShoppingCardCP')
                ->findOneById($id_commercial_promotion);
        if ( $shopping_card_document != null ) {
            $result["description"] = $shopping_card_document->getDescription();
            $result["id"] = $shopping_card_document->getId();
            $images_result = array();
            foreach ($shopping_card_document->getImagesCp() as $images_result_data) {
                $img_id = $images_result_data->getId();
                $img_type = $images_result_data->getImageType();
                $img_real = $images_result_data->getReal();
                $thumb = $images_result_data->getThumb();
                $result["images"][] = array(
                    'id' => $img_id,
                    'img_type' => $img_type,
                    'img_real' => $img_real,
                    'thumb' => $thumb
                );
            }
        }else{
            $result= array("me"=>"not working");
        }

        return $result;
    }

    // ... do something, like pass the $product object into a template
}
