<?php

namespace Transaction\CommercialPromotionBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Transaction\CommercialPromotionBundle\Document\CouponCP;
use Transaction\CommercialPromotionBundle\Document\ShoppingCardCP;
use Transaction\CommercialPromotionBundle\Document\VoucherCP;
use Transaction\WalletBundle\Entity\ShoppingCard;
use Transaction\WalletBundle\Entity\Coupon;
use Transaction\WalletBundle\Entity\CreditPosition;
use Transaction\WalletBundle\Entity\Voucher;
use Transaction\CommercialPromotionBundle\Entity\CommercialPromotionType;
use Transaction\WalletBundle\Entity\WalletCitizen;
use Transaction\CommercialPromotionBundle\Entity\CommercialPromotion;
use Transaction\TransactionSystemBundle\Services\TransactionManager;
use SixthContinent\SixthContinentConnectBundle\Entity\OfferPointofSale;

/**
 * CommercialPromotionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommercialPromotionRepository extends EntityRepository {

    static $COUPON_TYPE = "792";
    static $SHOPPING_CARD_TYPE = "6927";
    static $CREDIT_POSITION_TYPE = "9433";
    static $VOUCHER_TYPE = "864";
    static $AMILON_TYPE = "352";
    static $SHOPPING_CARD_MAX_USAGE_INIT_PRICE = "50";

    /**
     * 
     * @param array $promotion
     */
    public function createCommercialPromotion($promotion, $dm) {
        $em = $this->getEntityManager();
        $type = $this->getTypePromotion($promotion);
        if (substr($type, 0, strlen(self::$COUPON_TYPE)) == self::$COUPON_TYPE) {
            $repository = $em->getRepository("WalletBundle:Coupon");
            $result = $repository->createPromotion($promotion);
            if ($result->getExtraInfo()) {
                $coupon_cp = $dm->getRepository("CommercialPromotionBundle:CouponCP")
                        ->saveCustomization($result, $promotion);
            }
        }elseif(substr($type, 0, strlen(self::$SHOPPING_CARD_TYPE)) == self::$SHOPPING_CARD_TYPE) {
            $repository = $em->getRepository("WalletBundle:ShoppingCard");
            $result = $repository->createPromotion($promotion);
            if ($result->getExtraInfo()) {
                $shopping_card_cp = $dm->getRepository("CommercialPromotionBundle:ShoppingCardCP")
                        ->saveCustomization($result, $promotion);
            }
        }elseif(substr($type, 0, strlen(self::$VOUCHER_TYPE)) == self::$VOUCHER_TYPE) {
            $repository = $em->getRepository("WalletBundle:Voucher");
            $result = $repository->createPromotion($promotion);
            if ($result->getExtraInfo()) {
                $shopping_card_cp = $dm->getRepository("CommercialPromotionBundle:VoucherCP")
                        ->saveCustomization($result, $promotion);
            }
        }elseif(substr($type, 0, strlen(self::$AMILON_TYPE)) == self::$AMILON_TYPE){
            $repository = $em->getRepository("WalletBundle:AmilonCard");
            $result = $repository->createPromotion($promotion);
            if ($result->getExtraInfo()) {
                $shopping_card_cp = $dm->getRepository("CommercialPromotionBundle:AmilonCardCP")
                        ->saveCustomization($result, $promotion);
            }
        }elseif (substr($type, 0, strlen(self::$CREDIT_POSITION_TYPE)) == self::$CREDIT_POSITION_TYPE) {
            $repository = $em->getRepository("WalletBundle:CreditPosition");
            $result = $repository->createPromotion($promotion);
        } else {
            exit("no repository selected");
        }
        return $result;
    }

    /**
     * 
     * @param int $commertial_promotion_id
     * @param int $seller_id
     * @param int $offset
     * @param int $limit
     * @param string $type
     * @param string $return array|model
     * @return string
     */
    public function getComercialPromotion($commertial_promotion_id = null, $seller_id = null, $offset = 0, $limit = 10, $type = null, $return = "array") {
        $results = array();
        $qb = $this->createQueryBuilder('cp');
        $qb->select('cp', 'cpt.promotionType as type')
                ->orderBy('cp.id', 'DESC')
                ->where('cp.availableQuantity > 0 AND cp.status = 1 and  :time >= cp.timeStart  and cp.timeEnd > :time ')
                ->innerJoin('CommercialPromotionBundle:CommercialPromotionType', 'cpt', 'WITH', 'cpt.id = cp.commercialPromotionTypeId')
                ->setParameter('time', time());
        if ($commertial_promotion_id != null) {
            $qb->andWhere('cp.id = :commertial_promotion_id')
                    ->setParameter('commertial_promotion_id', $commertial_promotion_id);
        }
        if ($seller_id != null) {
            $qb->andWhere('cp.sellerId= :seller_id')
                    ->setParameter('seller_id', $seller_id);
        }
        if ($type != null) {
            $qb->andWhere('cpt.promotionType = :promotionType')
                    ->setParameter('promotionType', $type);
        }
        $qb
                ->setMaxResults($limit)
                ->setFirstResult($offset);
//        try {
        $data = $qb->getQuery()->getResult();
        $results["response"] = array();
        if ($return == "array") {
            if (count($data) > 0) {
                for ($index = 0; $index < count($data); $index ++) {

                    $entity = $data[$index][0];

                    $date_s = $entity->getTimeStartH();
                    $date_e = $entity->getTimeEndH();

                    $results["response"][$index]["promotion_start_date"] = $date_s->format('Y-m-d');
                    $results["response"][$index]["promotion_expire_date"] = $date_e->format('Y-m-d');
                    $results["response"][$index]["max_usage_init_price"] = $entity->getMaxUsageInitPrice();
                    $results["response"][$index]["available_quantity"] = $entity->getAvailableQuantity();
                    $results["response"][$index]["value"] = $entity->getPrice() / 100;
                    $results["response"][$index]["discount"] = $entity->getDiscountAmount();
                    $results["response"][$index]["type"] = $data[$index]["type"];
                    $results["response"][$index]["id"] = $entity->getId();
                }
            }

            $results["code"] = "200";
            $results["status"] = "ok";
            $results["message"] = "SUCCESS";
            return $results;
        } else {
            return $data;
        }
    }


     /**
     * 
     * @param int $commertial_promotion_id
     * @param int $seller_id
     * @param int $offset
     * @param int $limit
     * @param string $type
     * @param string $return array|model
     * @return string
     */
    public function searchCommercialPromotion($param, \Doctrine\ODM\MongoDB\DocumentManager $dm){
   
        $qb = $this->createQueryBuilder('cp');
        $qb->select('cpt','cp.id','cp.sellerId')
                ->where('cp.availableQuantity > 0 AND cp.status = 1 and  :time >= cp.timeStart  and cp.timeEnd > :time  ')
                ->innerJoin('CommercialPromotionBundle:CommercialPromotionType', 'cpt', 'WITH', 'cpt.id = cp.commercialPromotionTypeId')
                ->setParameter(":time", time());
        $qb->innerJoin('StoreManagerStoreBundle:Store', 'st', 'WITH', 'st.id = cp.sellerId')
                    ->andWhere('cpt.promotionType != :offer_type')
                    ->setParameter('offer_type', 'coupon')
                    ->setParameter('offer_type', 'shoppingcard')
                    ->andWhere('cpt.description LIKE :description')
                    ->setParameter('description','%'.$param.'%');
     $qb->groupBy('cp.commercialPromotionTypeId');
     $qb->orderBy('cp.id','asc');
     $data = $qb->getQuery()->getArrayResult();
 
     return  $data;
    }


     /**
     * 
     * @param int $commertial_promotion_id
     * @param int $seller_id
     * @param string $return array|model
     * @return string
     */
     public function GetVoucherId($sellerid,\Doctrine\ODM\MongoDB\DocumentManager $dm){

             $qb = $this->createQueryBuilder('cp');
             $qb->select('cp.id','cp.sellerId')
                 ->orderBy('cp.id', 'DESC')
                 ->where('cp.sellerId=:seller')
                 ->setParameter("seller",$sellerid)
                 ->setMaxResults(1); 
             $data = $qb->getQuery()->getArrayResult();
             return $data[0]['id'];  
     }

     /**
     * 
     * @param int $commertial_promotion_id
     * @param int $seller_id
     * @param int $offset
     * @param int $limit
     * @param string $type
     * @param string $return array|model
     * @return string
     */
    public function searchCommercialPromotionAllStore($param,\Doctrine\ODM\MongoDB\DocumentManager $dm){
        
        $qb = $this->createQueryBuilder('cp');

        $qb->select('cpt','cp.id','cp.sellerId')
                ->orderBy('cp.id', 'DESC')
                ->where('cp.availableQuantity > 0 AND cp.status = 1 and  :time >= cp.timeStart  and cp.timeEnd > :time  ')

                ->innerJoin('CommercialPromotionBundle:CommercialPromotionType', 'cpt', 'WITH', 'cpt.id = cp.commercialPromotionTypeId')
                ->setParameter(":time", time());

         $qb->innerJoin('StoreManagerStoreBundle:Store', 'st', 'WITH', 'st.id = cp.sellerId')
                    ->andWhere('cpt.promotionType != :offer_type')
                    ->setParameter('offer_type', 'coupon')
                    ->setParameter('offer_type', 'shoppingcard');
       $qb->groupBy('cpt.id');

       $data = $qb->getQuery()->getArrayResult();
    
       $result = array();
     
       if (!empty($data)) {
      
        foreach ($data as $getdata) {

            $result[] = array(
                'id' => $getdata['id'],
                'seller_id' => $getdata['sellerId'],
                'description' => $getdata[0]['description'],
                'defaultImg' => $getdata[0]['defaultImg'],
                'promotionType' => $getdata[0]['promotionType']
            );

          } 
       
       } 

     return $result;

    }
    


    /**
     * 
     * @param type $commercial_promotion_id
     * @param type $amount
     * @return boolean
     */
    public function decreaseCommercialPromotion($commercial_promotion_id, $amount) {
        $query = $this->createQueryBuilder('cp')
                ->update()
                ->set('cp.availableQuantity', 'cp.availableQuantity -:amount')
                ->where('cp.id=:commercial_promotion_id')
                ->setParameter("commercial_promotion_id", $commercial_promotion_id)
                ->setParameter("amount", $amount)
                ->getQuery();
        $reponse = $query->getResult();

        if ($reponse) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * 
     * @param array $data
     * 
     */
    public function deleteCommercialPromotion($data) {
        $query = $this->createQueryBuilder('cp')
                ->update()
                ->set('cp.status', 0)
                ->where('cp.id=:commercial_promotion_id and cp.sellerId=:seller_id')
                ->setParameter("commercial_promotion_id", $data["offer_id"])
                ->setParameter("seller_id", $data["seller_id"])
                ->getQuery();
        $reponse = $query->getResult();

        if ($reponse) {
            $results["code"] = "101";
            $results["message"] = "SUCCESS";
        } else {
            $results["code"] = "94312";
            $results["message"] = "FAILED";
        }
        return $results;
    }

    /**
     * 
     * @param type $param
     */
    public function getTypePromotion($param) {

        return $param["promotion_type"];
    }

    /**
     * Get De detail of the offer
     * @param array $param
     * @param DocumentManager  $dm
     * @return array
     */
    public function getCommercialPromotionDetail($param, \Doctrine\ODM\MongoDB\DocumentManager $dm) {

        $result = array();
        $result["result"] = array();
        $qb = $this->createQueryBuilder('cp');
        $qb->select('cp', 'cpt', 'st')
                ->orderBy('cp.id', 'DESC')
                ->where('cp.availableQuantity > 0 AND cp.status = 1 and  :time >= cp.timeStart  and cp.timeEnd > :time  ')
                ->innerJoin('CommercialPromotionBundle:CommercialPromotionType', 'cpt', 'WITH', 'cpt.id = cp.commercialPromotionTypeId')
                ->setParameter(":time", time());

        //Not used right now
        if (isset($param["offer_type"])) {
            $qb->innerJoin('StoreManagerStoreBundle:Store', 'st', 'WITH', 'st.id = cp.sellerId')
                    ->andWhere('cpt.promotionType = :offer_type')
                    ->setParameter('offer_type', $param["offer_type"]);
            if (isset($param["seller_id"])) {     // 
                $qb->andWhere('st.id = :seller_id')
                        ->setParameter('seller_id', $param["seller_id"]);
            }
        } else {
            $qb->innerJoin('StoreManagerStoreBundle:Store', 'st', 'WITH', 'st.id = cp.sellerId')
                    ->andWhere('cp.id = :offer_id')
                    ->setParameter('offer_id', $param["offer_id"])
                    ->setMaxResults(1);
        }


        $result["code"] = "101";
        $result["message"] = "SUCCESS";

        try {
            $datas = $qb->getQuery()->getArrayResult();
        } catch (Exception $exc) {

            $result["code"] = "73465";
            $result["message"] = $exc->getTraceAsString();
        }
        if (isset($datas[0])) {
            $result["result"] = $datas[0];
            $result["result"]["promotion_start_date"] = $result["result"]["timeStartH"]->format("d-m-Y");
            $result["result"]["promotion_expire_date"] = $result["result"]["timeEndH"]->format("d-m-Y");
            $result["result"]["promotion_type"] = $datas[1];
            $result["result"]["seller_information"] = isset($datas[2]) ? $datas[2] : array();
            
            if ((substr($result["result"]["commercialPromotionTypeId"], 0, strlen(self::$VOUCHER_TYPE)) == self::$VOUCHER_TYPE ) ||
                    (substr($result["result"]["commercialPromotionTypeId"], 0, strlen(self::$AMILON_TYPE)) == self::$AMILON_TYPE )) {
                $latitude = ( isset($param["latitude"]))?$param["latitude"]:null ;
                $longitude = ( isset($param["longitude"]))?$param["longitude"]:null ;
                $offer_id = ( isset($param["offer_id"]))?$param["offer_id"]:null ;
                $shopping_card_document = $this->getEntityManager()
                        ->getRepository('SixthContinentConnectBundle:OfferPointofSale')
                        ->getOfferPointofSaleArrayV2($offer_id, $latitude , $longitude );
                $result["result"]["point_of_sales"] = $shopping_card_document;
            }
        } else {
            return $result;
        }
        if (isset($param["buyer_id"])) {
            $result['result']['price_for_me'] = ($result["result"]['promotion_type']['toBuy'] == 1) ? $this->getPriceForMe(null, null, $result["result"]["id"], $param["buyer_id"], $result["result"]["promotion_type"]["id"], $result["result"]) : "";
        }
        $buyer_id = isset($param["buyer_id"])?$param["buyer_id"]:null;
        $result["result"]["extra_information"] = ($result["result"]["extraInfo"] == 1) ? $this->getExtraInfoForCommercialPromotion($result["result"], $dm , $buyer_id ) : "";
        return $result;
    }

    /**
     * 
     * @param array $results
     * @param DocumentManage $dm
     */
    public function getExtraInfoForCommercialPromotion($result, \Doctrine\ODM\MongoDB\DocumentManager $dm , $buyer_id = null) {
        $extra_info = array();
       
        if (substr($result["commercialPromotionTypeId"], 0, strlen(self::$COUPON_TYPE)) == self::$COUPON_TYPE) {
            $extra_info = $dm->getRepository('CommercialPromotionBundle:CouponCP')
                    ->getCustomizationOffer($result["id"]);
        }
        if (substr($result["commercialPromotionTypeId"], 0, strlen(self::$SHOPPING_CARD_TYPE)) == self::$SHOPPING_CARD_TYPE) {
            $extra_info = $dm->getRepository('CommercialPromotionBundle:ShoppingCardCP')
                    ->getCustomizationOffer($result["id"]);
        }
        if (substr($result["commercialPromotionTypeId"], 0, strlen(self::$VOUCHER_TYPE)) == self::$VOUCHER_TYPE) {
            $extra_info = $dm->getRepository('CommercialPromotionBundle:VoucherCP')
                    ->getCustomizationOffer($result["id"]);
        }
        if (substr($result["commercialPromotionTypeId"], 0, strlen(self::$AMILON_TYPE)) == self::$AMILON_TYPE) {
        
            $result["em"] = $this;
            $result["buyer_id"] = $buyer_id;
            $extra_info = $dm->getRepository('CommercialPromotionBundle:AmilonCardCP')
                    ->getCustomizationOffer($result);
        }

        return $extra_info;
    }

    /**
     * 
     * @param CommercialPromotion $CPromotion
     * @param WalletCitizen $wallet
     * @param int $commercial_promotion_id
     * @param int $buye_id
     * @param int $comercial_promotion_type_id
     * @param array $commercial_promotion
     */
    public function getPriceForMe(CommercialPromotion $CPromotion = null, WalletCitizen $wallet = null, $commercial_promotion_id, $buye_id, $comercial_promotion_type_id, $commercial_promotion = null) {
        $result = array();
        $em = $this->getEntityManager();
        $wallet_repository = $em->getRepository("WalletBundle:WalletCitizen");
        $wallets = $wallet_repository->getWalletData($buye_id);
        if(!isset($wallets[0])){
            return $result;
        }
        $wallet = $wallets[0];

        /**
         * Rounded of 1 euro
         */
        // Formula citizen income can be use up to 50% of  (Price - discount) rounded by 100
        // Example discount = 50%; price = 1000 ; => ci_usable = floor(500*0.5) = 200
        if (
                (substr($comercial_promotion_type_id, 0, strlen(self::$SHOPPING_CARD_TYPE)) == self::$SHOPPING_CARD_TYPE) || 
                (substr($comercial_promotion_type_id, 0, strlen(self::$VOUCHER_TYPE)) == self::$VOUCHER_TYPE) ||
                 (substr($comercial_promotion_type_id, 0, strlen(self::$AMILON_TYPE)) == self::$AMILON_TYPE)){
            $result["discount_value"] = $commercial_promotion["price"] * $commercial_promotion["discountAmount"] / 100;
            $result["discount_value_dp"] = number_format($result["discount_value"] / 100, 2);
            $result['cashpayment'] = $result['init_amount'] = $commercial_promotion["price"] - $result["discount_value"];
            $result['max_usage_init_price'] = self::$SHOPPING_CARD_MAX_USAGE_INIT_PRICE;
            $result['available_amount'] = $wallet->getCitizenIncomeAvailable();
            if(substr($comercial_promotion_type_id, 0, strlen(self::$SHOPPING_CARD_TYPE)) == self::$SHOPPING_CARD_TYPE){
                $rounded = 100 ;
            }else{
                $rounded = 50 ;
            }
            $result["usage_credit"] = $wallet_repository->getMaxUsageCreditJustRounded($result , $rounded);
            // hange Values
            $result['init_amount'] = $commercial_promotion["price"];
            $result['init_amount_dp'] = number_format($result['init_amount'] / 100, 2);

            $result['sixthcontinent_contribution'] = $result["usage_credit"]['amount_citizen_income'];
            $result['sixthcontinent_contribution_dp'] = number_format($result['sixthcontinent_contribution'] / 100, 2);

            $result['cashpayment'] = $result['init_amount'] - $result['discount_value'] - $result["sixthcontinent_contribution"];
            $result['cashpayment_dp'] = number_format($result['cashpayment'] / 100, 2);
        }

        return $result;
    }

    /**
     * Calculate price for you
     * @param type $citizen_income
     */
    public function calculatePriceForYou($ci_available, $discount, $init_amount, $wallet_citizen_repository , $comercial_promotion_type_id = null ) {
        $result["discount_value"] = $init_amount * $discount / 100;
        $result['cashpayment'] = $result['init_amount'] = $init_amount - $result["discount_value"];
        $result['max_usage_init_price'] = self::$SHOPPING_CARD_MAX_USAGE_INIT_PRICE;
        $result['available_amount'] = $ci_available;
        $rounded = 100 ;
        if ($comercial_promotion_type_id != null) {
            if (substr($comercial_promotion_type_id, 0, strlen(self::$SHOPPING_CARD_TYPE)) == self::$SHOPPING_CARD_TYPE) {
                $rounded = 100;
            } else {
                $rounded = 50;
            }
        }

        $result["usage_credit"] = $wallet_citizen_repository->getMaxUsageCreditJustRounded($result , $rounded);

        $result['init_amount'] = $init_amount;
        $result['init_amount_dp'] = number_format($init_amount / 100, 2);

        $result['sixthcontinent_contribution'] = $result["usage_credit"]['amount_citizen_income'];
        $result['sixthcontinent_contribution_dp'] = number_format($result['sixthcontinent_contribution'] / 100, 2);

        $result['cashpayment'] = $result['init_amount'] - $result['discount_value'] - $result["sixthcontinent_contribution"];
        $result['cashpayment_dp'] = number_format($result['cashpayment'] / 100, 2);
        
        /// in reality discount_value for this section has to be discounted value
        $result["discounted_value_dp"] =  number_format(($init_amount - $result["discount_value"])/ 100, 2);
        return $result;
    }
    
    /**
     * Get Price for me base on what we are buying 
     */

}
