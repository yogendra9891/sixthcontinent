<?php

namespace Media\MediaBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * ClubAlbumCommentMongoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClubAlbumCommentMongoRepository extends DocumentRepository
{
    /*
     * get all author ids who commented on this album
     * @param int $album_id
     * @return array
     */
    public function clubcommentAuthorDetails($album_id){
        // get all comments of the album to retrieve author id
        $qb = $this->dm->createQueryBuilder('MediaMediaBundle:ClubAlbumComment');
        
        $albumComments = $qb
                        ->field('album_id')->equals("$album_id")
                        ->distinct('comment_author')
                        ->getQuery()
                        ->execute()
                        ->toArray();
        
        $authorsCommented = array();
        if(!empty($albumComments)){
            foreach($albumComments as $albumComment){
                $authorsCommented[] = $albumComment;
            }
        }
        return $authorsCommented;
    }
    
     /**
     * Edit the comment rate
     * @param type $rate_id
     * @return boolean
     */
    public function editClubAlbumCommentRate($rate_id, $arrayCommentRate, $comment_id) {
        $result = $this->createQueryBuilder('ClubAlbumComments')
                ->update()
                ->field('id')->equals($comment_id)
                ->field('rate.id')->equals($rate_id)
                ->field("rate.$")->set($arrayCommentRate)
                ->getQuery()
                ->execute();
        return true;
    }
    
    public function getCommentedUserIds($album_id){
        $qb = $this->createQueryBuilder('m')
                ->select('comment_author')
                ->distinct('comment_author')
                ->field('status')->equals(1)
                ->field('album_id')->equals($album_id);
            $comments = $qb->getQuery()->execute()->toArray(true);
            
            return !empty($comments) ? $comments : array();
    }
    
    public function getAlbumComments($albumId, $limit, $start, $returnWithTotal=false, $isRecent=false){
        $commentCount = 0;
        if($isRecent or $returnWithTotal){
            $commentCount = $this->createQueryBuilder('m')
                    ->count()
                    ->field('status')->equals(1)
                    ->field('album_id')->equals($albumId)
                    ->getQuery()
                    ->execute();
        }
        
        if($isRecent){
            $offset = $commentCount - ($start+$limit);
            if($offset<0){
                $offset = 0;
                $limit = ($commentCount-$start)>0 ? ($commentCount-$start) : 0;
            }
            $start = $offset;
        }
        $qb = $this->createQueryBuilder('m');
        $result =$qb
                ->field('status')->equals(1)
                ->field('album_id')->equals($albumId)
                ->limit($limit)
                ->skip($start)
                ->sort('comment_created_at',1)
                ->getQuery()
                ->execute()
                ->toArray(true);
        return $returnWithTotal ? array('result'=>$result, 'count'=>$commentCount) : $result;
    }
}