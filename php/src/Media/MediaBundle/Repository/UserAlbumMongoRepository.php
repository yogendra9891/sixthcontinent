<?php

namespace Media\MediaBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * UserAlbumMongoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserAlbumMongoRepository extends DocumentRepository {

    /**
     * Get Album count
     * @param int $user_id
     * @return int
     */
    public function getUserAlbumCount($user_id) { 
        $qb = $this->createQueryBuilder()
                ->count()
                ->field('user_id')->equals($user_id)
                ->getQuery();

        $result = $qb->execute();
        return $result;
    }
 
    /**
     * Edit the Album rate
     * @param type $rate_id
     * @return boolean
     */
    public function editAlbumRate($rate_id, $arrayAlbumRate, $album_id) {
        $result = $this->createQueryBuilder('album')
                ->update()
                ->field('id')->equals($album_id)
                ->field('rate.id')->equals($rate_id)
                ->field("rate.$")->set($arrayAlbumRate)
                ->getQuery()
                ->execute();
        return true;
    }
    
    /** 
     * get personal friend album listing
     * @param int $friend_id
     * @return int
     */
    public function personalFriendAlbum($friend_id,$is_personal_friend,$limit,$offset){
        if($is_personal_friend){
           $privacy_setting = array(1,3); // personal friend will view personal as well as public album
        } else {
            $privacy_setting = array(3);
        }
        
            $qb     = $this->createQueryBuilder('useralbum');
            $result = $qb->field('privacy_setting')->in($privacy_setting)
                            ->field('user_id')->equals($friend_id)
                            ->sort('id','DESC')
                            ->limit($limit)
                            ->skip($offset)
                            ->getQuery()
                            ->execute()
                            ->toArray(false);       
            return $result;
        
    }
    
     /** 
     * get professional friend album listing
     * @param int $friend_id
     * @return int
     */
    public function professionalFriendAlbum($friend_id,$is_professional_friend,$limit,$offset){
        if($is_professional_friend){
           $privacy_setting = array(2,3); // professional friend will view professional as well as public album
        } else {
            $privacy_setting = array(3);
        }
        
            $qb     = $this->createQueryBuilder('useralbum');
            $result = $qb->field('privacy_setting')->in($privacy_setting)
                            ->field('user_id')->equals($friend_id)
                            ->sort('id','DESC')
                            ->limit($limit)
                            ->skip($offset)
                            ->getQuery()
                            ->execute()
                            ->toArray(false);       
            return $result;
        
    }
    
     /** 
     * get third person user album listing
     * @param int $friend_id
     * @return int
     */
    public function getOtherUserAlbum($friend_id,$limit,$offset){
        // if serach user is not personal and professional friend
        // then we will see only public albums
        $privacy_setting = array(3);
        $qb     = $this->createQueryBuilder('useralbum');
        $result = $qb->field('privacy_setting')->in($privacy_setting)
                        ->field('user_id')->equals($friend_id)
                        ->sort('id','DESC')
                        ->limit($limit)
                        ->skip($offset)
                        ->getQuery()
                        ->execute()
                        ->toArray(false);       
        return $result;
     }
      /** 
     * get friend album listing
     * @param int $friend_id
     * @return int
     */
    public function getFriendAlbums($friend_id,$friend_status,$limit,$offset){
        $privacy_setting = array();
        switch($friend_status){
            case 0:
                $privacy_setting = array(3); //public
                break;
            case 1:
                $privacy_setting = array(1, 3); //personal, public
                break;
            case 2:
                $privacy_setting = array(2, 3); //professional, public
                break;
            case 3:
                $privacy_setting = array(1, 2, 3); //personal, professional, public
                break;
        }
        
            $qb     = $this->createQueryBuilder('useralbum');
            $result = $qb->field('privacy_setting')->in($privacy_setting)
                            ->field('user_id')->equals($friend_id)
                            ->sort('id','DESC')
                            ->limit($limit)
                            ->skip($offset)
                            ->getQuery()
                            ->execute()
                            ->toArray(false);       
            return $result;
        
    }
    
    /** 
     * get friend album listing
     * @param int $friend_id
     * @return int
     */
    public function getFriendAlbumsCount($friend_id,$friend_status){
        $privacy_setting = array();
        switch($friend_status){
            case 0:
                $privacy_setting = array(3); //public
                break;
            case 1:
                $privacy_setting = array(1, 3); //personal, public
                break;
            case 2:
                $privacy_setting = array(2, 3); //professional, public
                break;
            case 3:
                $privacy_setting = array(1, 2, 3); //personal, professional, public
                break;
        }
        
            $qb     = $this->createQueryBuilder('useralbum');
            $result = $qb->field('privacy_setting')->in($privacy_setting)
                            ->field('user_id')->equals($friend_id)
                            ->sort('id','DESC')
                            ->count()
                            ->getQuery()
                            ->execute();       
            return $result;
        
    }
}
