<?php

namespace Media\MediaBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * StoreAlbumMediaCommentMongoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StoreAlbumMediaCommentMongoRepository extends DocumentRepository
{
    
    /*
     * get all author ids who commented on this album
     * @param int $album_id
     * @return array
     */
    public function commentAuthorDetails($album_id){
         // get all comments of the album to retrieve author id
        $qb = $this->dm->createQueryBuilder('MediaMediaBundle:StoreAlbumMediaComment');
        
        $albumComments = $qb
                ->field('album_id')->equals($album_id)
                ->distinct('comment_author')
                ->getQuery()
                ->execute()
                ->toArray();
        
        $authorsCommented = array();
        if(!empty($albumComments)){
            foreach($albumComments as $albumComment){
                $authorsCommented[] = $albumComment;
            }
        }
        return $authorsCommented;
    }
    
    /**
     * Edit the comment rate
     * @param type $rate_id
     * @return boolean
     */
    public function editCommentRate($rate_id, $arrayCommentRate, $comment_id) {
        $result = $this->createQueryBuilder('s')
                ->update()
                ->field('id')->equals($comment_id)
                ->field('rate.id')->equals($rate_id)
                ->field("rate.$")->set($arrayCommentRate)
                ->getQuery()
                ->execute();
        return true;
    }
    
    public function getRecentComments($mediaId, $limit, $responseWithCount=false){

        $resultCount = 0;
        $resultCount = $this->createQueryBuilder('s')
                ->count()
                ->field('media_id')->equals((string)$mediaId)
                ->field('status')->equals(1)
                ->getQuery()
                ->execute();
        $start = $resultCount>0 ? (($resultCount-$limit)>0 ? ($resultCount-$limit) : 0) : 0;
        $result = $this->createQueryBuilder('s')
                ->field('media_id')->equals((string)$mediaId)
                ->field('status')->equals(1)
                ->skip($start)
                ->limit($limit)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $responseWithCount ? array('result'=>$result, 'size'=>$resultCount) : array('result'=>$result);
    }
    
    public function getCommentedUserIds($media_id){
        $qb = $this->createQueryBuilder('m')
                ->select('comment_author')
                ->distinct('comment_author')
                ->field('status')->equals(1)
                ->field('media_id')->equals((string)$media_id);
            $comments = $qb->getQuery()->execute()->toArray(true);
            
            return !empty($comments) ? $comments : array();
    }
    
    public function getCommentsOfMedia($media_id, $start, $limit, $withCount=false){
        $resultCount = $this->createQueryBuilder('s')
                ->count()
                ->field('media_id')->equals((string)$media_id)
                ->field('status')->equals(1)
                ->getQuery()
                ->execute();
        
        $offset = $resultCount - ($start+$limit);
        if($offset<0){
            $offset = 0;
            $limit = ($resultCount-$start)>0 ? ($resultCount-$start) : 0;
        }
        
        $result = $this->createQueryBuilder('s')
                ->field('media_id')->equals((string)$media_id)
                ->field('status')->equals(1)
                ->skip($offset)
                ->limit($limit)
                ->getQuery()
                ->execute()
                ->toArray(false);
        return $withCount ? array('result'=>$result, 'size'=>$resultCount) : array('result'=>$result);
    }
}