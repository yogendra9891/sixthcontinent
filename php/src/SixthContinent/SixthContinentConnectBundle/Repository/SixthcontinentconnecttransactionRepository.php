<?php

namespace SixthContinent\SixthContinentConnectBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Utility\ApplaneIntegrationBundle\Model\ApplaneConstentInterface;
use Utility\UtilityBundle\Utils\Utility;
use SixthContinent\SixthContinentConnectBundle\Entity\Sixthcontinentconnecttransaction;
/**
 * SixthcontinentconnecttransactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SixthcontinentconnecttransactionRepository extends EntityRepository {

    /**
     * get aplication completed transaction count 
     * @param string $app_id
     */
    public function getAppTransactionCount($app_id) {
        $completed_status = ApplaneConstentInterface::COMPLETED;
        $qb = $this->createQueryBuilder('a');
        $count = $qb->select('count(a.id)')
                        ->where('a.applicationId =:app_id', 'a.status =:status')
                        ->setParameter('app_id', $app_id)
                        ->setParameter('status', $completed_status)
                        ->getQuery()->getSingleScalarResult();
        $count_result = Utility::getIntergerValue($count);
        return $count_result;
    }

    /**
     * get aplication completed transaction revenue 
     * @param string $app_id
     */
    public function getAppTransactionsRevenue($app_id) {
        $completed_status = ApplaneConstentInterface::COMPLETED;
        $total_revenue = 0;
        $qb = $this->createQueryBuilder('a');
        $result = $qb->select('sum(a.transactionValue)')
                        ->where('a.applicationId =:app_id', 'a.status =:status')
                        ->groupBy('a.applicationId')
                        ->setParameter('app_id', $app_id)
                        ->setParameter('status', $completed_status)
                        ->getQuery()->getResult();
        if (count($result)) {
            $total_revenue = isset($result[0][1]) ? $result[0][1] : $total_revenue;
        }
        return Utility::getIntergerValue($total_revenue);
    }

    /**
     * finding the tansaction of a app.
     * @param string $app_id
     * @param int $limit_start
     * @param int $limit_size
     */
    public function getAppTransactions($app_id, $limit_start, $limit_size) {
        $completed_status = ApplaneConstentInterface::COMPLETED;
        $qb = $this->createQueryBuilder('a');
        $query = $qb->select()
                ->where('a.applicationId =:app_id', 'a.status =:status')
                ->setParameter('app_id', $app_id)
                ->setParameter('status', $completed_status)
                ->orderBy('a.date', 'DESC')
                ->setFirstResult($limit_start)
                ->setMaxResults($limit_size)
                ->getQuery();
        $result = $query->getResult();
        return $result;
    }

    /**
     * find the connect transactions of previous day.
     * @return array object
     * 
     */
    public function getconnectTransactions() {
        $yesterday = new \DateTime('yesterday');
        $start_date = $yesterday->format('Y-m-d');
        $today = new \DateTime('now');
        $end_date = $today->format('Y-m-d');
        $status = ApplaneConstentInterface::COMPLETED;
        //create the query
        $query = $this->createQueryBuilder('c');
        $query->select()
                ->Where('c.date >=:create_at', 'c.date <:end_at', 'c.status =:status')
                ->setParameter('create_at', $start_date)
                ->setParameter('end_at', $end_date)
                ->setParameter('status', $status);

        $result = $query->getQuery();
        $result_res = $result->getResult();
        return $result_res;
    }

    /**
     * find the application revenue and count
     * @param string $app_id
     */
    public function getAppTransactionsRevenueCount($app_id) {
        $completed_status = ApplaneConstentInterface::COMPLETED;
        $qb = $this->createQueryBuilder('a');
        $result = $qb->select('sum(a.transactionValue) as revenue', 'a.applicationId as application_id', 'count(a.id) as transaction_count')
                        ->where($qb->expr()->in('a.applicationId', $app_id), $qb->expr()->eq('a.status', ':status'))
                        ->groupBy('a.applicationId')
                        ->setParameter('status', $completed_status)
                        ->getQuery()->getResult();
        return $result;
    }

    /**
     * Get Comercial promotio transaction
     * 
     * @param type $userId
     * @param type $status
     * @param type $offset
     * @param type $limit
     * @return type
     */
    public function getPurchasedCouponDetails($userId, $status = null, $offset = 0, $limit = 10) {
        $results = array();
        $qb = $this->createQueryBuilder('t');
        $qb->select('cp.id, t.id as transaction_id, t.transactionValue as transaction_value,'
                        . ' t.discount, t.usedCi as used_ci, t.paybleValue as payble_value, '
                        . 't.date as purchase_date, cta.expiredDate as expiry_date, cc.coupon,'
                        . ' cpt.description as cpt_description, acard.link as url , cpt.promotionType as promotion_type , '
                        . ' cpt.promotionLabel as label, cpt.defaultImg as default_img , acard.validityEndDateH as  validity_end_date_h')
                ->leftJoin('SixthContinentConnectBundle:CodesConsumption', 'cc', 'WITH', 'cc.transactionId=t.id AND cc.userId=t.userId')
                ->leftJoin('SixthContinentConnectBundle:CouponToActive', 'cta', 'WITH', 'cta.id=cc.couponId  ')
                ->innerJoin('CommercialPromotionBundle:CommercialPromotion', 'cp', 'WITH', 'cp.id=t.applicationId')
                ->innerJoin('CommercialPromotionBundle:CommercialPromotionType', 'cpt', 'WITH', 'cpt.id=cp.commercialPromotionTypeId')
                ->leftJoin('WalletBundle:AmilonCard', 'acard', 'WITH', ' acard.connectTrsId =t.id ')
                ->orderBy('t.id', 'DESC')
                ->where('t.userId = :userId AND t.transactionType= :transactionType and cpt.id != :msc_crociere '
                        . ' and cpt.id  not  between :ups_lower and  :ups_upper ');
        if ($status) {
            $qb->andWhere('t.status= :status')
                    ->setParameter('status', $status);
        }
        $qb
                ->setMaxResults($limit)
                ->setFirstResult($offset)
                ->setParameter('userId', (int) $userId)
                ->setParameter('transactionType', 'PAY_ONCE_OFFER')
                ->setParameter('msc_crociere', 352306)
                ->setParameter('ups_lower', 352850)
                ->setParameter('ups_upper', 352901);
        try {
            $results = $qb->getQuery()->getResult();
        } catch (\Exception $e) {
            
        }
        return $results;
    }

    public function getPurchasedCouponDetailsCount($userId, $status = null) {
        $result = 0;
        $qb = $this->createQueryBuilder('t');
        $qb->select('count(t.id) as records')
                ->leftJoin('SixthContinentConnectBundle:CodesConsumption', 'cc', 'WITH', 'cc.transactionId=t.id AND cc.userId=t.userId')
                ->leftJoin('SixthContinentConnectBundle:CouponToActive', 'cta', 'WITH', 'cta.id=cc.couponId')
                ->innerJoin('CommercialPromotionBundle:CommercialPromotion', 'cp', 'WITH', 'cp.id=t.applicationId')
                ->innerJoin('CommercialPromotionBundle:CommercialPromotionType', 'cpt', 'WITH', 'cpt.id=cp.commercialPromotionTypeId')
                ->leftJoin('WalletBundle:AmilonCard', 'acard', 'WITH', 'acard.connectTrsId =t.id  ')
                ->orderBy('t.id', 'DESC')
                ->where('t.userId = :userId AND t.transactionType= :transactionType and cpt.id != :msc_crociere'
                        . ' and cpt.id  not  between :ups_lower and  :ups_upper ');
        if ($status) {
            $qb->andWhere('t.status= :status')
                    ->setParameter('status', $status);
        }
        $qb
                ->setParameter('userId', (int) $userId)
                ->setParameter('transactionType', 'PAY_ONCE_OFFER')
                ->setParameter('msc_crociere', 352306)
                ->setParameter('ups_lower', 352850)
                ->setParameter('ups_upper', 352901);
        try {
            $results = $qb->getQuery()->getResult();
            $result = isset($results[0]['records']) ? $results[0]['records'] : 0;
        } catch (\Exception $e) {
            
        }

        return $result;
    }

    /**
     * Get connect transaction detail
     * 
     * @param type $userId
     * @param type $status
     * @param type $offset
     * @param type $limit
     * @return type
     */
    public function getSinglePurchaseOffer($userId, $transaction_id) {
        $results = array();
        $qb = $this->createQueryBuilder('t');
        $qb->select('cp.id, t.id as transaction_id, t.transactionValue as transaction_value,'
                        . ' t.discount, t.usedCi as used_ci, t.paybleValue as payble_value, '
                        . 't.date as purchase_date, cta.expiredDate as expiry_date, cc.coupon,'
                        . ' cpt.description as cpt_description, acard.link as url , cpt.promotionType as promotion_type , '
                        . ' cpt.promotionLabel as label, cpt.defaultImg as default_img , acard.validityEndDateH as  validity_end_date_h')
                ->leftJoin('SixthContinentConnectBundle:CodesConsumption', 'cc', 'WITH', 'cc.transactionId=t.id AND cc.userId=t.userId')
                ->leftJoin('SixthContinentConnectBundle:CouponToActive', 'cta', 'WITH', 'cta.id=cc.couponId')
                ->innerJoin('CommercialPromotionBundle:CommercialPromotion', 'cp', 'WITH', 'cp.id=t.applicationId')
                ->innerJoin('CommercialPromotionBundle:CommercialPromotionType', 'cpt', 'WITH', 'cpt.id=cp.commercialPromotionTypeId')
                ->leftJoin('WalletBundle:AmilonCard', 'acard', 'WITH', ' acard.connectTrsId =t.id ')
                ->orderBy('t.id', 'DESC')
                ->where(' t.transactionId = :transaction_id and t.userId = :userId AND t.transactionType= :transactionType');
        $qb
                ->setParameter('userId', (int) $userId)
                ->setParameter('transactionType', 'PAY_ONCE_OFFER')
                ->setParameter('transaction_id', $transaction_id);
        try {
            $results = $qb->getQuery()->getResult();
        } catch (\Exception $e) {
            
        }
        if (isset($results[0])) {
            return $results[0];
        } else {
            return $results;
        }
    }
    /**
     * Get pending transaction of Purchase type
     * @param type $userId
     * @param type $status
     */
    public function getSpecialOfferTransactionPending() {
        $time_stamp = time() - 24*60*60; //1 day
        
        $results = array();
            $qb = $this->createQueryBuilder('t');
            $qb->select('t')
            ->where(' t.transactionType= :transactionType and t.status = :status and t.timeStamp >= :time_stamp ')
            ->setParameter('transactionType', 'PAY_ONCE_OFFER')
            ->setParameter('time_stamp', $time_stamp)
            ->setParameter('status', 'PENDING');
            $results = $qb->getQuery()->getResult();
        return $results;
    }
    
    /**
     * Give back the transaction related to SixthCotinent trs
     * @param Sixthcontinentconnecttransaction $sixconnect
     * @return TransactionSystemBundle:Transaction
     */
    public function getTransactionFromConnect(Sixthcontinentconnecttransaction $sixconnect) {
        $qb = $this->createQueryBuilder('t');
        $qb->select('ts')
                ->innerJoin('TransactionSystemBundle:Transaction', 'ts', 'WITH', ' ts.id = :trs_id ')
                ->setParameter('trs_id', $sixconnect->getTransactionId());
        $result = $qb->getQuery()->getSingleResult();
        return $result;
    }

}
