<?php

namespace SixthContinent\SixthContinentConnectBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Utility\UtilityBundle\Utils\Utility;

/**
 * ApplicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ApplicationRepository extends EntityRepository {

    /**
     * fetching the application business account information
     * @param string $app_id
     */
    public function getApplicationBusinessInformation($app_id, $offset = 0, $limit = 1) {
        $result_res = array();
        $qb = $this->createQueryBuilder('a');

        $query = $qb->select('a.id', 'a.userId as user_id', 'a.applicationId as application_id', 'a.applicationName as application_name', 'a.applicationUrl as application_url', 'a.applicationSecret as application_secret', 'ba.email', 
                'ba.description', 'ba.name', 'ba.businessName as business_name', 'ba.businessType as business_type', 'ba.businessCountry as business_country', 'ba.businessRegion as business_region', 'ba.businessCity as business_city', 'ba.businessAddress as business_address', 'ba.phone', 'ba.zip', 'ba.province', 'ba.vatNumber as vat_number', 'ba.iban',
                'ba.fiscalCode as fiscal_code', 'ba.represFiscalCode as repres_fiscal_code', 'ba.represFirstName as repres_first_name', 'ba.represLastName as repres_last_name', 'ba.represPlaceOfBirth as repres_place_of_birth', 'ba.represDob as repres_dob', 'ba.represEmail as repres_email', 'ba.represPhoneNumber as repres_phone_number', 'ba.represAddress as repres_address', 'ba.represProvince as repres_province', 'ba.represCity as repres_city', 'ba.represZip as repres_zip', 'ba.createdAt as created_at', 'ba.updatedAt as updated_at', 'ba.isActive as is_active', 'ba.isDeleted as is_deleted', 'ba.latitude', 'ba.longitude', 'ba.mapPlace as map_place', 'ba.profileImage as profile_image', 'ba.catId as cat_id')
                ->leftJoin('SixthContinentConnectBundle:ApplicationBusinessAccount', 'ba', 'WITH', 'a.applicationId = ba.applicationId')
                ->where('a.applicationId =:app_id')
                ->setParameter('app_id', $app_id)
                ->setFirstResult($offset)
                ->setMaxResults($limit)
                ->getQuery();
        $result_res = $query->getResult();
        if (!empty($result_res)) {
            $result_res = $result_res[0];
        }
        return $result_res;
    }

    /**
     * fetching the application business account information
     * @param string $app_id
     */
    public function searchApplicationByText($search_text, $offset = 0, $limit = 4) {
        $$search_text = trim($search_text);
        $result_res = array();
        $qb = $this->createQueryBuilder('a');

        $query = $qb->select('a.applicationId as application_id', 'a.applicationName as application_name', 'ba.name', 'ba.businessName as business_name')
                ->innerJoin('SixthContinentConnectBundle:ApplicationBusinessAccount', 'ba', 'WITH', 'a.applicationId = ba.applicationId')
                ->where('ba.isActive =:active')
                ->andwhere('ba.isDeleted =:deleted')
                ->andWhere(
                        $qb->expr()->orX(
                                $qb->expr()->like('a.applicationName', ':searchtext')
                ))
                ->setParameter('active', 1)
                ->setParameter('deleted', 0)
                ->setParameter('searchtext', "%" . $search_text . "%")
                ->setFirstResult($offset)
                ->setMaxResults($limit)
                ->getQuery();
        $result_res = $query->getResult();
        return $result_res;
    }

    /**
     * function for getting the appliaction count based on the search text
     * @param type $search_text
     * @return type
     */
    public function searchApplicationByTextCount($search_text) {
        $$search_text = trim($search_text);
        $result_res = array();
        $appliaction_count = 0;
        $qb = $this->createQueryBuilder('a');

        $query = $qb->select('count(a)')
                ->innerJoin('SixthContinentConnectBundle:ApplicationBusinessAccount', 'ba', 'WITH', 'a.applicationId = ba.applicationId')
                ->where('ba.isActive =:active')
                ->andwhere('ba.isDeleted =:deleted')
                ->andWhere(
                        $qb->expr()->orX(
                                $qb->expr()->like('a.applicationName', ':searchtext')
                ))
                ->setParameter('active', 1)
                ->setParameter('deleted', 0)
                ->setParameter('searchtext', "%" . $search_text . "%")
                ->getQuery();
        $result_res = $query->getResult();
        //check if set then assign it 
        if (isset($result_res[0][1])) {
            $appliaction_count = $result_res[0][1];
        }
        return $appliaction_count;
    }

    /**
     * search an application
     * @param string $search_string
     * @param int $limit_start
     * @param int $limit_size
     * @return array
     */
    public function searchApplication($search_string, $limit_start, $limit_size) {
        $search_text = Utility::getTrimmedString($search_string);
        $result_res = array();
        $qb = $this->createQueryBuilder('a');

        $qb->select('a.id', 'a.userId as user_id', 'a.applicationId as application_id', 'a.applicationName as application_name', 
                'a.applicationUrl as application_url', 'a.applicationSecret as application_secret', 'ba.email', 'ba.description', 'ba.name', 'ba.businessName as business_name', 'ba.businessType as business_type', 'ba.businessCountry as business_country', 'ba.businessRegion as business_region', 'ba.businessCity as business_city', 'ba.businessAddress as business_address', 'ba.phone', 'ba.zip', 'ba.province', 'ba.vatNumber as vat_number', 'ba.iban', 'ba.fiscalCode as fiscal_code', 'ba.represFiscalCode as repres_fiscal_code', 'ba.represFirstName as repres_first_name', 'ba.represLastName as repres_last_name', 'ba.represPlaceOfBirth as repres_place_of_birth', 'ba.represDob as repres_dob', 'ba.represEmail as repres_email', 'ba.represPhoneNumber as repres_phone_number', 'ba.represAddress as repres_address', 'ba.represProvince as repres_province', 'ba.represCity as repres_city', 'ba.represZip as repres_zip', 'ba.createdAt as created_at', 'ba.updatedAt as updated_at',
                'ba.isActive as is_active', 'ba.isDeleted as is_deleted', 'ba.latitude', 'ba.longitude', 'ba.mapPlace as map_place', 'ba.profileImage as profile_image', 'ba.catId as cat_id')
                ->innerJoin('SixthContinentConnectBundle:ApplicationBusinessAccount', 'ba', 'WITH', 'a.applicationId = ba.applicationId')
                ->where('ba.isActive =:active')
                ->andwhere('ba.isDeleted =:deleted');
        if ($search_string != '') {
            $qb->andWhere(
                            $qb->expr()->orX(
                                    $qb->expr()->like('a.applicationName', ':searchtext')
                    ))
                    ->setParameter('searchtext', "%" . $search_text . "%");
        }

        $qb->setParameter('deleted', 0)
           ->setParameter('active', 1)
           ->setFirstResult($limit_start)
           ->setMaxResults($limit_size);

        $query = $qb->getQuery();
        $result_res = $query->getResult();
        return $result_res;
    }

    /**
     * search an application count
     * @param string $search_string
     * @param int $limit_size
     * @return int
     */
    public function searchApplicationCount($search_string) {
        $search_text = Utility::getTrimmedString($search_string);
        $result_res = array();
        $qb = $this->createQueryBuilder('a');

        $qb->select('count(a.id)')
                ->innerJoin('SixthContinentConnectBundle:ApplicationBusinessAccount', 'ba', 'WITH', 'a.applicationId = ba.applicationId')
                ->where('ba.isActive =:active')
                ->andwhere('ba.isDeleted =:deleted');
        if ($search_string != '') {
            $qb->andWhere(
                            $qb->expr()->orX(
                                    $qb->expr()->like('a.applicationName', ':searchtext')
                    ))
                    ->setParameter('searchtext', "%" . $search_text . "%");
        }

        $qb->setParameter('deleted', 0)
           ->setParameter('active', 1);

        $query = $qb->getQuery();
        $count = $query->getSingleScalarResult();
        return $count;
    }
    
}
