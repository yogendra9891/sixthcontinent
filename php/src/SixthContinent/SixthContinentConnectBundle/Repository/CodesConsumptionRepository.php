<?php

namespace SixthContinent\SixthContinentConnectBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CodesConsumptionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CodesConsumptionRepository extends EntityRepository {

  public function getPurchasedCouponDetails($userId, $status = null, $offset = 0, $limit = 10) {
    $results = array();
    $qb = $this->createQueryBuilder('cc');
    $qb->select('cp.id, t.id as transaction_id, t.transactionValue as transaction_value,'
                    . ' t.discount, t.usedCi as used_ci, t.paybleValue as payble_value, '
                    . 't.date as purchase_date, cta.expiredDate as expiry_date, cc.coupon,'
                    . ' cpt.description as cpt_description,'
                    . ' cpt.promotionLabel as label, cpt.defaultImg as default_img')
            ->innerJoin('SixthContinentConnectBundle:Sixthcontinentconnecttransaction', 't', 'WITH', 'cc.transactionId=t.id AND cc.userId=t.userId')
            ->innerJoin('SixthContinentConnectBundle:CouponToActive', 'cta', 'WITH', 'cta.id=cc.couponId')
            ->innerJoin('CommercialPromotionBundle:CommercialPromotion', 'cp', 'WITH', 'cp.id=cta.offerId')
            ->innerJoin('CommercialPromotionBundle:CommercialPromotionType', 'cpt', 'WITH', 'cpt.id=cp.commercialPromotionTypeId')
            ->orderBy('t.id', 'DESC')
            ->where('t.userId = :userId AND t.transactionType= :transactionType');
    if ($status) {
      $qb->andWhere('t.status= :status')
              ->setParameter('status', $status);
    }
    $qb
            ->setMaxResults($limit)
            ->setFirstResult($offset)
            ->setParameter('userId', (int) $userId)
            ->setParameter('transactionType', 'PAY_ONCE_OFFER');
    try {
      $results = $qb->getQuery()->getResult();
    } catch (\Exception $e) {
      
    }
    return $results;
  }

  public function getPurchasedCouponDetailsCount($userId, $status = null) {
    $result = 0;
    $qb = $this->createQueryBuilder('cc');
    $qb->select('count(cc.id) as records')
            ->innerJoin('SixthContinentConnectBundle:Sixthcontinentconnecttransaction', 't', 'WITH', 'cc.transactionId=t.id AND cc.userId=t.userId')
            ->innerJoin('SixthContinentConnectBundle:CouponToActive', 'cta', 'WITH', 'cta.id=cc.couponId')
            ->innerJoin('CommercialPromotionBundle:CommercialPromotion', 'cp', 'WITH', 'cp.id=cta.offerId')
            ->innerJoin('CommercialPromotionBundle:CommercialPromotionType', 'cpt', 'WITH', 'cpt.id=cp.commercialPromotionTypeId')
            ->orderBy('t.id', 'DESC')
            ->where('t.userId = :userId AND t.transactionType= :transactionType');
    if ($status) {
      $qb->andWhere('t.status= :status')
              ->setParameter('status', $status);
    }
    $qb
            ->setParameter('userId', (int) $userId)
            ->setParameter('transactionType', 'PAY_ONCE_OFFER');
    try {
      $results = $qb->getQuery()->getResult();
      $result = isset($results[0]['records']) ? $results[0]['records'] : 0;
    } catch (\Exception $e) {
      //echo $e->getMessage();
    }

    return $result;
  }

  /**
   * find the codeconsumption list those are used in it.
   * @param string $dates
   */
  public function getCodeCosumptionsData($dates) {
    $results = $date_array = array();
    foreach ($dates as $date) {
      $date_array[] = "'" . $date . "'";
    }
    $imploded_dates = implode(',', $date_array);
    $dates_sql = "($imploded_dates)";
    $code_consumption_table = $this->getEntityManager()->getClassMetadata('SixthContinentConnectBundle:CodesConsumption')->getTableName();
    $sql = "SELECT cc.* from $code_consumption_table as cc where date_format(date(date),'%Y-%m-%d') in $dates_sql";
    try {
      $query = $this->getEntityManager()
              ->getConnection()
              ->prepare($sql);
      $query->execute();
      $results = $query->fetchAll();
    } catch (\Exception $e) {
      
    }
    return $results;
  }

}
