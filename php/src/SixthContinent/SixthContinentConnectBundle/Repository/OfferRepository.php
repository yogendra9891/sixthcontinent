<?php

namespace SixthContinent\SixthContinentConnectBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * OfferRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OfferRepository extends EntityRepository
{
    public function searchByText($search_text, $offset = 0, $limit = 4) {
        $search_text = addslashes(trim($search_text));
        $results = array();
        try{
            $qb = $this->createQueryBuilder('o');
            $query = $qb->select('o.id', 'o.name', 'o.image', 'o.imageThumb', 'o.description')
                    ->where('o.isActive =:active')
                    ->andWhere('o.isDeleted = :deleted')
                    ->andWhere(
                            $qb->expr()->orX(
                                    $qb->expr()->like('o.name', ':searchtext')
                    ))
                    ->setParameter('active', 1)
                    ->setParameter('deleted', 0)
                    ->setParameter('searchtext', "%" . $search_text . "%")
                    ->setFirstResult($offset)
                    ->setMaxResults($limit)
                    ->getQuery();
            $results = $query->getResult();
        } catch(\Exception $e){
            
        }
        return $results;
    }
    
    public function searchByTextCount($search_text) {
        $search_text = addslashes(trim($search_text));
        $result = 0;
        try{
            $qb = $this->createQueryBuilder('o');
            $query = $qb->select('count(o.id) as records')
                    ->where('o.isActive =:active')
                    ->andWhere('o.isDeleted = :deleted')
                    ->andWhere(
                            $qb->expr()->orX(
                                    $qb->expr()->like('o.name', ':searchtext')
                    ))
                    ->setParameter('active', 1)
                    ->setParameter('deleted', 0)
                    ->setParameter('searchtext', "%" . $search_text . "%")
                    ->getQuery();
            $results = $query->getSingleResult();
            $result = isset($results['records']) ? $results['records'] : 0;
        } catch(\Exception $e){
            //echo $e->getMessage();
        }
        return $result;
    }
    
}
