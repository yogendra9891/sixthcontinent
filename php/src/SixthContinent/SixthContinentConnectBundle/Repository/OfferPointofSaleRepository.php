<?php

namespace SixthContinent\SixthContinentConnectBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * OfferPointofSaleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OfferPointofSaleRepository extends EntityRepository
{
    public function getAllPOS($limit=null, $offset=0){
        $results = array();
        $_limit = $limit>0 ? " LIMIT ".(int)$offset.", $limit" : '';
        $posTable = $this->getEntityManager()->getClassMetadata('SixthContinentConnectBundle:OfferPointofSale')->getTableName();
        $offerTable = $this->getEntityManager()->getClassMetadata('SixthContinentConnectBundle:Offer')->getTableName();
        $storeTable = $this->getEntityManager()->getClassMetadata('StoreManagerStoreBundle:Store')->getTableName();
        $sql = "SELECT p.*, o.name as offer_name, o.image as offer_image, o.imagethumb as offer_imagethumb, if(o.price<=0, 0, o.price)/100 as offer_price, "
                . " o.description as offer_description, o.shop_id, o.category as offer_category, "
                . " o.percentage as offer_discount, o.is_active as offer_status "
                . " FROM $posTable p INNER JOIN $offerTable o ON(p.offer_id = o.id) INNER JOIN  $storeTable s ON(o.shop_id=s.id) "
                . " WHERE o.is_active=:active AND o.is_deleted=:deleted AND p.is_active=:active AND p.is_deleted=:deleted AND s.is_active=:shopActive $_limit";
        
        try{
            $query = $this->getEntityManager()
                    ->getConnection()
                    ->prepare($sql);
            $query->bindValue('active', 1);
            $query->bindValue('deleted', 0);
            $query->bindValue('shopActive', 1);
            $query->execute();
            $results = $query->fetchAll();
        }catch(\Exception $e){
            //echo $e->getMessage();
        }
        return $results;
    }
    
    /**
     * get point of sale of offer
     * @param type $offer_id
     * @param type $limit_start
     * @param type $limit_size
     */
    public function getOfferPointofSale($offer_id, $limit_start, $limit_size) {
        $qb = $this->createQueryBuilder('a');

        $query = $qb->select('o.id as offer_id, o.name as offer_name, o.image as image,  o.imageThumb as image_thumb, a.country as country, a.province as province,a.place as place, a.region as region, a.zip as zip, a.address as address, a.latitude, a.longitude')
                ->leftJoin('SixthContinentConnectBundle:Offer', 'o', 'WITH', 'a.offerId = o.id')
                ->where('o.isActive =:active')
                ->andwhere('o.isDeleted =:deleted')
                ->andwhere('a.offerId =:offer_id')
                ->setParameter('active', 1)
                ->setParameter('deleted', 0)
                ->setParameter('offer_id', $offer_id)
                ->orderBy('a.province', 'ASC')
                ->setFirstResult($limit_start)
                ->setMaxResults($limit_size)
                ->getQuery();
        $result_res = $query->getResult();
        return $result_res;
    }
    
    /**
     * get point of sale of offer
     * @param type $offer_id
     * @param type $limit_start
     * @param type $limit_size
     */
    public function getOfferPointofSaleArray($offer_id, $limit_start, $limit_size , $latitude = null , $longitude = null) {
        $result_res = array();
        $qb = $this->createQueryBuilder('ps');
        
        $query = $qb->select('ps')
                ->where('ps.offerId =:offer_id')
                ->setParameter('offer_id', $offer_id)
                ->orderBy('ps.province', 'ASC')
                ->setFirstResult($limit_start)
                ->setMaxResults($limit_size)
                ->getQuery();
        $result_res = $query->getArrayResult();
        return $result_res;
    }
    
    /**
     * 
     * @param type $data
     * @return type
     */
    public function getOfferPointofSaleArrayV2($offer_id=null, $latitude=null, $longitude=null ) {
        $data_result = array();
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $query = "
        SELECT  * ,
        SQRT( POW(69.1 * (  latitude - :latitude ), 2) + 
        POW(69.1 * ( :longitude  - longitude) * COS(latitude / 57.3), 2)) 
        AS distance 
        from point_of_sale
        where 1=1
        ";

        if( $offer_id > 0 ){
            $query.=" and offer_id = :offer_id "; 
            
        }else{
            $query.=" HAVING distance < :limit_distance ORDER  BY distance "; 
        }
        $statement = $connection->prepare($query);
        
        $longitude = ( $longitude != null) ? $longitude : "9.1881714";
        $latitude = ($latitude != null ) ? $latitude: "45.463681";
        $limit_distance =  "100";
        
        if( $offer_id > 0 ){
            $statement->bindValue('offer_id', $offer_id);
            
        }else{
            $statement->bindValue('limit_distance', $limit_distance);
        }
        
        $statement->bindValue('longitude', $longitude);
        $statement->bindValue('latitude', $latitude);
        $statement->execute();
 
        $data =  $statement->fetchAll();
        return $data;
    }

    
    /**
     * get point of sale of offer count
     * @param int $offer_id
     * @return int $count
     */
    public function getOfferPointofSaleCount($offer_id) {
        $qb = $this->createQueryBuilder('a');

        $query = $qb->select('count(a.id)')
                ->leftJoin('SixthContinentConnectBundle:Offer', 'o', 'WITH', 'a.offerId = o.id')
                ->where('o.isActive =:active')
                ->andwhere('o.isDeleted =:deleted')
                ->andwhere('a.offerId =:offer_id')
                ->setParameter('active', 1)
                ->setParameter('deleted', 0)
                ->setParameter('offer_id', $offer_id)
                ->getQuery();
        $count = $query->getSingleScalarResult();
        return $count;
    }
    

}
