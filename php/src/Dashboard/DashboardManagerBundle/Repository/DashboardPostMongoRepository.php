<?php

namespace Dashboard\DashboardManagerBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * DashboardPostMongoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DashboardPostMongoRepository extends DocumentRepository
{
    
   /**
    * post lising
    * @param array $user_id
    * @return object array
    */
  
 /*   
    public function getDashboardPosts($user_id, $friend_ids, $following_ids, $citizen_writers, $limit, $offset)
    {
        //friends public, only friends.
        //following public post.
        //citizen writer public post.
        //user public, friends only and private posts.
          $qb     = $this->createQueryBuilder('u');
          $result =  $qb->field('is_active')->equals("1")
                        ->addOr(
                              $qb->expr()
                              ->field('to_id')->in($friend_ids)
                              ->field('privacy_setting')->in(array(1,2))
                              )
                        ->addOr(
                              $qb->expr()
                              ->field('to_id')->in($following_ids)
                              ->field('privacy_setting')->in(array(1))
                              )
                        ->addOr(
                              $qb->expr()
                              ->field('to_id')->in($citizen_writers)
                              ->field('privacy_setting')->in(array(1))
                              )
                        ->addOr(
                              $qb->expr()
                              ->field('to_id')->in($user_id)
                              ->field('privacy_setting')->in(array(1,2,3))
                              )
                        ->sort('id','DESC')
                        ->limit($limit)
                        ->skip($offset)
                        ->getQuery()
                        ->execute()
                        ->toArray(false);
            return $result;
    }
    */
    
    public function getDashboardPosts($user_id,$personal_friend_ids, $professional_friend_ids, $following_ids, $citizen_writers, $limit, $offset, $last_id = null)
    {
	if(!empty($last_id)){
	$offset = 0;
	}
        // 1 for personal friend, 2 for professional friend and 3 for public
        
          $qb     = $this->createQueryBuilder('u');
          $result =  $qb->field('is_active')->equals("1")
                        ->addOr(
                              $qb->expr()
                              ->field('to_id')->in($personal_friend_ids)
                              ->field('privacy_setting')->in(array(1,3))    //public and personal post of personal friends.
                              )
                        ->addOr(
                              $qb->expr()
                              ->field('to_id')->in($professional_friend_ids) //public and professional post of personal friends.
                              ->field('privacy_setting')->in(array(2,3))
                              )
                        ->addOr(
                              $qb->expr()
                              ->field('to_id')->in($following_ids)
                              ->field('privacy_setting')->in(array(3)) //following public post.
                              )
                        ->addOr(
                              $qb->expr()
                              ->field('to_id')->in($citizen_writers)
                              ->field('privacy_setting')->in(array(3)) //citizen writer public post.
                              )
                        ->addOr(
                              $qb->expr()
                              ->field('to_id')->in($user_id)
                              ->field('privacy_setting')->in(array(1,2,3)) //any post which is for user(public, personal, or professional).
                              )
                        ->addOr(
                              $qb->expr()    
                                  ->field('tagged_friends')->in($user_id)
                              );
          if (!empty($last_id)) {
             $result = $qb->field('id')->lt($last_id);
        }
             $result = $qb->sort('id','DESC');
             $result = $qb->limit($limit);
                        $result = $qb->skip($offset)
                        ->getQuery()
                        ->execute()
                       ->toArray(false);
            return $result;
    }
    
    
    
   /**
    * total posts count for dashboard
    * @param array $user_id
    * @return object array
    */
    public function getDashboardPostsCount($user_id, $personal_friend_ids, $professional_friend_ids, $following_ids, $citizen_writers)
    {
          
          $qb     = $this->createQueryBuilder('u');
          $result =  $qb->field('is_active')->equals("1")
                  ->addOr(
                              $qb->expr()
                              ->field('to_id')->in($personal_friend_ids)
                              ->field('privacy_setting')->in(array(1,3))    //public and personal post of personal friends.
                              )
                        ->addOr(
                              $qb->expr()
                              ->field('to_id')->in($professional_friend_ids) //public and professional post of personal friends.
                              ->field('privacy_setting')->in(array(2,3))
                              )
                        ->addOr(
                              $qb->expr()
                              ->field('to_id')->in($following_ids)
                              ->field('privacy_setting')->in(array(3)) //following public post.
                              )
                        ->addOr(
                              $qb->expr()
                              ->field('to_id')->in($citizen_writers)
                              ->field('privacy_setting')->in(array(3)) //citizen writer public post.
                              )
                        ->addOr(
                              $qb->expr()
                              ->field('to_id')->in($user_id)
                              ->field('privacy_setting')->in(array(1,2,3)) //any post which is for user(public, personal, or professional).
                              )
                        ->addOr(
                              $qb->expr()    
                                  ->field('tagged_friends')->in($user_id)
                              )
                  ->getQuery()
                  ->execute()->count();
            return $result;
    }
   
    /**
    * post lising
    * @param array $user_id
    * @return object array
    */
    public function getNonFriendDashboardPosts($user_id, $personal_friend_ids, $professional_friend_ids, $following_ids, $citizen_writers, $limit, $offset, $last_id = null)
    {
          //friends public, only friends.
         //following public post.
         //citizen writer public post.
         //user public, friends only and private posts.
        if(!empty($last_id)){
	    $offset = 0;
	}
          $qb     = $this->createQueryBuilder('u');
          $result =  $qb->field('is_active')->equals("1")
                  ->addOr(
                        $qb->expr()
                        ->field('to_id')->in($personal_friend_ids)
                        ->field('privacy_setting')->in(array(1))
                        )
                  ->addOr(
                        $qb->expr()
                        ->field('to_id')->in($professional_friend_ids)
                        ->field('privacy_setting')->in(array(2))
                        )
                  ->addOr(
                        $qb->expr()
                        ->field('to_id')->in($following_ids)
                        ->field('privacy_setting')->in(array(1))
                        )
                  ->addOr(
                        $qb->expr()
                        ->field('to_id')->in($citizen_writers)
                        ->field('privacy_setting')->in(array(1))
                        )
                  ->addOr(
                        $qb->expr()
                        ->field('to_id')->in($user_id)
                        ->field('privacy_setting')->in(array(1))
                        );
        if (!empty($last_id)) {
             $result = $qb->field('id')->lt($last_id);
        }
    $result =  $qb->sort('id','DESC')
                  ->limit($limit)
                  ->skip($offset)
                  ->getQuery()
                  ->execute()
                  ->toArray(false);
            return $result;
    }
    
   /**
    * total posts count for dashboard of non friend users
    * @param array $user_id
    * @return object array
    */
    public function getNonFriendDashboardPostsCount($user_id, $personal_friend_ids, $professional_friend_ids, $following_ids, $citizen_writers)
    {
          
          $qb     = $this->createQueryBuilder('u');
          $result =  $qb->field('is_active')->equals("1")
                  ->addOr(
                        $qb->expr()
                        ->field('to_id')->in($personal_friend_ids)
                        ->field('privacy_setting')->in(array(1,2))
                        )
                  ->addOr(
                        $qb->expr()
                        ->field('to_id')->in($professional_friend_ids)
                        ->field('privacy_setting')->in(array(2))
                        )
                  ->addOr(
                        $qb->expr()
                        ->field('to_id')->in($following_ids)
                        ->field('privacy_setting')->in(array(1))
                        )
                  ->addOr(
                        $qb->expr()
                        ->field('to_id')->in($citizen_writers)
                        ->field('privacy_setting')->in(array(1))
                        )
                  ->addOr(
                        $qb->expr()
                        ->field('to_id')->in($user_id)
                        ->field('privacy_setting')->in(array(1))
                        )
                  ->getQuery()
                  ->execute()->count();
            return $result;
    }
    
   /**
    * post wall listing of my wall
    * @param array $user_id
    * @param int $limit
    * @param int $offset
    * @return object array
    */
    public function getMyWallPosts ($user_id, $current_user_id = array(), $limit, $offset, $last_id=null) {
      if(!empty($last_id)){
	$offset = 0;
	}
            $qb     = $this->createQueryBuilder('User');
            $result = $qb->field('is_active')->equals("1")
                            ->addOr(
                                $qb->expr()    
                                    ->field('to_id')->in($user_id)
                                    )
                            ->addOr(
                                $qb->expr()    
                                    ->field('tagged_friends')->in($current_user_id)
                                    );
             if (!empty($last_id)) {
             $result = $qb->field('id')->lt($last_id);
        }
                     $result = $qb->sort('id','DESC')
                            ->limit($limit)
                            ->skip($offset)
                            ->getQuery()
                            ->execute()
                            ->toArray(false);

            return $result;
    }
    
   /**
    * post count of my wall
    * @param array $user_id
    * @return object array
    */
    public function getMyWallCountPosts ($user_id) {
            $qb     = $this->createQueryBuilder('User');
            $result = $qb->field('is_active')->equals("1")
                            ->field('to_id')->in($user_id)
                            ->getQuery()
                            ->execute()
                            ->toArray(false);
           
            return $result;
    }
    
    /**
    * post wall listing of other user wall
    * @param array $user_id
    * @param int $limit
    * @param int $offset
    * @return object array
    */
   /*
    public function getOtherUserWallPosts ($user_id,$friend_id = array(), $is_friend, $limit, $offset) {
        if ($is_friend) { //if current user is friend of searched user then will see public and friends post
            $privacy_setting = array(1,2);
        } else {
            $privacy_setting = array(1);
        }   
            $qb     = $this->createQueryBuilder('User');
            $result = $qb->field('is_active')->equals("1")
                           ->field('privacy_setting')->in($privacy_setting)
                            ->addOr(
                                $qb->expr()    
                                    ->field('tagged_friends')->in($friend_id)
                                    )
                            ->addOr(
                                $qb->expr()    
                                    ->field('to_id')->in($user_id)
                                    )
                     
                            ->sort('id','DESC')
                            ->limit($limit)
                            ->skip($offset)
                            ->getQuery()
                            ->execute()
                            ->toArray(false);
           
            return $result;
    }
    * 
    */
    
   /**
    * post count of other user wall posts
    * @param array $user_id
    * @return object array
    */
    
   /*
     public function getOtherUserWallCountPosts ($user_id, $is_friend) {
        if ($is_friend) { //if current user is friend of searched user then will see public and friends post
            $privacy_setting = array(1,2);
        } else {
            $privacy_setting = array(1);
        }
            $qb     = $this->createQueryBuilder('User');
            $result = $qb->field('is_active')->equals("1")
                            ->field('to_id')->in($user_id)
                            ->field('privacy_setting')->in($privacy_setting)
                            ->getQuery()
                            ->execute()
                            ->toArray(false);
           
            return $result;
    }

*/
    /**
     * Edit the post rate
     * @param type $rate_id
     * @return boolean
     */
    public function editPostRate($rate_id, $arrayPostRate, $post_id) {
        $result = $this->createQueryBuilder('post')
                ->update()
                ->field('id')->equals($post_id)
                ->field('rate.id')->equals($rate_id)
                ->field("rate.$")->set($arrayPostRate)
                ->getQuery()
                ->execute();
        return true;
    }
    
    
    
    
    /**
    * post wall listing of personal friend wall
    * @param array $user_id
    * @param int $limit
    * @param int $offset
    * @return object array
    */
    
     public function getPersonalFriendWallPosts ($user_id,$friend_id = array(), $ispersonal_friend, $limit, $offset, $last_id=null) {
        if ($ispersonal_friend) {  //if current user is personal friend of searched user then will see public post of searched friend and personal post, posted by current user
            $privacy_setting = array(1,3);
        } else {
            $privacy_setting = array(3);
        } 
        if(!empty($last_id)){
	    $offset = 0;
	}
            
            $qb     = $this->createQueryBuilder('User');
            $result = $qb->field('is_active')->equals("1")
                           ->field('privacy_setting')->in($privacy_setting)
                            ->addOr(
                                $qb->expr()    
                                    ->field('tagged_friends')->in($friend_id)
                                    )
                            ->addOr(
                                $qb->expr()    
                                    ->field('to_id')->in($user_id)
                                    );
        if (!empty($last_id)) {
            $result = $qb->field('id')->lt($last_id);
        }
                $result = $qb->sort('id','DESC')
                            ->limit($limit)
                            ->skip($offset)
                            ->getQuery()
                            ->execute()
                            ->toArray(false);       
            return $result;
    }
    
     /**
    * post count of wall posts of user's personal friend
    * @param array $user_id
    * @return object array
    */
    public function getPersonalFriendWallCountPosts ($user_id, $ispersonal_friend) {
        if ($ispersonal_friend) { //if current user is personal friend of searched user then will see public and personal friends post
            $privacy_setting = array(1,3);
        } else {
            $privacy_setting = array(3);
        }
            $qb     = $this->createQueryBuilder('User');
            $result = $qb->field('is_active')->equals("1")
                            ->field('to_id')->in($user_id)
                            ->field('privacy_setting')->in($privacy_setting)
                            ->getQuery()
                            ->execute()
                            ->toArray(false);
           
            return $result;
    }
    /**
    * post wall listing of professional friend wall
    * @param array $user_id
    * @param int $limit
    * @param int $offset
    * @return object array
    */
    
     public function getProfessionalFriendWallPosts ($user_id,$friend_id = array(), $isprofessional_friend, $limit, $offset, $last_id=null) {
        if ($isprofessional_friend) {  //if current user is personal friend of searched user then will see public post of searched friend and personal post, posted by current user
            $privacy_setting = array(2,3);
        } else {
            $privacy_setting = array(3);
        }     
        
        if(!empty($last_id)){
	    $offset = 0;
	}
            
            $qb     = $this->createQueryBuilder('User');
            $result = $qb->field('is_active')->equals("1")
                           ->field('privacy_setting')->in($privacy_setting)
                            ->addOr(
                                $qb->expr()    
                                    ->field('tagged_friends')->in($friend_id)
                                    )
                            ->addOr(
                                $qb->expr()    
                                    ->field('to_id')->in($user_id)
                                    );
        if (!empty($last_id)) {
            $result = $qb->field('id')->lt($last_id);
        }      
            $result = $qb->sort('id','DESC')
                            ->limit($limit)
                            ->skip($offset)
                            ->getQuery()
                            ->execute()
                            ->toArray(false);
           
            return $result;
    }
    
    
    /**
    * post count of wall posts of user's personal friend
    * @param array $user_id
    * @return object array
    */
    public function getProfessionalFriendWallCountPosts ($user_id, $isprofessional_friend) {
        if ($isprofessional_friend) { //if current user is professional friend of searched user then will see public and professional friends post
            $privacy_setting = array(2,3);
        } else {
            $privacy_setting = array(3);
        }
            $qb     = $this->createQueryBuilder('User');
            $result = $qb->field('is_active')->equals("1")
                            ->field('to_id')->in($user_id)
                            ->field('privacy_setting')->in($privacy_setting)
                            ->getQuery()
                            ->execute()
                            ->toArray(false);
           
            return $result;
    }
    
    /**
    * post wall listing of other (any third person) user wall
    * @param array $user_id
    * @param int $limit
    * @param int $offset
    * @return object array
    */
   
    public function getOtherUserWallPosts ($user_id,$friend_id = array(), $limit, $offset, $last_id=null) {
       //if current user is third person (i.e not any type of friend of current user)
            $privacy_setting = array(3);
        if(!empty($last_id)){
	    $offset = 0;
	}
            $qb     = $this->createQueryBuilder('User');
            $result = $qb->field('is_active')->equals("1")
                           ->field('privacy_setting')->in($privacy_setting)
                            ->addOr(
                                $qb->expr()    
                                    ->field('tagged_friends')->in($friend_id)
                                   )
                            ->addOr(
                                $qb->expr()    
                                    ->field('to_id')->in($user_id)
                                    );
        if (!empty($last_id)) {
             $result = $qb->field('id')->lt($last_id);
        }         
            $result = $qb->sort('id','DESC')
                            ->limit($limit)
                            ->skip($offset)
                            ->getQuery()
                            ->execute()
                            ->toArray(false);
           
            return $result;
    }

    
   /**
    * post count of other user wall posts
    * @param array $user_id
    * @return object array
    */
    
   
     public function getOtherUserWallCountPosts ($user_id) {
    //if current user is third person (i.e not any type of friend of current user)
        $privacy_setting = array(3);

        $qb     = $this->createQueryBuilder('User');
        $result = $qb->field('is_active')->equals("1")
                        ->field('to_id')->in($user_id)
                        ->field('privacy_setting')->in($privacy_setting)
                        ->getQuery()
                        ->execute()
                        ->toArray(false);
           
            return $result;
    }

}