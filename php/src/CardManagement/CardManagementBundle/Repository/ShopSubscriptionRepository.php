<?php

namespace CardManagement\CardManagementBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ShopSubscriptionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShopSubscriptionRepository extends EntityRepository
{
    /**
     * Check subscription
     * @param int $shop_id
     * $return array
     */
    public function checkSubscription($shop_id, $status)
    {
        $result = array();
        $qb = $this->createQueryBuilder('sm');
        $query =  $qb->select()
              ->where(
                        $qb->expr()->In('sm.status', ':status')
                    )
                ->andWhere(
                        $qb->expr()->eq('sm.shopId', ':shopid')
                    )
                  ->setParameter('status', $status)
                ->setParameter('shopid', $shop_id)
              ->getQuery();
             
         $result = $query->getResult();
         if($result){
             return $result[0];
         }
         return $result; 
    }
    
    /**
     * Get subscribed users who has interval date of current date
     */
    public function getSubscribedUsers()
    {
        //for today and previous 6 days shops
        $start_time = new \DateTime("now");
        $start_time->modify('-6 days');
        $expired_time = $start_time->format('Y-m-d');
        
        $current_time = new \DateTime("now");
        $current_time_format = $current_time->format('Y-m-d');
        
        $result = array();
        $qb = $this->createQueryBuilder('sm')
              ->select('sm.id, sm.subscriberId, sm.shopId, sm.intervalDate, sm.contractId')
              ->innerJoin('StoreManagerStoreBundle:Store', 'co', 'WITH', 'sm.shopId = co.id')
              ->where('sm.intervalDate >=:intervalat')
              ->andWhere('sm.intervalDate <=:currenttime')
              ->andWhere('co.isSubscribed =:subscribe')
              ->setParameter('intervalat', $expired_time)
              ->setParameter('currenttime', $current_time_format)
              ->setParameter('subscribe', 1)
              ->getQuery();  
         $result = $qb->getResult();
         return $result;
    }
    
    /**
     * 
     * @param type $shop_id
     * @param type $user_id
     */
    public function checkIfSubscribed($shop_id, $user_id, $status)
    {
        $result = array();
        $qb = $this->createQueryBuilder('sm');
        $query =  $qb->select()
              ->where(
                        $qb->expr()->In('sm.status', ':status')
                    )
                ->andWhere(
                        $qb->expr()->eq('sm.shopId', ':shopid')
                    )
                ->andWhere(
                        $qb->expr()->eq('sm.subscriberId', ':userid')
                    )
                ->setParameter('status', $status)
                ->setParameter('shopid', $shop_id)
                ->setParameter('userid', $user_id)
              ->getQuery();
             
         $result = $query->getResult();
         if($result){
             return $result[0];
         }
         return $result; 
    }
}
