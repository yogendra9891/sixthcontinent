<?php

namespace CardManagement\CardManagementBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ContractRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContractRepository extends EntityRepository
{
     
    /**
     * count contract
     * @param store_id
     * @return integer
     */
    public function countContracts($store_id){
        $qb = $this->createQueryBuilder('s');
              $qb->where('s.status =:enabled')		
                ->andWhere('s.deleted=:delstatus')
                ->andWhere('s.profileId=:store_id')
		->setParameter('store_id',$store_id)
		->setParameter('enabled',1)
                ->setParameter('delstatus',0);
        $query = $qb->getQuery();
        $result = $query->getResult();
        return count($result);
    }
    
     /**
     * set defualt to 0 for store_id
     * @param array $store_id
     * @return boolean
     */
    public function removeDefaultForStore($store_id){
          
        //create the query        
        $query = $this->createQueryBuilder('s')
                  ->update()
                  ->set('s.defaultflag', ':fid')
                  ->where('s.profileId =:pid')
                  ->setParameter('fid',0)
                  ->setParameter('pid', (int)$store_id)
                  ->getQuery();
        $response = $query->getResult();
        return true;
       
    }
    
     /**
     * set defualt to 1 for shop_id
     * @param array $contract_id
     * @return boolean
     */
    public function addDefaultForStore($contract_id){
          
        //create the query
        $query = $this->createQueryBuilder('s')
                ->update()
                ->set('s.defaultflag', 1)
                ->where('s.id =:id')
                ->setParameter('id', $contract_id)
                ->getQuery();
        $reponse = $query->getResult();

        if($reponse){
                return true;
        }
        return false;
    }
    
     /**
     * delete credit card
     * @param array $store_id
     * @return boolean
     */
    public function deleteCreditCard($contract_id){
          
        //create the query        
        $query = $this->createQueryBuilder('s')
                  ->update()
                  ->set('s.deleted', ':did')
                  ->where('s.id =:cid')
                  ->setParameter('did',1)
                  ->setParameter('cid', (int)$contract_id)
                  ->getQuery();
        $response = $query->getResult();
        return true;
       
    }
    
    /**
     * get the daily registration payment info for shop
     * @return object array
     */
    public function getDailyShopRegistartionInfo()
    {
        $today          =  new \DateTime('now');
        $start_date     =  $today->format('Y-m-d');
        $next_day       =  new \DateTime('tomorrow');
        $end_date       =  $next_day->format('Y-m-d');

        //create the query
        $query = $this->createQueryBuilder('c');
        $query->select('c.id, c.profileId as shop_id, p.amount as amount, p.trasactionTime as transaction_time, p.trasactionCode as trasaction_code, s.businessName as business_name')
              ->innerJoin('CardManagementBundle:Payment', 'p', 'WITH', 'p.contractId = c.id')
              ->innerJoin('StoreManagerStoreBundle:Store', 's', 'WITH', 'c.profileId = s.id');

        //check the payment type is R(registration)
        $query->where('p.paymentType =:payment_type')
                ->setParameter('payment_type', 'R');


        $query->andWhere('p.trasactionTime >=:create_at', 'p.trasactionTime <:end_at')
                        ->setParameter('create_at', $start_date)
                        ->setParameter('end_at', $end_date);

        $result     = $query->getQuery(); 
        $result_res = $result->getResult();
        return $result_res;
    }
    
    /**
     * get the daily registration payment received by sixthcontinent info from shop
     * @return object array
     */
    public function getDailyShopRegistartionFeeReceivedInfo()
    {
        $today          =  new \DateTime('now');
        $start_date     =  $today->format('Y-m-d');
        $next_day       =  new \DateTime('tomorrow');
        $end_date       =  $next_day->format('Y-m-d');

        //create the query
        $query = $this->createQueryBuilder('c');
        $query->select('c.id, c.profileId as shop_id, p.amount as amount, p.trasactionTime as transaction_time')
              ->innerJoin('CardManagementBundle:Payment', 'p', 'WITH', 'p.contractId = c.id');

        //check the payment type is R(registration)
        $query->where('p.paymentType =:payment_type')
                ->setParameter('payment_type', 'R');


        $query->andWhere('p.trasactionTime >=:create_at', 'p.trasactionTime <:end_at')
                        ->setParameter('create_at', $start_date)
                        ->setParameter('end_at', $end_date);

        $result     = $query->getQuery();
        $result_res = $result->getResult();
        return $result_res;
    }

    
    /**
     * Check if card is present for shop
     */
    public function checkCardForShop($shop_id)
    {
         $qb = $this->createQueryBuilder('s');
              $qb->where('s.status =:enabled')		
                ->andWhere('s.deleted=:delstatus')
                ->andWhere('s.profileId=:store_id')
		->setParameter('store_id',$shop_id)
		->setParameter('enabled',1)
                ->setParameter('delstatus',0);
        $query = $qb->getQuery();
        $result = $query->getResult();
        return count($result);
    }

}
