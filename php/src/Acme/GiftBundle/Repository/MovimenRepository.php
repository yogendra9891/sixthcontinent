<?php

namespace Acme\GiftBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MovimenRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovimenRepository extends EntityRepository
{
	/**
	 * Search the gift card by the requested parameters
	 * @param array $data
	 * @param int $offset
	 * @param int $limit
	 * @return object array
	 */
	public function searchByCardDetail($data, $offset, $limit)
	{
		$min_data = date('Y-m-d H:i:s', strtotime($data->min_data));
		$max_data = date('Y-m-d H:i:s', strtotime($data->max_data));

		$qb = $this->createQueryBuilder('u');
		$qb->where('u.dATA >=:mindata')
		   ->andWhere('u.dATA <=:maxdata')
		   ->orWhere('u.iDCARD =:idcard')
		   ->orWhere('u.iDPDV =:idpdv')
		   ->setParameter('idcard', $data->id_card)
		   ->setParameter('mindata', $min_data)
		   ->setParameter('maxdata', $max_data)
		   ->setParameter('idpdv', $data->id_pdv)
		   ->setFirstResult( $offset )
		   ->setMaxResults( $limit );
		$query = $qb->getQuery();
		$result = $query->getResult();
		return $result;
	}
	
	/**
	 * Count the gift card by the requested parameters
	 * @param array $data
	 * @return int
	 */
	public function searchByCardDetailCount($data)
	{
		$min_data = date('Y-m-d H:i:s', strtotime($data->min_data));
		$max_data = date('Y-m-d H:i:s', strtotime($data->max_data));

		$qb = $this->createQueryBuilder('u');
		$qb->where('u.dATA >=:mindata')
		   ->andWhere('u.dATA <=:maxdata')
		   ->orWhere('u.iDCARD =:idcard')
		   ->orWhere('u.iDPDV =:idpdv')
		   ->setParameter('idcard', $data->id_card)
		   ->setParameter('mindata', $min_data)
		   ->setParameter('maxdata', $max_data)
		   ->setParameter('idpdv', $data->id_pdv);
		$query = $qb->getQuery(); 
		$result = $query->getResult();
		return count($result);
	}
        
        /**
	 * get last day transactions
	 * @param date $date
	 * @return array
	 */
	public function getYesterdayTransaction($date)
	{
		$qb = $this->createQueryBuilder('u');
		$qb->where($qb->expr()->like('u.dATA', ':date'))
		   ->setParameter('date', $date. '%');
		$query = $qb->getQuery();
		$result = $query->getResult();
		return $result;
	}
        
        /**
         * Getting the citizen income utilized by a citizen in shop for a month
         * @param none
         * @return array
         */
        public function getCitizenIncomeUtilized()
        {
            //calculating one month interval..
            $today          =  new \DateTime('now');
            $end_date       =  $today->format('Y-m-d');
            $previous_date  =  new \DateTime('-30 days');
            $start_date     =  $previous_date->format('Y-m-d');

            //object of query builder.
            $qb = $this->createQueryBuilder('m');
            $qb->select('m.iDCARD as user_id, m.iDPDV as shop_id, sum(m.rCUTI) as income')
               ->where('m.dATA >=:start_at', 'm.dATA <:end_at')
               ->groupBy('m.iDCARD', 'm.iDPDV')
               ->setParameter('start_at', $start_date)
               ->setParameter('end_at', $end_date);
            $query    = $qb->getQuery();
            $response = $query->getResult();
            return $response;            
        }
        
        /**
         * finding the transaction history for a shop
         * @param int $shop_id
         * @param int $offset
         * @param int $limit
         */
        public function getTransactionHistory($shop_id, $offset, $limit)
        {
            //object of query builder.
            $qb = $this->createQueryBuilder('m');
            $qb->select()
               ->innerJoin('UserManagerSonataUserBundle:User', 'u', 'WITH', 'm.iDCARD = u.id')
               ->where('m.iDPDV=:shop_id')
               ->orderBy('m.id', 'DESC')
               ->setFirstResult($offset)     
               ->setMaxResults($limit)     
               ->setParameter('shop_id', $shop_id);
            $query    = $qb->getQuery();
            $response = $query->getResult();
            return $response;                     
        }
        
        /**
         * finding the transaction history count for a shop
         * @param int $shop_id
         * @param int $offset
         * @param int $limit
         */
        public function getTransactionHistoryCount($shop_id)
        {
            //object of query builder.
            $qb = $this->createQueryBuilder('m');
            $qb->select()
               ->innerJoin('UserManagerSonataUserBundle:User', 'u', 'WITH', 'm.iDCARD = u.id')
               ->where('m.iDPDV=:shop_id') 
               ->setParameter('shop_id', $shop_id);
            $query    = $qb->getQuery();
            $response = $query->getResult();
            return count($response); 
        }
}
