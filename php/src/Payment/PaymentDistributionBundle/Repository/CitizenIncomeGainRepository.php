<?php

namespace Payment\PaymentDistributionBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CitizenIncomeGainRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CitizenIncomeGainRepository extends EntityRepository {
     
    /**
     * function for getting the user affiliation users
     * @param type $user_id
     * @return type
    */
    public function getUserAffiliator($user_id) {
       $qb = $this->_em->createQueryBuilder();
        $qb->select('count(u.id)')
                ->from('AffiliationAffiliationManagerBundle:AffiliationCitizen', 'u')
                ->where('u.toId = :user_id')
                ->setParameter('user_id', $user_id);
        $result = $qb->getQuery()->getResult();
        
        return $result[0][1];
    }
    
    /**
     * function for getting the shop affiliation users
     * @param type $user_id
     * @return type
    */
    public function getShopAffiliator($shop_id) {
       $qb = $this->_em->createQueryBuilder();
        $qb->select('count(u.id)')
                ->from('AffiliationAffiliationManagerBundle:AffiliationShop', 'u')
                ->where('u.shopId = :shop_id')
                ->setParameter('shop_id', $shop_id);
        $result = $qb->getQuery()->getResult();
        return $result[0][1];
    }
    
    /**
     * function for getting the friends/followers users
     * @param type $user_id
     * @return type
    */
    public function getFriendFollowerAffiliator($user_id) {
        $citizen_income_table = $this->getEntityManager()->getClassMetadata('PaymentPaymentDistributionBundle:CitizenIncomeGain')->getTableName();
        $userconnection_table = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:UserConnection')->getTableName();
        $follower_table = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:UserFollowers')->getTableName();
        
        $users_count = 0;
        $sql = "SELECT COUNT(*) AS users_count FROM (
        ( SELECT t1.id as user_id
        from fos_user_user as t1  
        inner join $userconnection_table as t2 
        on(t2.connect_to=t1.id) 
        where  t1.enabled=1 AND (t2.personal_status=1 OR t2.professional_status=1) AND (t2.connect_from=$user_id OR t2.connect_to=$user_id ) ) 
        UNION ALL
        (SELECT uf.to_id as user_id1 from fos_user_user as u inner join " . $follower_table . " uf on u.id = uf.sender_id where sender_id = $user_id)) AS s";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        if(count($result) > 0 ) {
            $users_count = $result[0]['users_count'];
        }
        return $users_count;
    }
    
    /**
     * function for geting the same country users
     * @param type $user_id
     * @return type 
     */
    public function getSameCountryUser($user_id) {
        $users_count = 0;
        $sql = "select count(id) as users_count from fos_user_user where country = (select country from fos_user_user where id = $user_id)";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        if(count($result) > 0 ) {
            $users_count = $result[0]['users_count'];
        } 
        
        return $users_count;
    }
    
    /**
     * 
     * @param type $user_id
     * @param type $store_id
     * @param type $country_citizen_distribute_amount
     * @param type $friend_follower_distribute_amount
     * @param type $citizen_affiliator_amount
     * @param type $store_affiliation_amount
     * @param type $purchaser_distribute_amount
     * @return type
     */
    public function distributeCitizenIncomeGain($transaction_id,$user_id,$store_id,$country_citizen_distribute_amount,$friend_follower_distribute_amount,$citizen_affiliator_amount,$store_affiliation_amount,$purchaser_distribute_amount) {
        $citizen_income_table = $this->getEntityManager()->getClassMetadata('PaymentPaymentDistributionBundle:CitizenIncomeGain')->getTableName();
        $affiliation_citizen_table = $this->getEntityManager()->getClassMetadata('AffiliationAffiliationManagerBundle:AffiliationCitizen')->getTableName();
        $affiliation_store_table = $this->getEntityManager()->getClassMetadata('AffiliationAffiliationManagerBundle:AffiliationShop')->getTableName();
        $userconnection_table = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:UserConnection')->getTableName();
        $follower_table = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:UserFollowers')->getTableName();
        
        $status = 0;
        $sql = "INSERT INTO " . $citizen_income_table . "( `user_id`, `income`, `shop_id`,`date`,`transaction_id`,`purchaser_id`,`status`,`type`)
                (SELECT from_id,$citizen_affiliator_amount,$store_id,now(),$transaction_id,$user_id,$status,'CA'
                FROM " . $affiliation_citizen_table . " AS ac
                WHERE ac.to_id = $user_id)"
                . " UNION "
                . "(SELECT from_id,$store_affiliation_amount,$store_id,NOW(),$transaction_id,$user_id,$status,'SA'  FROM $affiliation_store_table "
                . "WHERE $affiliation_store_table.shop_id = $store_id)"
                . " UNION "
                . "(SELECT user_id,$friend_follower_distribute_amount ,$store_id,now(),$transaction_id,$user_id,$status,'FF' from
                (
                SELECT t1.id as user_id
                from fos_user_user as t1  
                inner join $userconnection_table as t2 
                on(t2.connect_to=t1.id) 
                where  t1.enabled=1 AND (t2.personal_status=1 OR t2.professional_status=1) AND (t2.connect_from=$user_id OR t2.connect_to=$user_id ) 
                UNION ALL
                SELECT uf.to_id as user_id1 from fos_user_user as u inner join " . $follower_table . " uf on u.id = uf.sender_id where sender_id = $user_id 
                ) AS S)"
                . " UNION "
                . "(SELECT $user_id, $purchaser_distribute_amount,$store_id,now(),$transaction_id,$user_id,$status,'PU')"
                . " UNION "
                . "(SELECT id,$country_citizen_distribute_amount,$store_id,now(),$transaction_id,$user_id,$status,'CC'
                    FROM fos_user_user AS fu WHERE fu.country = (SELECT country FROM fos_user_user WHERE id = $user_id)"
                . " AND fu.enabled = 1)";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->rowCount();
        return $result;
    }
    
    /**
     * 
     * @param type $transaction_id
     * @return type
     */
    public function deleteCitizenIncomeGain($transaction_id)
    {
        $isDeleted = $this->createQueryBuilder("u")
            ->delete()
            ->where('u.transactionId  = :transaction_id')->setParameter("transaction_id", $transaction_id)            
            ->getQuery()->execute();

        return $isDeleted;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /** Old repository code **/
    
    /**
     * function for assigning the citizen income for shop affiliator user 
     * @param type $user_id
     * @param type $store_id
     * @param type $amount
     * @return type
     */
    public function assignShopAffiliationCI($user_id, $store_id, $amount, $transaction_id) {
        $affiliation_store_table = $this->getEntityManager()->getClassMetadata('AffiliationAffiliationManagerBundle:AffiliationShop')->getTableName();
        $sql = "INSERT INTO citizenincomegain (`user_id`, `income`, `date`, `shop_id`,`purchaser_id`,`transaction_id`) "
                . "SELECT from_id,$amount,NOW(),shop_id,$user_id,$transaction_id  FROM $affiliation_store_table "
                . "WHERE ($affiliation_store_table.shop_id = $store_id)";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->rowCount();
        //$result = json_encode($result);
        return $result;
    }

    /**
     * function for assigning the citizen income for purchaser affiliator user 
     * @param type $shop_id
     * @param type $user_id
     * @param type $amount
     * @return type
     */
    public function assignAmountUserAffiliation($shop_id, $user_id, $amount, $transaction_id) {

        $citizen_income_table = $this->getEntityManager()->getClassMetadata('PaymentPaymentDistributionBundle:CitizenIncomeGain')->getTableName();
        $affiliation_citizen_table = $this->getEntityManager()->getClassMetadata('AffiliationAffiliationManagerBundle:AffiliationCitizen')->getTableName();
        $sql = "INSERT INTO " . $citizen_income_table . "( `user_id`, `income`, `shop_id`,`date`,`transaction_id`,`purchaser_id`)
                    SELECT from_id,$amount,$shop_id,now(),$transaction_id,$user_id
                    FROM " . $affiliation_citizen_table . " AS ac
                    WHERE (ac.to_id = $user_id)";

        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->rowCount();
        return $result;
    }

    /**
     * function for assigning the citizen income for purchased users friend/followers users 
     * @param type $store_id
     * @param type $user_id
     * @param type $amount
     * @return type
     */
    public function assignAmountFriendAffiliation($store_id, $user_id, $amount, $transaction_id) {

        $citizen_income_table = $this->getEntityManager()->getClassMetadata('PaymentPaymentDistributionBundle:CitizenIncomeGain')->getTableName();
        $userconnection_table = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:UserConnection')->getTableName();
        $follower_table = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:UserFollowers')->getTableName();

        $sql = "INSERT INTO " . $citizen_income_table . " (user_id, income, date,shop_id,transaction_id,purchaser_id)
        select user_id, TRUNCATE($amount/(SELECT COUNT(*) FROM (
        SELECT uc.connect_to as user_id from fos_user_user as u inner join " . $userconnection_table . " uc on u.id = uc.connect_to
        where uc.connect_from = $user_id and uc.status = 1 
        UNION ALL
        SELECT uf.to_id as user_id1 from fos_user_user as u inner join " . $follower_table . " uf on u.id = uf.sender_id where sender_id = $user_id 
        ) s2 ),0) AS total,now(),$store_id,$transaction_id,$user_id from
        (
        SELECT uc.connect_to as user_id from fos_user_user as u inner join " . $userconnection_table . " uc on u.id = uc.connect_to
        where uc.connect_from = $user_id and uc.status = 1 
        UNION ALL
        SELECT uf.to_id as user_id1 from fos_user_user as u inner join " . $follower_table . " uf on u.id = uf.sender_id where sender_id = $user_id 
        ) s";

        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->rowCount();
        return $result;
    }

    /**
     * function for updating the citizen income in the userdiscountposition for the CI for purchaser shop affiliator  
     * @param type $user_id
     * @param type $store_id
     * @param type $amount
     * @return type
     */
    public function updateShopAffiliationUserCI($user_id, $store_id, $amount) {
        $user_dp_table = $this->getEntityManager()->getClassMetadata('WalletManagementWalletBundle:UserDiscountPosition')->getTableName();
        $affiliation_store_table = $this->getEntityManager()->getClassMetadata('AffiliationAffiliationManagerBundle:AffiliationShop')->getTableName();
        $sql = "INSERT INTO  $user_dp_table (`user_id`,`total_dp`,`balance_dp`,`citizen_income`,`updated_at`,`created_at`) "
                . "values ((SELECT from_id FROM $affiliation_store_table "
                . "WHERE $affiliation_store_table.shop_id = $store_id),0,0,$amount,NOW(),NOW())"
                . "ON DUPLICATE KEY UPDATE citizen_income= citizen_income + $amount, updated_at = NOW()";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->rowCount();
        //$result = json_encode($result);
        return $result;
    }

    /*
     * function for assigning the citizen income for purchaser user counry users
     * @param type $shop_id
     * @param type $user_id
     * @param type $amount
     * @return type
     */

    public function assignUserCountryAffiliation($shop_id, $user_id, $amount, $transaction_id) {

        $citizen_income_table = $this->getEntityManager()->getClassMetadata('PaymentPaymentDistributionBundle:CitizenIncomeGain')->getTableName();
        $sql = "INSERT INTO " . $citizen_income_table . "( `user_id`, `income`, `shop_id`,`date`,`transaction_id`,`purchaser_id`)
                    SELECT id,TRUNCATE($amount/(SELECT count(*) FROM fos_user_user AS fuu WHERE"
                . " fuu.country = (SELECT country FROM fos_user_user WHERE id = $user_id AND fuu.enabled = 1 )),0),$shop_id,now(),$transaction_id,$user_id
                    FROM fos_user_user AS fu WHERE fu.country = (SELECT country FROM fos_user_user WHERE id = $user_id)"
                . " AND fu.enabled = 1";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->rowCount();
        return $result;
    }

    /**
     * function for updating the citizen income in the userdiscountposition for the CI for purchaser user affiliator 
     * @param type $user_id
     * @param type $amount
     * @return type
     */
    public function updateCitizenAffiliationUserCI($user_id, $amount) {
        $affiliation_citizen_table = $this->getEntityManager()->getClassMetadata('AffiliationAffiliationManagerBundle:AffiliationCitizen')->getTableName();
        $user_dp_table = $this->getEntityManager()->getClassMetadata('WalletManagementWalletBundle:UserDiscountPosition')->getTableName();
        $sql = "INSERT INTO  " . $user_dp_table . " (`user_id`,`total_dp`,`balance_dp`,`citizen_income`,`updated_at`,`created_at`) "
                . "values ((SELECT from_id
                    FROM " . $affiliation_citizen_table . " AS ac
                    WHERE ac.to_id = $user_id),0,0,$amount,NOW(),NOW())"
                . "ON DUPLICATE KEY UPDATE citizen_income= citizen_income + $amount,updated_at = NOW() ";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->rowCount();
        //$result = json_encode($result);
        return $result;
    }

    /**
     * function for updating the citizen income in the userdiscountposition for the CI for friends/follower
     * @param type $user_id
     * @param type $amount
     * @return type
     */
    public function updateCitizenFriendsFollowUserCI($user_id, $amount) {

        $userconnection_table = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:UserConnection')->getTableName();
        $follower_table = $this->getEntityManager()->getClassMetadata('UserManagerSonataUserBundle:UserFollowers')->getTableName();
        $user_dp_table = $this->getEntityManager()->getClassMetadata('WalletManagementWalletBundle:UserDiscountPosition')->getTableName();

        $sql = "REPLACE INTO  $user_dp_table (`user_id`,`total_dp`,`balance_dp`,`citizen_income`,`updated_at`,`created_at`) "
                . "SELECT user_id,if((select @total_dp := total_dp from $user_dp_table where user_id = s.user_id) is null,0,@total_dp ),"
                . "if((select @balance_dp := balance_dp from $user_dp_table where user_id = s.user_id) is null,0,@balance_dp ), "
                . "if((select @user_ci := citizen_income from $user_dp_table "
                . "WHERE user_id = s.user_id) is null,0,@user_ci ) + TRUNCATE($amount/(SELECT COUNT(*) FROM (
                SELECT uc.connect_to as user_id from fos_user_user as u inner join " . $userconnection_table . " uc on u.id = uc.connect_to
                where uc.connect_from = $user_id and uc.status = 1 
                UNION ALL
                SELECT uf.to_id as user_id1 from fos_user_user as u inner join " . $follower_table . " uf on u.id = uf.sender_id where sender_id = $user_id 
                ) s2 ),0),now(),if((select @ci_create := created_at from $user_dp_table where user_id = s.user_id) is null,NOW(),@ci_create ) from
                (
                SELECT uc.connect_to as user_id from fos_user_user as u inner join " . $userconnection_table . " uc on u.id = uc.connect_to
                where uc.connect_from = $user_id and uc.status = 1 
                UNION ALL
                SELECT uf.to_id as user_id1 from fos_user_user as u inner join " . $follower_table . " uf on u.id = uf.sender_id where sender_id = $user_id 
                ) s";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->rowCount();
        return $result;
    }

    /**
     * function for updating the citizen income in the userdiscountposition for the CI for same country user
     * @param type $store_id
     * @param type $user_id
     * @param type $country_citizen_affiliator_amount
     * @param type $transaction_id
     */
    public function updateUserCountryUserCI($store_id, $user_id, $amount, $transaction_id) {

        $user_dp_table = $this->getEntityManager()->getClassMetadata('WalletManagementWalletBundle:UserDiscountPosition')->getTableName();
        $affiliation_store_table = $this->getEntityManager()->getClassMetadata('AffiliationAffiliationManagerBundle:AffiliationShop')->getTableName();
        $sql = "REPLACE INTO  $user_dp_table (`user_id`,`total_dp`,`balance_dp`,`citizen_income`,`updated_at`,`created_at`) "
                . "SELECT id,"
                . "if((select @user_dp := total_dp from $user_dp_table where user_id = fu.id) is null,0,@user_dp ),"
                . "if((select @balance_dp := balance_dp from $user_dp_table where user_id = fu.id) is null,0,@balance_dp ),"
                . "if((select @user_ci := citizen_income from $user_dp_table where user_id = fu.id) is null,0,@user_ci ) + TRUNCATE($amount/(SELECT count(*) FROM fos_user_user AS fuu WHERE"
                . " fuu.country = (SELECT country FROM fos_user_user WHERE id = $user_id AND fuu.enabled = 1 ) ),0),now(),if((select @ci_create := created_at from $user_dp_table where user_id = fu.id) is null,NOW(),@ci_create )
                    FROM fos_user_user AS fu WHERE fu.country = (SELECT country FROM fos_user_user WHERE id = $user_id)"
                . " AND fu.enabled = 1";

        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->rowCount();
        //$result = json_encode($result);
        return $result;
    }

    /**
     * function for saving the amount that can not be distributes amongs the citizen
     * @param type $store_id
     * @param type $user_id
     * @param type $amount
     * @param type $transaction_id
     * @return type
     */
    public function saveNonDistributedAmount($store_id, $user_id, $amount, $transaction_id) {
        $citizen_income_gain = $this->getEntityManager()->getClassMetadata('PaymentPaymentDistributionBundle:CitizenIncomeGain')->getTableName();
        $sixthcontinent_gain = $this->getEntityManager()->getClassMetadata('PaymentPaymentDistributionBundle:SixthContinentIncomeGain')->getTableName();
        $non_distributed_amount_table = $this->getEntityManager()->getClassMetadata('PaymentPaymentDistributionBundle:NonDistributedCIAmount')->getTableName();
        $sql = "insert into $non_distributed_amount_table (`purchaser_id`,`shop_id`,`amount`,`transaction_id`) "
                . "select $user_id, $store_id, "
                . "(select $amount - (sum(income) + (select Income from $sixthcontinent_gain where transaction_id = $transaction_id)) from $citizen_income_gain where transaction_id = $transaction_id),
               $transaction_id";
       
       
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->rowCount();
        //$result = json_encode($result);
        return $result;
    }

    /**
     * function for updating the citizen income for the purchaser user 
     * @param type $store_id
     * @param type $user_id
     * @param type $amount
     * @param type $transaction_id
     */
    public function updatePurchaserUserCI($store_id, $user_id, $amount, $transaction_id) {
        $affiliation_citizen_table = $this->getEntityManager()->getClassMetadata('AffiliationAffiliationManagerBundle:AffiliationCitizen')->getTableName();
        $user_dp_table = $this->getEntityManager()->getClassMetadata('WalletManagementWalletBundle:UserDiscountPosition')->getTableName();
        $sql = "INSERT INTO  " . $user_dp_table . " (`user_id`,`total_dp`,`balance_dp`,`citizen_income`,`updated_at`,`created_at`) "
                . "values ($user_id,0,0,$amount,NOW(),NOW())"
                . "ON DUPLICATE KEY UPDATE citizen_income= citizen_income + $amount,updated_at =  now() ";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->rowCount();
        //$result = json_encode($result);
        return $result;
    }
    
     /**
     * function for assigning the citizen income to purchaser user
     * @param type $user_id
     * @param type $store_id
     * @param type $amount
     * @return type
     */
    public function assignPurchaserUserCI($user_id, $store_id, $amount, $transaction_id) {
        $affiliation_store_table = $this->getEntityManager()->getClassMetadata('AffiliationAffiliationManagerBundle:AffiliationShop')->getTableName();
        $sql = "INSERT INTO citizenincomegain (`user_id`, `income`, `date`, `shop_id`,`purchaser_id`,`transaction_id`) "
                . "values ($user_id,$amount,now(),$store_id,$user_id,$transaction_id)";
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->rowCount();
        //$result = json_encode($result);
        return $result;
    }
    
    /**
     * 
     * @param type $transaction_id
     * @return type
     */
    public function updateUserCitizenIncome($transaction_id) {
        $user_dp_table = $this->getEntityManager()->getClassMetadata('WalletManagementWalletBundle:UserDiscountPosition')->getTableName();
        $affiliation_store_table = $this->getEntityManager()->getClassMetadata('AffiliationAffiliationManagerBundle:AffiliationShop')->getTableName();
        $ci_gain_table = $this->getEntityManager()->getClassMetadata('PaymentPaymentDistributionBundle:CitizenIncomeGain')->getTableName();
//        $sql = "REPLACE INTO  $user_dp_table (`user_id`,`total_dp`,`balance_dp`,`citizen_income`,`updated_at`,`created_at`) "
//                . "(select user_id,"
//                . "if((select @user_dp := total_dp from $user_dp_table where user_id = $ci_gain_table.user_id) is null,0,@user_dp ) as total_dp,"
//                . "if((select @balance_dp := balance_dp from $user_dp_table where user_id = $ci_gain_table.user_id) is null,0,@balance_dp ) as balance_dp,"
//                . "if((select @user_ci := citizen_income from $user_dp_table where user_id = $ci_gain_table.user_id) is null,0,@user_ci )  + sum(income),NOW(),"
//                . "if((select @ci_create := created_at from $user_dp_table where user_id = $ci_gain_table.user_id) is null,NOW(),@ci_create) from $ci_gain_table where transaction_id = $transaction_id and status = 0 group by user_id)";
//        
        $sql = "INSERT INTO $user_dp_table (`user_id`,`total_dp`,`balance_dp`,`citizen_income`,`updated_at`,`created_at`,`total_citizen_income`) "
                . "(select user_id,0,0,@income := sum(income),NOW(),NOW() ,sum(income) from $ci_gain_table where transaction_id = $transaction_id and status = 0 group by user_id)  "
                . "ON DUPLICATE KEY UPDATE citizen_income = citizen_income + @income, updated_at = NOW(),total_citizen_income = total_citizen_income + @income";
       
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->rowCount();
        //$result = json_encode($result);
        return $result;
    }
    
    
    /**
     * function for setting the status 1 of the user who got the CI
     * @param type $transaction_id
     * @return type
     */
    public function SetStatusForUserGotCI($transaction_id) {
        $ci_gain_table = $this->getEntityManager()->getClassMetadata('PaymentPaymentDistributionBundle:CitizenIncomeGain')->getTableName();
        $sql = "update $ci_gain_table set status = 1 where transaction_id = $transaction_id";      
        $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare($sql);
        $stmt->execute();
        $result = $stmt->rowCount();
        //$result = json_encode($result);
        return $result;
    }

}
