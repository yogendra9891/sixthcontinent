<?php

namespace Payment\PaymentProcessBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PaymentProcessCreditRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentProcessCreditRepository extends EntityRepository
{
    /**
     * 
     * @param type $transaction_id
     * @param type $user_id
     * @param type $shop_id
     * @param type $citizen_status
     * @param type $shop_status
     * @param type $limit_start
     * @param type $limit_size
     * @return type
     */
    public function getTransactionObj($transaction_id,$user_id,$shop_id,$citizen_status,$shop_status,$limit_start,$limit_size)
    {
       //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c');
                $andWhere = 0;  
                if($transaction_id !='') {
                    $andWhere = 1;
                    $query->where('c.id =:id')
                        ->setParameter('id', $transaction_id);
                }
                
                if($user_id !='') {
                    if($andWhere == 1) {
                        $query->andWhere('c.userId =:uid')
                           ->setParameter('uid', $user_id);
                    }else {
                        $query->where('c.userId =:uid')
                           ->setParameter('uid', $user_id);
                    }
                    $andWhere = 1;
                }
                
                if($shop_id !='') {
                    if($andWhere == 1) {
                        $query->andWhere('c.shopId =:sid')
                           ->setParameter('sid', $shop_id);
                    }else {
                        $query->where('c.shopId =:sid')
                           ->setParameter('sid', $shop_id);
                    }
                    $andWhere = 1;
                }
                
                if($citizen_status !='') {
                    if($andWhere == 1) {
                        $query->andWhere('c.citizenStatus =:citizenstatus')
                              ->setParameter('citizenstatus', $citizen_status);
                    }else {
                        $query->where('c.citizenStatus =:citizenstatus')
                              ->setParameter('citizenstatus', $citizen_status);
                    }
                    $andWhere = 1;
                }
                
                if($shop_status !='') {
                    if($andWhere == 1) {
                        $query->andWhere('c.shopStatus =:shopstatus')
                              ->setParameter('shopstatus', $shop_status);
                    }else {
                        $query->where('c.shopStatus =:shopstatus')
                              ->setParameter('shopstatus', $shop_status);
                    }
                    $andWhere = 1;
                }               
        
        
                
        $result = $query
                ->orderBy('c.id', 'DESC')
                ->setFirstResult($limit_start)
                ->setMaxResults($limit_size)
                ->getQuery();
        $result_res = $result->getResult();
        return $result_res;
    }
    
    /**
     * 
     * @param type $transaction_id
     * @param type $user_id
     * @param type $shop_id
     * @param type $citizen_status
     * @param type $shop_status
     * @param type $limit_start
     * @param type $limit_size
     * @return type
     */
    public function getTransactionObjCount($transaction_id,$user_id,$shop_id,$citizen_status,$shop_status)
    {
       //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c');
                $andWhere = 0;  
                if($transaction_id !='') {
                    $andWhere = 1;
                    $query->where('c.id =:id')
                        ->setParameter('id', $transaction_id);
                }
                
                if($user_id !='') {
                    if($andWhere == 1) {
                        $query->andWhere('c.userId =:uid')
                           ->setParameter('uid', $user_id);
                    }else {
                        $query->where('c.userId =:uid')
                           ->setParameter('uid', $user_id);
                    }
                    $andWhere = 1;
                }
                
                if($shop_id !='') {
                    if($andWhere == 1) {
                        $query->andWhere('c.shopId =:sid')
                           ->setParameter('sid', $shop_id);
                    }else {
                        $query->where('c.shopId =:sid')
                           ->setParameter('sid', $shop_id);
                    }
                    $andWhere = 1;
                }
                
                if($citizen_status !='') {
                    if($andWhere == 1) {
                        $query->andWhere('c.citizenStatus =:citizenstatus')
                              ->setParameter('citizenstatus', $citizen_status);
                    }else {
                        $query->where('c.citizenStatus =:citizenstatus')
                              ->setParameter('citizenstatus', $citizen_status);
                    }
                    $andWhere = 1;
                }
                
                if($shop_status !='') {
                    if($andWhere == 1) {
                        $query->andWhere('c.shopStatus =:shopstatus')
                              ->setParameter('shopstatus', $shop_status);
                    }else {
                        $query->where('c.shopStatus =:shopstatus')
                              ->setParameter('shopstatus', $shop_status);
                    }
                    $andWhere = 1;
                }               
        $result = $query->getQuery();
        $result_res = $result->getResult();
        return count($result_res);
    }
    
    /**
     * get search transaction object list
     * @param type $search_key
     * @param type $shop_id
     * @param type $shop_status
     * @param type $citizen_status
     * @param type $limit_start
     * @param type $limit_size
     * @return type
     */
    public function searchTransactionObj($search_key,$shop_id,$shop_status,$citizen_status,$limit_start,$limit_size)
    {
       //initialise the array
        $results = array();
        
        $query = $this->createQueryBuilder('c');               
                
                $query->select('c')
                ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'co.id = c.userId');
        
                $andWhere = 0;  
                
                if($search_key !='') {
                    $trimuserName = str_replace(' ', '', $search_key);
                    $searchLike = $query->expr()->concat($query->expr()->concat('co.firstname',$query->expr()->literal(' ')), 'co.lastname');
                    $searchIn   = $query->expr()->concat('co.firstname', 'co.lastname');
                    
                    if($andWhere == 1) {
                        $query
                           ->andWhere(
                                $query->expr()->orX(
                                    $query->expr()->like('co.firstname', ':search_key_name'),
                                    $query->expr()->like('co.lastname', ':search_key_name'),
                                    $query->expr()->like('co.email', ':search_key_name'),
                                    $query->expr()->eq('co.id', ':search_key_id'),
                                    $query->expr()->like($searchIn, ':trimuser'),
                                    $query->expr()->like($searchLike, ':search_key_name')
                                )
                            )
                           ->setParameter('search_key_name',$search_key.'%')
                           ->setParameter('trimuser', $trimuserName.'%')
                           ->setParameter('search_key_id',$search_key);
                    }else {                        
                        
                        $query
                           ->where(
                                $query->expr()->orX(
                                    $query->expr()->like('co.firstname', ':search_key_name'),
                                    $query->expr()->like('co.lastname', ':search_key_name'),
                                    $query->expr()->like('co.email', ':search_key_name'),
                                    $query->expr()->eq('co.id', ':search_key_id'),
                                    $query->expr()->like($searchIn, ':trimuser'),
                                    $query->expr()->like($searchLike, ':search_key_name')
                                )
                            )
                           ->setParameter('search_key_name',$search_key.'%')
                           ->setParameter('trimuser', $trimuserName.'%')
                           ->setParameter('search_key_id',$search_key);
                    }
                    $andWhere = 1;
                }
                
                
                if($shop_id !='') {
                    if($andWhere == 1) {
                        $query->andWhere('c.shopId =:sid')
                           ->setParameter('sid', $shop_id);
                    }else {
                        $query->where('c.shopId =:sid')
                           ->setParameter('sid', $shop_id);
                    }
                    $andWhere = 1;
                }
                
                if($citizen_status !='') {
                    if($andWhere == 1) {
                        $query->andWhere('c.citizenStatus =:citizenstatus')
                              ->setParameter('citizenstatus', $citizen_status);
                    }else {
                        $query->where('c.citizenStatus =:citizenstatus')
                              ->setParameter('citizenstatus', $citizen_status);
                    }
                    $andWhere = 1;
                }
                
                if($shop_status !='') {
                    if($andWhere == 1) {
                        $query->andWhere('c.shopStatus =:shopstatus')
                              ->setParameter('shopstatus', $shop_status);
                    }else {
                        $query->where('c.shopStatus =:shopstatus')
                              ->setParameter('shopstatus', $shop_status);
                    }
                    $andWhere = 1;
                }      
                
                if($andWhere == 1) {
                    $query->andWhere('co.enabled =:isactive')
                        ->setParameter('isactive','1');       
                } else {
                    $query->where('co.enabled =:isactive')
                        ->setParameter('isactive','1'); 
                    $andWhere = 1;
                } 
        $query_res =  $query->orderBy('c.id', 'DESC')
                    ->setFirstResult($limit_start)
                    ->setMaxResults($limit_size)
                    ->getQuery();
        
        $results = $query_res->getResult();
        return $results;
        
    }
    
    /**
     * get count of search transaction object list
     * @param type $search_key
     * @param type $shop_id
     * @param type $shop_status
     * @param type $citizen_status
     * @param type $limit_start
     * @param type $limit_size
     * @return type
     */
    public function searchTransactionObjCount($search_key,$shop_id,$shop_status,$citizen_status)
    {
       //initialise the array
        $results = array();
        
        $query = $this->createQueryBuilder('c');               
                
                $query->select('c')
                ->innerJoin('UserManagerSonataUserBundle:User', 'co', 'WITH', 'co.id = c.userId');
        
                $andWhere = 0;  
                
                if($search_key !='') {
                    $trimuserName = str_replace(' ', '', $search_key);
                    $searchLike = $query->expr()->concat($query->expr()->concat('co.firstname',$query->expr()->literal(' ')), 'co.lastname');
                    $searchIn   = $query->expr()->concat('co.firstname', 'co.lastname');
                    
                    if($andWhere == 1) {
                        $query
                           ->andWhere(
                                $query->expr()->orX(
                                    $query->expr()->like('co.firstname', ':search_key_name'),
                                    $query->expr()->like('co.lastname', ':search_key_name'),
                                    $query->expr()->like('co.email', ':search_key_name'),
                                    $query->expr()->eq('co.id', ':search_key_id'),
                                    $query->expr()->like($searchIn, ':trimuser'),
                                    $query->expr()->like($searchLike, ':search_key_name')
                                )
                            )
                           ->setParameter('search_key_name',$search_key.'%')
                           ->setParameter('trimuser', $trimuserName.'%')
                           ->setParameter('search_key_id',$search_key);
                    }else {                        
                        
                        $query
                           ->where(
                                $query->expr()->orX(
                                    $query->expr()->like('co.firstname', ':search_key_name'),
                                    $query->expr()->like('co.lastname', ':search_key_name'),
                                    $query->expr()->like('co.email', ':search_key_name'),
                                    $query->expr()->eq('co.id', ':search_key_id'),
                                    $query->expr()->like($searchIn, ':trimuser'),
                                    $query->expr()->like($searchLike, ':search_key_name')
                                )
                            )
                           ->setParameter('search_key_name',$search_key.'%')
                           ->setParameter('trimuser', $trimuserName.'%')
                           ->setParameter('search_key_id',$search_key);
                    }
                    $andWhere = 1;
                }
                
                
                if($shop_id !='') {
                    if($andWhere == 1) {
                        $query->andWhere('c.shopId =:sid')
                           ->setParameter('sid', $shop_id);
                    }else {
                        $query->where('c.shopId =:sid')
                           ->setParameter('sid', $shop_id);
                    }
                    $andWhere = 1;
                }
                
                if($citizen_status !='') {
                    if($andWhere == 1) {
                        $query->andWhere('c.citizenStatus =:citizenstatus')
                              ->setParameter('citizenstatus', $citizen_status);
                    }else {
                        $query->where('c.citizenStatus =:citizenstatus')
                              ->setParameter('citizenstatus', $citizen_status);
                    }
                    $andWhere = 1;
                }
                
                if($shop_status !='') {
                    if($andWhere == 1) {
                        $query->andWhere('c.shopStatus =:shopstatus')
                              ->setParameter('shopstatus', $shop_status);
                    }else {
                        $query->where('c.shopStatus =:shopstatus')
                              ->setParameter('shopstatus', $shop_status);
                    }
                    $andWhere = 1;
                }      
                
                if($andWhere == 1) {
                    $query->andWhere('co.enabled =:isactive')
                        ->setParameter('isactive','1');       
                } else {
                    $query->where('co.enabled =:isactive')
                        ->setParameter('isactive','1'); 
                    $andWhere = 1;
                } 
        $query_res =  $query
                    ->getQuery();
        
        $results = $query_res->getResult();
        return count($results);
        
    }
    
    /**
     * get yesterday approved transactions
     * @return type
     */
    public function getApprovedPreviousDayTransactions()
    {
        $initial_date = new \DateTime(" -1 days");
        $yesterday_date =  strtotime($initial_date->format('Y-m-d')); 
       //initialise the array
        $result = array();
        $result_res = array();
        //create the query
        $query = $this->createQueryBuilder('c');
        $result = $query->select('c');
                  $query->where('c.isDistributed =:isDistributed')
                        //->andWhere('c.updatedAt =:updatedAt' );
                        ->setParameter('isDistributed', 0);
                       // ->setParameter('updatedAt',$yesterday_date);   
        $result = $query
                ->getQuery();
        $result_res = $result->getResult();
        return $result_res;
    }
    
    /**
     * update distribution status
     * @param type $transaction_id
     * @return boolean
     */
    public function updateAsDistributionComplete($transaction_id)
    {
         //create the query
        $query = $this->createQueryBuilder('sm')
                  ->update()
                  ->set('sm.isDistributed', '?1')
                  ->where('sm.id = ?2')
                  ->setParameter(1, 1)
                  ->setParameter(2, (int)$transaction_id)
                 ->getQuery();
        $response = $query->getResult();
        return true;
    }
    
}
